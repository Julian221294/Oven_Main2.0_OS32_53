CCS PCH C Compiler, Version 5.025, 5967               01-Nov-23 14:30

               Filename:   F:\1. YEAR_2023\1. NIHOPHAWA_2023\1.1. Git_Program\1.1.5. Oven_Main2.0\Oven_OS32_OS53\FW_2.0\main.lst

               ROM used:   26830 bytes (82%)
                           Largest free fragment is 5938
               RAM used:   220 (14%) at main() level
                           280 (18%) worst case
               Stack used: 6 locations (3 in main + 3 for interrupts)
               Stack size: 31

*
0000:  GOTO   6790
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   0858
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include "main.h" 
.................... #include <18F4523.h> 
.................... //////////// Standard Header file for the PIC18F4523 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4523 
*
0362:  MOVLW  8E
0364:  MOVWF  00
0366:  MOVFF  107,01
036A:  MOVFF  106,02
036E:  CLRF   03
0370:  MOVF   01,F
0372:  BNZ   0386
0374:  MOVFF  02,01
0378:  CLRF   02
037A:  MOVLW  08
037C:  SUBWF  00,F
037E:  MOVF   01,F
0380:  BNZ   0386
0382:  CLRF   00
0384:  BRA    0396
0386:  BCF    FD8.0
0388:  BTFSC  01.7
038A:  BRA    0394
038C:  RLCF   02,F
038E:  RLCF   01,F
0390:  DECF   00,F
0392:  BRA    0386
0394:  BCF    01.7
0396:  RETURN 0
0398:  MOVFF  107,10E
039C:  MOVLB  1
039E:  MOVF   x0B,W
03A0:  XORWF  x0E,F
03A2:  BTFSS  x0E.7
03A4:  BRA    03B0
03A6:  BCF    FD8.2
03A8:  BCF    FD8.0
03AA:  BTFSC  x07.7
03AC:  BSF    FD8.0
03AE:  BRA    040E
03B0:  MOVFF  107,10E
03B4:  MOVFF  10A,10F
03B8:  MOVF   x06,W
03BA:  SUBWF  x0F,F
03BC:  BZ    03CA
03BE:  BTFSS  x0E.7
03C0:  BRA    040E
03C2:  MOVF   FD8,W
03C4:  XORLW  01
03C6:  MOVWF  FD8
03C8:  BRA    040E
03CA:  MOVFF  10B,10F
03CE:  MOVF   x07,W
03D0:  SUBWF  x0F,F
03D2:  BZ    03E0
03D4:  BTFSS  x0E.7
03D6:  BRA    040E
03D8:  MOVF   FD8,W
03DA:  XORLW  01
03DC:  MOVWF  FD8
03DE:  BRA    040E
03E0:  MOVFF  10C,10F
03E4:  MOVF   x08,W
03E6:  SUBWF  x0F,F
03E8:  BZ    03F6
03EA:  BTFSS  x0E.7
03EC:  BRA    040E
03EE:  MOVF   FD8,W
03F0:  XORLW  01
03F2:  MOVWF  FD8
03F4:  BRA    040E
03F6:  MOVFF  10D,10F
03FA:  MOVF   x09,W
03FC:  SUBWF  x0F,F
03FE:  BZ    040C
0400:  BTFSS  x0E.7
0402:  BRA    040E
0404:  MOVF   FD8,W
0406:  XORLW  01
0408:  MOVWF  FD8
040A:  BRA    040E
040C:  BCF    FD8.0
040E:  MOVLB  0
0410:  RETURN 0
0412:  MOVLB  1
0414:  MOVF   x06,W
0416:  BTFSC  FD8.2
0418:  BRA    04FC
041A:  MOVWF  00
041C:  MOVF   x0A,W
041E:  BTFSC  FD8.2
0420:  BRA    04FC
0422:  ADDWF  00,F
0424:  BNC   042E
0426:  MOVLW  81
0428:  ADDWF  00,F
042A:  BC    04FC
042C:  BRA    0436
042E:  MOVLW  7F
0430:  SUBWF  00,F
0432:  BNC   04FC
0434:  BZ    04FC
0436:  MOVFF  107,10E
043A:  MOVF   x0B,W
043C:  XORWF  x0E,F
043E:  BSF    x07.7
0440:  BSF    x0B.7
0442:  MOVF   x09,W
0444:  MULWF  x0D
0446:  MOVFF  FF4,110
044A:  MOVF   x08,W
044C:  MULWF  x0C
044E:  MOVFF  FF4,03
0452:  MOVFF  FF3,10F
0456:  MULWF  x0D
0458:  MOVF   FF3,W
045A:  ADDWF  x10,F
045C:  MOVF   FF4,W
045E:  ADDWFC x0F,F
0460:  MOVLW  00
0462:  ADDWFC 03,F
0464:  MOVF   x09,W
0466:  MULWF  x0C
0468:  MOVF   FF3,W
046A:  ADDWF  x10,F
046C:  MOVF   FF4,W
046E:  ADDWFC x0F,F
0470:  MOVLW  00
0472:  CLRF   02
0474:  ADDWFC 03,F
0476:  ADDWFC 02,F
0478:  MOVF   x07,W
047A:  MULWF  x0D
047C:  MOVF   FF3,W
047E:  ADDWF  x0F,F
0480:  MOVF   FF4,W
0482:  ADDWFC 03,F
0484:  MOVLW  00
0486:  ADDWFC 02,F
0488:  MOVF   x07,W
048A:  MULWF  x0C
048C:  MOVF   FF3,W
048E:  ADDWF  03,F
0490:  MOVF   FF4,W
0492:  ADDWFC 02,F
0494:  MOVLW  00
0496:  CLRF   01
0498:  ADDWFC 01,F
049A:  MOVF   x09,W
049C:  MULWF  x0B
049E:  MOVF   FF3,W
04A0:  ADDWF  x0F,F
04A2:  MOVF   FF4,W
04A4:  ADDWFC 03,F
04A6:  MOVLW  00
04A8:  ADDWFC 02,F
04AA:  ADDWFC 01,F
04AC:  MOVF   x08,W
04AE:  MULWF  x0B
04B0:  MOVF   FF3,W
04B2:  ADDWF  03,F
04B4:  MOVF   FF4,W
04B6:  ADDWFC 02,F
04B8:  MOVLW  00
04BA:  ADDWFC 01,F
04BC:  MOVF   x07,W
04BE:  MULWF  x0B
04C0:  MOVF   FF3,W
04C2:  ADDWF  02,F
04C4:  MOVF   FF4,W
04C6:  ADDWFC 01,F
04C8:  INCF   00,F
04CA:  BTFSC  01.7
04CC:  BRA    04D8
04CE:  RLCF   x0F,F
04D0:  RLCF   03,F
04D2:  RLCF   02,F
04D4:  RLCF   01,F
04D6:  DECF   00,F
04D8:  MOVLW  00
04DA:  BTFSS  x0F.7
04DC:  BRA    04F2
04DE:  INCF   03,F
04E0:  ADDWFC 02,F
04E2:  ADDWFC 01,F
04E4:  MOVF   01,W
04E6:  BNZ   04F2
04E8:  MOVF   02,W
04EA:  BNZ   04F2
04EC:  MOVF   03,W
04EE:  BNZ   04F2
04F0:  INCF   00,F
04F2:  BTFSC  x0E.7
04F4:  BSF    01.7
04F6:  BTFSS  x0E.7
04F8:  BCF    01.7
04FA:  BRA    0504
04FC:  CLRF   00
04FE:  CLRF   01
0500:  CLRF   02
0502:  CLRF   03
0504:  MOVLB  0
0506:  RETURN 0
0508:  MOVLB  1
050A:  MOVF   x0A,W
050C:  BTFSC  FD8.2
050E:  BRA    065A
0510:  MOVWF  x16
0512:  MOVF   x0E,W
0514:  BTFSC  FD8.2
0516:  BRA    065A
0518:  SUBWF  x16,F
051A:  BNC   0526
051C:  MOVLW  7F
051E:  ADDWF  x16,F
0520:  BTFSC  FD8.0
0522:  BRA    065A
0524:  BRA    0532
0526:  MOVLW  81
0528:  SUBWF  x16,F
052A:  BTFSS  FD8.0
052C:  BRA    065A
052E:  BTFSC  FD8.2
0530:  BRA    065A
0532:  MOVFF  116,00
0536:  CLRF   01
0538:  CLRF   02
053A:  CLRF   03
053C:  CLRF   x15
053E:  MOVFF  10B,114
0542:  BSF    x14.7
0544:  MOVFF  10C,113
0548:  MOVFF  10D,112
054C:  MOVLW  19
054E:  MOVWF  x16
0550:  MOVF   x11,W
0552:  SUBWF  x12,F
0554:  BC    0570
0556:  MOVLW  01
0558:  SUBWF  x13,F
055A:  BC    0570
055C:  SUBWF  x14,F
055E:  BC    0570
0560:  SUBWF  x15,F
0562:  BC    0570
0564:  INCF   x15,F
0566:  INCF   x14,F
0568:  INCF   x13,F
056A:  MOVF   x11,W
056C:  ADDWF  x12,F
056E:  BRA    05C0
0570:  MOVF   x10,W
0572:  SUBWF  x13,F
0574:  BC    059A
0576:  MOVLW  01
0578:  SUBWF  x14,F
057A:  BC    059A
057C:  SUBWF  x15,F
057E:  BC    059A
0580:  INCF   x15,F
0582:  INCF   x14,F
0584:  MOVF   x10,W
0586:  ADDWF  x13,F
0588:  MOVF   x11,W
058A:  ADDWF  x12,F
058C:  BNC   05C0
058E:  INCF   x13,F
0590:  BNZ   05C0
0592:  INCF   x14,F
0594:  BNZ   05C0
0596:  INCF   x15,F
0598:  BRA    05C0
059A:  MOVF   x0F,W
059C:  IORLW  80
059E:  SUBWF  x14,F
05A0:  BC    05BE
05A2:  MOVLW  01
05A4:  SUBWF  x15,F
05A6:  BC    05BE
05A8:  INCF   x15,F
05AA:  MOVF   x0F,W
05AC:  IORLW  80
05AE:  ADDWF  x14,F
05B0:  MOVF   x10,W
05B2:  ADDWF  x13,F
05B4:  BNC   0588
05B6:  INCF   x14,F
05B8:  BNZ   0588
05BA:  INCF   x15,F
05BC:  BRA    0588
05BE:  BSF    03.0
05C0:  DECFSZ x16,F
05C2:  BRA    05C6
05C4:  BRA    05DC
05C6:  BCF    FD8.0
05C8:  RLCF   x12,F
05CA:  RLCF   x13,F
05CC:  RLCF   x14,F
05CE:  RLCF   x15,F
05D0:  BCF    FD8.0
05D2:  RLCF   03,F
05D4:  RLCF   02,F
05D6:  RLCF   01,F
05D8:  RLCF   x17,F
05DA:  BRA    0550
05DC:  BTFSS  x17.0
05DE:  BRA    05EC
05E0:  BCF    FD8.0
05E2:  RRCF   01,F
05E4:  RRCF   02,F
05E6:  RRCF   03,F
05E8:  RRCF   x17,F
05EA:  BRA    05F0
05EC:  DECF   00,F
05EE:  BZ    065A
05F0:  BTFSC  x17.7
05F2:  BRA    0630
05F4:  BCF    FD8.0
05F6:  RLCF   x12,F
05F8:  RLCF   x13,F
05FA:  RLCF   x14,F
05FC:  RLCF   x15,F
05FE:  MOVF   x11,W
0600:  SUBWF  x12,F
0602:  BC    0612
0604:  MOVLW  01
0606:  SUBWF  x13,F
0608:  BC    0612
060A:  SUBWF  x14,F
060C:  BC    0612
060E:  SUBWF  x15,F
0610:  BNC   0646
0612:  MOVF   x10,W
0614:  SUBWF  x13,F
0616:  BC    0622
0618:  MOVLW  01
061A:  SUBWF  x14,F
061C:  BC    0622
061E:  SUBWF  x15,F
0620:  BNC   0646
0622:  MOVF   x0F,W
0624:  IORLW  80
0626:  SUBWF  x14,F
0628:  BC    0630
062A:  MOVLW  01
062C:  SUBWF  x15,F
062E:  BNC   0646
0630:  INCF   03,F
0632:  BNZ   0646
0634:  INCF   02,F
0636:  BNZ   0646
0638:  INCF   01,F
063A:  BNZ   0646
063C:  INCF   00,F
063E:  BZ    065A
0640:  RRCF   01,F
0642:  RRCF   02,F
0644:  RRCF   03,F
0646:  MOVFF  10B,116
064A:  MOVF   x0F,W
064C:  XORWF  x16,F
064E:  BTFSS  x16.7
0650:  BRA    0656
0652:  BSF    01.7
0654:  BRA    0662
0656:  BCF    01.7
0658:  BRA    0662
065A:  CLRF   00
065C:  CLRF   01
065E:  CLRF   02
0660:  CLRF   03
0662:  MOVLB  0
0664:  RETURN 0
0666:  MOVLW  8E
0668:  MOVWF  00
066A:  MOVLB  1
066C:  MOVF   x06,W
066E:  SUBWF  00,F
0670:  MOVFF  107,02
0674:  MOVFF  108,01
0678:  BSF    02.7
067A:  MOVF   00,F
067C:  BZ    0690
067E:  BCF    FD8.0
0680:  MOVF   02,F
0682:  BNZ   0688
0684:  MOVF   01,F
0686:  BZ    0690
0688:  RRCF   02,F
068A:  RRCF   01,F
068C:  DECFSZ 00,F
068E:  BRA    067E
0690:  BTFSS  x07.7
0692:  BRA    069E
0694:  COMF   01,F
0696:  COMF   02,F
0698:  INCF   01,F
069A:  BTFSC  FD8.2
069C:  INCF   02,F
069E:  MOVLB  0
06A0:  RETURN 0
*
0B64:  DATA 20,20
0B66:  DATA 20,20
0B68:  DATA 42,41
0B6A:  DATA 4F,20
0B6C:  DATA 43,41
0B6E:  DATA 4F,20
0B70:  DATA 53,4F
0B72:  DATA 20,4C
0B74:  DATA 49,45
0B76:  DATA 55,20
0B78:  DATA 4D,45
0B7A:  DATA 20,53
0B7C:  DATA 41,59
0B7E:  DATA 0D,0A
0B80:  DATA 4E,47
0B82:  DATA 41,59
0B84:  DATA 2F,54
0B86:  DATA 48,41
0B88:  DATA 4E,47
0B8A:  DATA 2F,4E
0B8C:  DATA 41,4D
0B8E:  DATA 3A,0D
0B90:  DATA 0A,44
0B92:  DATA 4F,4E
0B94:  DATA 20,56
0B96:  DATA 49,20
0B98:  DATA 53,55
0B9A:  DATA 20,44
0B9C:  DATA 55,4E
0B9E:  DATA 47,3A
0BA0:  DATA 0D,0A
0BA2:  DATA 44,49
0BA4:  DATA 41,20
0BA6:  DATA 43,48
0BA8:  DATA 49,3A
0BAA:  DATA 0D,0A
0BAC:  DATA 4E,47
0BAE:  DATA 55,4F
0BB0:  DATA 49,20
0BB2:  DATA 56,41
0BB4:  DATA 4E,20
0BB6:  DATA 48,41
0BB8:  DATA 4E,48
0BBA:  DATA 3A,0D
0BBC:  DATA 0A,4D
0BBE:  DATA 4F,44
0BC0:  DATA 45,4C
0BC2:  DATA 3A,4E
0BC4:  DATA 49,48
0BC6:  DATA 4F,50
0BC8:  DATA 48,41
0BCA:  DATA 57,41
0BCC:  DATA 20,4F
0BCE:  DATA 53,35
0BD0:  DATA 33,00
0BD2:  DATA 53,45
0BD4:  DATA 52,49
0BD6:  DATA 3A,0D
0BD8:  DATA 0A,00
0BDA:  DATA 43,48
0BDC:  DATA 55,4F
0BDE:  DATA 4E,47
0BE0:  DATA 20,54
0BE2:  DATA 52,49
0BE4:  DATA 4E,48
0BE6:  DATA 20,53
0BE8:  DATA 55,20
0BEA:  DATA 44,55
0BEC:  DATA 4E,47
0BEE:  DATA 3A,20
0BF0:  DATA 00,00
0BF2:  DATA 55,73
0BF4:  DATA 65,72
0BF6:  DATA 0D,0A
0BF8:  DATA 00,00
0BFA:  DATA 54,48
0BFC:  DATA 4F,49
0BFE:  DATA 20,47
0C00:  DATA 49,41
0C02:  DATA 4E,20
0C04:  DATA 42,41
0C06:  DATA 54,20
0C08:  DATA 44,41
0C0A:  DATA 55,20
0C0C:  DATA 25,64
0C0E:  DATA 3A,25
0C10:  DATA 64,3A
0C12:  DATA 25,64
0C14:  DATA 0D,0A
0C16:  DATA 00,00
0C18:  DATA 4E,48
0C1A:  DATA 49,45
0C1C:  DATA 54,20
0C1E:  DATA 44,4F
0C20:  DATA 28,6F
0C22:  DATA 43,29
0C24:  DATA 20,20
0C26:  DATA 20,20
0C28:  DATA 20,20
0C2A:  DATA 54,48
0C2C:  DATA 4F,49
0C2E:  DATA 20,47
0C30:  DATA 49,41
0C32:  DATA 4E,0D
0C34:  DATA 0A,00
0C36:  DATA 20,20
0C38:  DATA 20,20
0C3A:  DATA 20,20
0C3C:  DATA 20,20
0C3E:  DATA 20,20
0C40:  DATA 20,20
0C42:  DATA 20,25
0C44:  DATA 64,3A
0C46:  DATA 25,64
0C48:  DATA 3A,25
0C4A:  DATA 64,0D
0C4C:  DATA 0A,00
0C4E:  DATA 54,48
0C50:  DATA 4F,49
0C52:  DATA 20,47
0C54:  DATA 49,41
0C56:  DATA 4E,20
0C58:  DATA 4B,45
0C5A:  DATA 54,20
0C5C:  DATA 54,48
0C5E:  DATA 55,43
0C60:  DATA 20,25
0C62:  DATA 64,3A
0C64:  DATA 25,64
0C66:  DATA 3A,25
0C68:  DATA 64,0D
0C6A:  DATA 0A,00
0C6C:  DATA 4B,45
0C6E:  DATA 54,20
0C70:  DATA 51,55
0C72:  DATA 41,20
0C74:  DATA 4D,45
0C76:  DATA 20,53
0C78:  DATA 41,59
0C7A:  DATA 3A,20
0C7C:  DATA 44,41
0C7E:  DATA 54,0D
0C80:  DATA 0A,00
0C82:  DATA 43,48
0C84:  DATA 55,20
0C86:  DATA 4B,59
0C88:  DATA 20,4E
0C8A:  DATA 47,55
0C8C:  DATA 4F,49
0C8E:  DATA 20,56
0C90:  DATA 41,4E
0C92:  DATA 20,48
0C94:  DATA 41,4E
0C96:  DATA 48,0D
0C98:  DATA 0A,00
0C9A:  DATA 0D,0A
0C9C:  DATA 00,00
0C9E:  DATA 2D,2D
0CA0:  DATA 2D,2D
0CA2:  DATA 2D,2D
0CA4:  DATA 2D,2D
0CA6:  DATA 2D,2D
0CA8:  DATA 2D,2D
0CAA:  DATA 2D,2D
0CAC:  DATA 2D,2D
0CAE:  DATA 2D,2D
0CB0:  DATA 2D,2D
0CB2:  DATA 2D,2D
0CB4:  DATA 2D,2D
0CB6:  DATA 2D,2D
0CB8:  DATA 2D,2D
0CBA:  DATA 2D,2D
0CBC:  DATA 0D,0A
0CBE:  DATA 00,00
0CC0:  DATA 20,20
0CC2:  DATA 20,20
0CC4:  DATA 20,20
0CC6:  DATA 20,4D
0CC8:  DATA 45,20
0CCA:  DATA 53,41
0CCC:  DATA 59,20
0CCE:  DATA 48,4F
0CD0:  DATA 41,4E
0CD2:  DATA 20,54
0CD4:  DATA 48,41
0CD6:  DATA 4E,48
0CD8:  DATA 0D,0A
0CDA:  DATA 00,00
0CDC:  DATA 0D,0A
0CDE:  DATA 00,00
0CE0:  DATA 45,52
0CE2:  DATA 52,4F
0CE4:  DATA 52,20
0CE6:  DATA 43,4F
0CE8:  DATA 44,45
0CEA:  DATA 3A,20
0CEC:  DATA 45,25
0CEE:  DATA 64,0D
0CF0:  DATA 0A,00
0CF2:  DATA 4B,45
0CF4:  DATA 54,20
0CF6:  DATA 51,55
0CF8:  DATA 41,20
0CFA:  DATA 4D,45
0CFC:  DATA 20,53
0CFE:  DATA 41,59
0D00:  DATA 3A,20
0D02:  DATA 4B,48
0D04:  DATA 4F,4E
0D06:  DATA 47,20
0D08:  DATA 44,41
0D0A:  DATA 54,0D
0D0C:  DATA 0A,00
0D0E:  DATA 43,48
0D10:  DATA 55,20
0D12:  DATA 4B,59
0D14:  DATA 20,4E
0D16:  DATA 47,55
0D18:  DATA 4F,49
0D1A:  DATA 20,56
0D1C:  DATA 41,4E
0D1E:  DATA 20,48
0D20:  DATA 41,4E
0D22:  DATA 48,0D
0D24:  DATA 0A,00
0D26:  DATA 0D,0A
0D28:  DATA 00,00
0D2A:  DATA 2D,2D
0D2C:  DATA 2D,2D
0D2E:  DATA 2D,2D
0D30:  DATA 2D,2D
0D32:  DATA 2D,2D
0D34:  DATA 2D,2D
0D36:  DATA 2D,2D
0D38:  DATA 2D,2D
0D3A:  DATA 2D,2D
0D3C:  DATA 2D,2D
0D3E:  DATA 2D,2D
0D40:  DATA 2D,2D
0D42:  DATA 2D,2D
0D44:  DATA 2D,2D
0D46:  DATA 2D,2D
0D48:  DATA 2D,0D
0D4A:  DATA 0A,00
0D4C:  DATA 20,20
0D4E:  DATA 20,20
0D50:  DATA 4D,45
0D52:  DATA 20,53
0D54:  DATA 41,59
0D56:  DATA 20,4B
0D58:  DATA 48,4F
0D5A:  DATA 4E,47
0D5C:  DATA 20,48
0D5E:  DATA 4F,41
0D60:  DATA 4E,20
0D62:  DATA 54,48
0D64:  DATA 41,4E
0D66:  DATA 48,0D
0D68:  DATA 0A,00
0D6A:  DATA 0D,0A
0D6C:  DATA 00,00
0D6E:  DATA 54,48
0D70:  DATA 4F,49
0D72:  DATA 20,47
0D74:  DATA 49,41
0D76:  DATA 4E,20
0D78:  DATA 4B,45
0D7A:  DATA 54,20
0D7C:  DATA 54,48
0D7E:  DATA 55,43
0D80:  DATA 20,25
0D82:  DATA 64,3A
0D84:  DATA 25,64
0D86:  DATA 3A,25
0D88:  DATA 64,0D
0D8A:  DATA 0A,00
0D8C:  DATA 4B,45
0D8E:  DATA 54,20
0D90:  DATA 51,55
0D92:  DATA 41,20
0D94:  DATA 4D,45
0D96:  DATA 20,53
0D98:  DATA 41,59
0D9A:  DATA 3A,20
0D9C:  DATA 4B,48
0D9E:  DATA 4F,4E
0DA0:  DATA 47,20
0DA2:  DATA 44,41
0DA4:  DATA 54,0D
0DA6:  DATA 0A,00
0DA8:  DATA 43,48
0DAA:  DATA 55,20
0DAC:  DATA 4B,59
0DAE:  DATA 20,4E
0DB0:  DATA 47,55
0DB2:  DATA 4F,49
0DB4:  DATA 20,56
0DB6:  DATA 41,4E
0DB8:  DATA 20,48
0DBA:  DATA 41,4E
0DBC:  DATA 48,0D
0DBE:  DATA 0A,00
0DC0:  DATA 0D,0A
0DC2:  DATA 00,00
0DC4:  DATA 2D,2D
0DC6:  DATA 2D,2D
0DC8:  DATA 2D,2D
0DCA:  DATA 2D,2D
0DCC:  DATA 2D,2D
0DCE:  DATA 2D,2D
0DD0:  DATA 2D,2D
0DD2:  DATA 2D,2D
0DD4:  DATA 2D,2D
0DD6:  DATA 2D,2D
0DD8:  DATA 2D,2D
0DDA:  DATA 2D,2D
0DDC:  DATA 2D,2D
0DDE:  DATA 2D,2D
0DE0:  DATA 2D,2D
0DE2:  DATA 2D,0D
0DE4:  DATA 0A,00
0DE6:  DATA 20,4B
0DE8:  DATA 45,54
0DEA:  DATA 20,54
0DEC:  DATA 48,55
0DEE:  DATA 43,20
0DF0:  DATA 42,4F
0DF2:  DATA 49,20
0DF4:  DATA 4E,47
0DF6:  DATA 55,4F
0DF8:  DATA 49,20
0DFA:  DATA 56,41
0DFC:  DATA 4E,20
0DFE:  DATA 48,41
0E00:  DATA 4E,48
0E02:  DATA 0D,0A
0E04:  DATA 00,00
0E06:  DATA 0D,0A
0E08:  DATA 00,00
*
0ECE:  MOVLW  80
0ED0:  BTFSC  FD8.1
0ED2:  XORWF  xF9,F
0ED4:  CLRF   xFE
0ED6:  CLRF   xFF
0ED8:  MOVFF  F5,FD
0EDC:  MOVF   xF9,W
0EDE:  XORWF  xFD,F
0EE0:  MOVF   xF4,W
0EE2:  BTFSC  FD8.2
0EE4:  BRA    112A
0EE6:  MOVWF  xFC
0EE8:  MOVWF  00
0EEA:  MOVF   xF8,W
0EEC:  BTFSC  FD8.2
0EEE:  BRA    113E
0EF0:  SUBWF  xFC,F
0EF2:  BTFSC  FD8.2
0EF4:  BRA    1032
0EF6:  BNC   0F90
0EF8:  MOVFF  F9,102
0EFC:  MOVLB  1
0EFE:  BSF    x02.7
0F00:  MOVFF  FA,101
0F04:  MOVFF  FB,100
0F08:  MOVLB  0
0F0A:  CLRF   xFF
0F0C:  BCF    FD8.0
0F0E:  MOVLB  1
0F10:  RRCF   x02,F
0F12:  RRCF   x01,F
0F14:  RRCF   x00,F
0F16:  MOVLB  0
0F18:  RRCF   xFF,F
0F1A:  DECFSZ xFC,F
0F1C:  BRA    0F0A
0F1E:  BTFSS  xFD.7
0F20:  BRA    0F28
0F22:  BSF    xFE.0
0F24:  BRA    116E
0F26:  BCF    xFE.0
0F28:  BCF    xFC.0
0F2A:  BSF    xFE.4
0F2C:  CLRF   FEA
0F2E:  MOVLW  F7
0F30:  MOVWF  FE9
0F32:  BRA    11A8
0F34:  BCF    xFE.4
0F36:  BTFSC  xFD.7
0F38:  BRA    0F52
0F3A:  BTFSS  xFC.0
0F3C:  BRA    0F72
0F3E:  MOVLB  1
0F40:  RRCF   x02,F
0F42:  RRCF   x01,F
0F44:  RRCF   x00,F
0F46:  MOVLB  0
0F48:  RRCF   xFF,F
0F4A:  INCF   00,F
0F4C:  BTFSC  FD8.2
0F4E:  BRA    1160
0F50:  BRA    0F72
0F52:  MOVLB  1
0F54:  BTFSC  x02.7
0F56:  BRA    0F78
0F58:  BCF    FD8.0
0F5A:  MOVLB  0
0F5C:  RLCF   xFF,F
0F5E:  MOVLB  1
0F60:  RLCF   x00,F
0F62:  RLCF   x01,F
0F64:  RLCF   x02,F
0F66:  DECFSZ 00,F
0F68:  BRA    0F6E
0F6A:  MOVLB  0
0F6C:  BRA    1160
0F6E:  BRA    0F54
0F70:  MOVLB  0
0F72:  BSF    xFE.6
0F74:  BRA    107E
0F76:  BCF    xFE.6
0F78:  MOVFF  F5,FD
0F7C:  MOVLB  0
0F7E:  BTFSS  xF5.7
0F80:  BRA    0F88
0F82:  MOVLB  1
0F84:  BSF    x02.7
0F86:  BRA    1150
0F88:  MOVLB  1
0F8A:  BCF    x02.7
0F8C:  BRA    1150
0F8E:  MOVLB  0
0F90:  MOVFF  F8,FC
0F94:  MOVFF  F8,00
0F98:  MOVF   xF4,W
0F9A:  SUBWF  xFC,F
0F9C:  MOVFF  F5,102
0FA0:  MOVLB  1
0FA2:  BSF    x02.7
0FA4:  MOVFF  F6,101
0FA8:  MOVFF  F7,100
0FAC:  MOVLB  0
0FAE:  CLRF   xFF
0FB0:  BCF    FD8.0
0FB2:  MOVLB  1
0FB4:  RRCF   x02,F
0FB6:  RRCF   x01,F
0FB8:  RRCF   x00,F
0FBA:  MOVLB  0
0FBC:  RRCF   xFF,F
0FBE:  DECFSZ xFC,F
0FC0:  BRA    0FAE
0FC2:  BTFSS  xFD.7
0FC4:  BRA    0FCC
0FC6:  BSF    xFE.1
0FC8:  BRA    116E
0FCA:  BCF    xFE.1
0FCC:  BCF    xFC.0
0FCE:  BSF    xFE.5
0FD0:  CLRF   FEA
0FD2:  MOVLW  FB
0FD4:  MOVWF  FE9
0FD6:  BRA    11A8
0FD8:  BCF    xFE.5
0FDA:  BTFSC  xFD.7
0FDC:  BRA    0FF6
0FDE:  BTFSS  xFC.0
0FE0:  BRA    1016
0FE2:  MOVLB  1
0FE4:  RRCF   x02,F
0FE6:  RRCF   x01,F
0FE8:  RRCF   x00,F
0FEA:  MOVLB  0
0FEC:  RRCF   xFF,F
0FEE:  INCF   00,F
0FF0:  BTFSC  FD8.2
0FF2:  BRA    1160
0FF4:  BRA    1016
0FF6:  MOVLB  1
0FF8:  BTFSC  x02.7
0FFA:  BRA    101C
0FFC:  BCF    FD8.0
0FFE:  MOVLB  0
1000:  RLCF   xFF,F
1002:  MOVLB  1
1004:  RLCF   x00,F
1006:  RLCF   x01,F
1008:  RLCF   x02,F
100A:  DECFSZ 00,F
100C:  BRA    1012
100E:  MOVLB  0
1010:  BRA    1160
1012:  BRA    0FF8
1014:  MOVLB  0
1016:  BSF    xFE.7
1018:  BRA    107E
101A:  BCF    xFE.7
101C:  MOVFF  F9,FD
1020:  MOVLB  0
1022:  BTFSS  xF9.7
1024:  BRA    102C
1026:  MOVLB  1
1028:  BSF    x02.7
102A:  BRA    1150
102C:  MOVLB  1
102E:  BCF    x02.7
1030:  BRA    1150
1032:  MOVFF  F9,102
1036:  MOVLB  1
1038:  BSF    x02.7
103A:  MOVFF  FA,101
103E:  MOVFF  FB,100
1042:  MOVLB  0
1044:  BTFSS  xFD.7
1046:  BRA    1054
1048:  MOVLB  1
104A:  BCF    x02.7
104C:  MOVLB  0
104E:  BSF    xFE.2
1050:  BRA    116E
1052:  BCF    xFE.2
1054:  CLRF   xFF
1056:  BCF    xFC.0
1058:  CLRF   FEA
105A:  MOVLW  F7
105C:  MOVWF  FE9
105E:  BRA    11A8
1060:  BTFSC  xFD.7
1062:  BRA    10BE
1064:  MOVFF  F5,FD
1068:  BTFSS  xFC.0
106A:  BRA    107E
106C:  MOVLB  1
106E:  RRCF   x02,F
1070:  RRCF   x01,F
1072:  RRCF   x00,F
1074:  MOVLB  0
1076:  RRCF   xFF,F
1078:  INCF   00,F
107A:  BTFSC  FD8.2
107C:  BRA    1160
107E:  BTFSS  xFF.7
1080:  BRA    10B4
1082:  MOVLB  1
1084:  INCF   x00,F
1086:  BTFSC  FD8.2
1088:  BRA    108E
108A:  MOVLB  0
108C:  BRA    10B4
108E:  INCF   x01,F
1090:  BTFSC  FD8.2
1092:  BRA    1098
1094:  MOVLB  0
1096:  BRA    10B4
1098:  INCF   x02,F
109A:  BTFSC  FD8.2
109C:  BRA    10A2
109E:  MOVLB  0
10A0:  BRA    10B4
10A2:  RRCF   x02,F
10A4:  RRCF   x01,F
10A6:  RRCF   x00,F
10A8:  INCF   00,F
10AA:  BTFSS  FD8.2
10AC:  BRA    10B2
10AE:  MOVLB  0
10B0:  BRA    1160
10B2:  MOVLB  0
10B4:  BTFSC  xFE.6
10B6:  BRA    0F76
10B8:  BTFSC  xFE.7
10BA:  BRA    101A
10BC:  BRA    111A
10BE:  MOVLW  80
10C0:  MOVLB  1
10C2:  XORWF  x02,F
10C4:  BTFSS  x02.7
10C6:  BRA    10D4
10C8:  MOVLB  0
10CA:  BRA    116E
10CC:  MOVFF  F9,FD
10D0:  BRA    10FA
10D2:  MOVLB  1
10D4:  MOVFF  F5,FD
10D8:  MOVF   x02,F
10DA:  BTFSC  FD8.2
10DC:  BRA    10E2
10DE:  MOVLB  0
10E0:  BRA    10FA
10E2:  MOVF   x01,F
10E4:  BTFSC  FD8.2
10E6:  BRA    10EC
10E8:  MOVLB  0
10EA:  BRA    10FA
10EC:  MOVF   x00,F
10EE:  BTFSC  FD8.2
10F0:  BRA    10F6
10F2:  MOVLB  0
10F4:  BRA    10FA
10F6:  CLRF   00
10F8:  BRA    1150
10FA:  MOVLB  1
10FC:  BTFSS  x02.7
10FE:  BRA    1104
1100:  MOVLB  0
1102:  BRA    111A
1104:  BCF    FD8.0
1106:  MOVLB  0
1108:  RLCF   xFF,F
110A:  MOVLB  1
110C:  RLCF   x00,F
110E:  RLCF   x01,F
1110:  RLCF   x02,F
1112:  DECFSZ 00,F
1114:  BRA    10FC
1116:  MOVLB  0
1118:  BRA    1160
111A:  BTFSS  xFD.7
111C:  BRA    1124
111E:  MOVLB  1
1120:  BSF    x02.7
1122:  BRA    1150
1124:  MOVLB  1
1126:  BCF    x02.7
1128:  BRA    1150
112A:  MOVFF  F8,00
112E:  MOVFF  F9,102
1132:  MOVFF  FA,101
1136:  MOVFF  FB,100
113A:  MOVLB  1
113C:  BRA    1150
113E:  MOVFF  F4,00
1142:  MOVFF  F5,102
1146:  MOVFF  F6,101
114A:  MOVFF  F7,100
114E:  MOVLB  1
1150:  MOVFF  102,01
1154:  MOVFF  101,02
1158:  MOVFF  100,03
115C:  BRA    11F6
115E:  MOVLB  0
1160:  CLRF   00
1162:  CLRF   01
1164:  CLRF   02
1166:  CLRF   03
1168:  MOVLB  1
116A:  BRA    11F6
116C:  MOVLB  0
116E:  CLRF   xFF
1170:  MOVLB  1
1172:  COMF   x00,F
1174:  COMF   x01,F
1176:  COMF   x02,F
1178:  MOVLB  0
117A:  COMF   xFF,F
117C:  INCF   xFF,F
117E:  BNZ   119A
1180:  MOVLB  1
1182:  INCF   x00,F
1184:  BTFSC  FD8.2
1186:  BRA    118C
1188:  MOVLB  0
118A:  BRA    119A
118C:  INCF   x01,F
118E:  BTFSC  FD8.2
1190:  BRA    1196
1192:  MOVLB  0
1194:  BRA    119A
1196:  INCF   x02,F
1198:  MOVLB  0
119A:  BTFSC  xFE.0
119C:  BRA    0F26
119E:  BTFSC  xFE.1
11A0:  BRA    0FCA
11A2:  BTFSC  xFE.2
11A4:  BRA    1052
11A6:  BRA    10CC
11A8:  MOVF   FEF,W
11AA:  MOVLB  1
11AC:  ADDWF  x00,F
11AE:  BNC   11C0
11B0:  INCF   x01,F
11B2:  BNZ   11C0
11B4:  INCF   x02,F
11B6:  BTFSS  FD8.2
11B8:  BRA    11C0
11BA:  MOVLB  0
11BC:  BSF    xFC.0
11BE:  MOVLB  1
11C0:  MOVF   FED,F
11C2:  MOVF   FEF,W
11C4:  ADDWF  x01,F
11C6:  BNC   11D4
11C8:  INCF   x02,F
11CA:  BTFSS  FD8.2
11CC:  BRA    11D4
11CE:  MOVLB  0
11D0:  BSF    xFC.0
11D2:  MOVLB  1
11D4:  MOVF   FED,F
11D6:  MOVF   FEF,W
11D8:  BTFSC  FEF.7
11DA:  BRA    11DE
11DC:  XORLW  80
11DE:  ADDWF  x02,F
11E0:  BTFSS  FD8.0
11E2:  BRA    11E8
11E4:  MOVLB  0
11E6:  BSF    xFC.0
11E8:  MOVLB  0
11EA:  BTFSC  xFE.4
11EC:  BRA    0F34
11EE:  BTFSC  xFE.5
11F0:  BRA    0FD8
11F2:  BRA    1060
11F4:  MOVLB  1
11F6:  MOVLB  0
11F8:  RETURN 0
*
14CC:  ADDWF  FE8,W
14CE:  CLRF   FF7
14D0:  RLCF   FF7,F
14D2:  ADDLW  E7
14D4:  MOVWF  FF6
14D6:  MOVLW  14
14D8:  ADDWFC FF7,F
14DA:  TBLRD*-
14DC:  MOVF   FF5,W
14DE:  MOVWF  FFA
14E0:  TBLRD*
14E2:  MOVF   FF5,W
14E4:  MOVWF  FF9
14E6:  DATA A4,14
14E8:  DATA A8,14
14EA:  DATA AC,14
14EC:  DATA B0,14
14EE:  DATA B4,14
14F0:  DATA B8,14
14F2:  DATA BC,14
*
15D0:  MOVF   xE0,W
15D2:  MULWF  xE2
15D4:  MOVFF  FF3,01
15D8:  MOVFF  FF4,00
15DC:  MULWF  xE3
15DE:  MOVF   FF3,W
15E0:  ADDWF  00,F
15E2:  MOVF   xE1,W
15E4:  MULWF  xE2
15E6:  MOVF   FF3,W
15E8:  ADDWFC 00,W
15EA:  MOVWF  02
15EC:  RETURN 0
*
1B16:  ADDWF  FE8,W
1B18:  CLRF   FF7
1B1A:  RLCF   FF7,F
1B1C:  ADDLW  31
1B1E:  MOVWF  FF6
1B20:  MOVLW  1B
1B22:  ADDWFC FF7,F
1B24:  TBLRD*-
1B26:  MOVF   FF5,W
1B28:  MOVWF  FFA
1B2A:  TBLRD*
1B2C:  MOVF   FF5,W
1B2E:  MOVWF  FF9
1B30:  DATA 26,1A
1B32:  DATA 3E,1A
1B34:  DATA 56,1A
1B36:  DATA 6E,1A
1B38:  DATA 86,1A
1B3A:  DATA 9E,1A
1B3C:  DATA B6,1A
1B3E:  DATA CE,1A
1B40:  DATA E6,1A
1B42:  DATA FE,1A
*
22F4:  CLRF   01
22F6:  CLRF   02
22F8:  CLRF   00
22FA:  CLRF   03
22FC:  MOVF   xE8,W
22FE:  BNZ   2304
2300:  MOVF   xE7,W
2302:  BZ    2334
2304:  MOVLW  10
2306:  MOVWF  xE9
2308:  BCF    FD8.0
230A:  RLCF   xE5,F
230C:  RLCF   xE6,F
230E:  RLCF   00,F
2310:  RLCF   03,F
2312:  MOVF   xE8,W
2314:  SUBWF  03,W
2316:  BNZ   231C
2318:  MOVF   xE7,W
231A:  SUBWF  00,W
231C:  BNC   232C
231E:  MOVF   xE7,W
2320:  SUBWF  00,F
2322:  BTFSS  FD8.0
2324:  DECF   03,F
2326:  MOVF   xE8,W
2328:  SUBWF  03,F
232A:  BSF    FD8.0
232C:  RLCF   01,F
232E:  RLCF   02,F
2330:  DECFSZ xE9,F
2332:  BRA    2308
2334:  RETURN 0
*
26BE:  ADDWF  FE8,W
26C0:  CLRF   FF7
26C2:  RLCF   FF7,F
26C4:  ADDLW  D9
26C6:  MOVWF  FF6
26C8:  MOVLW  26
26CA:  ADDWFC FF7,F
26CC:  TBLRD*-
26CE:  MOVF   FF5,W
26D0:  MOVWF  FFA
26D2:  TBLRD*
26D4:  MOVF   FF5,W
26D6:  MOVWF  FF9
26D8:  DATA 46,23
26DA:  DATA 96,23
26DC:  DATA BC,26
26DE:  DATA E6,23
26E0:  DATA 32,24
26E2:  DATA BC,26
26E4:  DATA BC,26
26E6:  DATA BC,26
26E8:  DATA BC,26
26EA:  DATA BC,26
26EC:  DATA 3A,26
26EE:  DATA BC,26
26F0:  DATA BC,26
26F2:  DATA 7C,26
*
279A:  ADDWF  FE8,W
279C:  CLRF   FF7
279E:  RLCF   FF7,F
27A0:  ADDLW  B5
27A2:  MOVWF  FF6
27A4:  MOVLW  27
27A6:  ADDWFC FF7,F
27A8:  TBLRD*-
27AA:  MOVF   FF5,W
27AC:  MOVWF  FFA
27AE:  TBLRD*
27B0:  MOVF   FF5,W
27B2:  MOVWF  FF9
27B4:  DATA 7A,27
27B6:  DATA 7A,27
27B8:  DATA 96,27
27BA:  DATA 96,27
27BC:  DATA 7A,27
27BE:  DATA 7A,27
*
2826:  ADDWF  FE8,W
2828:  CLRF   FF7
282A:  RLCF   FF7,F
282C:  ADDLW  41
282E:  MOVWF  FF6
2830:  MOVLW  28
2832:  ADDWFC FF7,F
2834:  TBLRD*-
2836:  MOVF   FF5,W
2838:  MOVWF  FFA
283A:  TBLRD*
283C:  MOVF   FF5,W
283E:  MOVWF  FF9
2840:  DATA CE,27
2842:  DATA DC,27
2844:  DATA 22,28
2846:  DATA EA,27
2848:  DATA 02,28
284A:  DATA 22,28
284C:  DATA 22,28
284E:  DATA 22,28
2850:  DATA 22,28
2852:  DATA 22,28
2854:  DATA 18,28
2856:  DATA 22,28
2858:  DATA 22,28
285A:  DATA 1E,28
*
2D1A:  ADDWF  FE8,W
2D1C:  CLRF   FF7
2D1E:  RLCF   FF7,F
2D20:  ADDLW  35
2D22:  MOVWF  FF6
2D24:  MOVLW  2D
2D26:  ADDWFC FF7,F
2D28:  TBLRD*-
2D2A:  MOVF   FF5,W
2D2C:  MOVWF  FFA
2D2E:  TBLRD*
2D30:  MOVF   FF5,W
2D32:  MOVWF  FF9
2D34:  DATA 56,2C
2D36:  DATA 64,2C
2D38:  DATA 92,2C
2D3A:  DATA 98,2C
2D3C:  DATA AA,2C
2D3E:  DATA 16,2D
2D40:  DATA 16,2D
2D42:  DATA 16,2D
2D44:  DATA 9E,2C
2D46:  DATA B2,2C
2D48:  DATA BA,2C
2D4A:  DATA 16,2D
2D4C:  DATA 16,2D
2D4E:  DATA 16,2D
2D50:  DATA 16,2D
2D52:  DATA 16,2D
2D54:  DATA F4,2C
2D56:  DATA F4,2C
2D58:  DATA 16,2D
2D5A:  DATA 10,2D
*
3104:  MOVF   xE6,W
3106:  XORWF  xE8,W
3108:  ANDLW  80
310A:  MOVWF  xEA
310C:  BTFSS  xE6.7
310E:  BRA    311A
3110:  COMF   xE5,F
3112:  COMF   xE6,F
3114:  INCF   xE5,F
3116:  BTFSC  FD8.2
3118:  INCF   xE6,F
311A:  BTFSS  xE8.7
311C:  BRA    3128
311E:  COMF   xE7,F
3120:  COMF   xE8,F
3122:  INCF   xE7,F
3124:  BTFSC  FD8.2
3126:  INCF   xE8,F
3128:  CLRF   01
312A:  CLRF   02
312C:  CLRF   00
312E:  CLRF   03
3130:  MOVF   xE8,W
3132:  BNZ   3138
3134:  MOVF   xE7,W
3136:  BZ    3168
3138:  MOVLW  10
313A:  MOVWF  xE9
313C:  BCF    FD8.0
313E:  RLCF   xE5,F
3140:  RLCF   xE6,F
3142:  RLCF   00,F
3144:  RLCF   03,F
3146:  MOVF   xE8,W
3148:  SUBWF  03,W
314A:  BNZ   3150
314C:  MOVF   xE7,W
314E:  SUBWF  00,W
3150:  BNC   3160
3152:  MOVF   xE7,W
3154:  SUBWF  00,F
3156:  BTFSS  FD8.0
3158:  DECF   03,F
315A:  MOVF   xE8,W
315C:  SUBWF  03,F
315E:  BSF    FD8.0
3160:  RLCF   01,F
3162:  RLCF   02,F
3164:  DECFSZ xE9,F
3166:  BRA    313C
3168:  BTFSS  xEA.7
316A:  BRA    3176
316C:  COMF   01,F
316E:  COMF   02,F
3170:  INCF   01,F
3172:  BTFSC  FD8.2
3174:  INCF   02,F
3176:  RETURN 0
*
36FE:  MOVF   xE6,W
3700:  CLRF   01
3702:  SUBWF  xE5,W
3704:  BC    370C
3706:  MOVFF  E5,00
370A:  BRA    3724
370C:  CLRF   00
370E:  MOVLW  08
3710:  MOVWF  xE7
3712:  RLCF   xE5,F
3714:  RLCF   00,F
3716:  MOVF   xE6,W
3718:  SUBWF  00,W
371A:  BTFSC  FD8.0
371C:  MOVWF  00
371E:  RLCF   01,F
3720:  DECFSZ xE7,F
3722:  BRA    3712
3724:  RETURN 0
*
3BCE:  ADDWF  FE8,W
3BD0:  CLRF   FF7
3BD2:  RLCF   FF7,F
3BD4:  ADDLW  E9
3BD6:  MOVWF  FF6
3BD8:  MOVLW  3B
3BDA:  ADDWFC FF7,F
3BDC:  TBLRD*-
3BDE:  MOVF   FF5,W
3BE0:  MOVWF  FFA
3BE2:  TBLRD*
3BE4:  MOVF   FF5,W
3BE6:  MOVWF  FF9
3BE8:  DATA EC,3A
3BEA:  DATA F6,3A
3BEC:  DATA 00,3B
3BEE:  DATA 0A,3B
3BF0:  DATA 14,3B
3BF2:  DATA 1E,3B
3BF4:  DATA 28,3B
3BF6:  DATA 32,3B
3BF8:  DATA 3C,3B
3BFA:  DATA 46,3B
3BFC:  DATA 86,3B
3BFE:  DATA 86,3B
3C00:  DATA 86,3B
3C02:  DATA 86,3B
3C04:  DATA 86,3B
3C06:  DATA 86,3B
3C08:  DATA 86,3B
3C0A:  DATA 4C,3B
3C0C:  DATA 56,3B
3C0E:  DATA 5C,3B
3C10:  DATA 62,3B
3C12:  DATA 68,3B
3C14:  DATA 6C,3B
3C16:  DATA 86,3B
3C18:  DATA 86,3B
3C1A:  DATA 86,3B
3C1C:  DATA 86,3B
3C1E:  DATA 86,3B
3C20:  DATA 86,3B
3C22:  DATA 86,3B
3C24:  DATA 86,3B
3C26:  DATA 86,3B
3C28:  DATA 86,3B
3C2A:  DATA 86,3B
3C2C:  DATA 86,3B
3C2E:  DATA 86,3B
3C30:  DATA 86,3B
3C32:  DATA 86,3B
3C34:  DATA 86,3B
3C36:  DATA 86,3B
3C38:  DATA 86,3B
3C3A:  DATA 86,3B
3C3C:  DATA 86,3B
3C3E:  DATA 86,3B
3C40:  DATA 86,3B
3C42:  DATA 86,3B
3C44:  DATA 86,3B
3C46:  DATA 86,3B
3C48:  DATA 86,3B
3C4A:  DATA 70,3B
3C4C:  DATA 74,3B
3C4E:  DATA 86,3B
3C50:  DATA 78,3B
3C52:  DATA 7C,3B
3C54:  DATA 80,3B
3C56:  DATA 86,3B
3C58:  DATA 84,3B
*
4540:  ADDWF  FE8,W
4542:  CLRF   FF7
4544:  RLCF   FF7,F
4546:  ADDLW  5B
4548:  MOVWF  FF6
454A:  MOVLW  45
454C:  ADDWFC FF7,F
454E:  TBLRD*-
4550:  MOVF   FF5,W
4552:  MOVWF  FFA
4554:  TBLRD*
4556:  MOVF   FF5,W
4558:  MOVWF  FF9
455A:  DATA 76,3C
455C:  DATA 1C,3D
455E:  DATA C0,3D
4560:  DATA 48,3E
4562:  DATA D0,3E
4564:  DATA 58,3F
4566:  DATA A4,43
4568:  DATA E4,3F
456A:  DATA 84,40
456C:  DATA 24,41
456E:  DATA C4,41
4570:  DATA 64,42
4572:  DATA 04,43
4574:  DATA 2E,44
4576:  DATA BA,44
*
52D4:  ADDWF  FE8,W
52D6:  CLRF   FF7
52D8:  RLCF   FF7,F
52DA:  ADDLW  EF
52DC:  MOVWF  FF6
52DE:  MOVLW  52
52E0:  ADDWFC FF7,F
52E2:  TBLRD*-
52E4:  MOVF   FF5,W
52E6:  MOVWF  FFA
52E8:  TBLRD*
52EA:  MOVF   FF5,W
52EC:  MOVWF  FF9
52EE:  DATA EC,4E
52F0:  DATA 8A,4E
52F2:  DATA 98,4E
52F4:  DATA A6,4E
52F6:  DATA B4,4E
52F8:  DATA C2,4E
52FA:  DATA D0,4E
52FC:  DATA DE,4E
52FE:  ADDWF  FE8,W
5300:  CLRF   FF7
5302:  RLCF   FF7,F
5304:  ADDLW  19
5306:  MOVWF  FF6
5308:  MOVLW  53
530A:  ADDWFC FF7,F
530C:  TBLRD*-
530E:  MOVF   FF5,W
5310:  MOVWF  FFA
5312:  TBLRD*
5314:  MOVF   FF5,W
5316:  MOVWF  FF9
5318:  DATA 24,52
531A:  DATA 2A,52
531C:  DATA 30,52
531E:  DATA 36,52
5320:  DATA 3C,52
5322:  DATA 42,52
5324:  DATA 48,52
5326:  DATA 4E,52
5328:  DATA 54,52
532A:  DATA 5A,52
532C:  DATA 60,52
532E:  ADDWF  FE8,W
5330:  CLRF   FF7
5332:  RLCF   FF7,F
5334:  ADDLW  49
5336:  MOVWF  FF6
5338:  MOVLW  53
533A:  ADDWFC FF7,F
533C:  TBLRD*-
533E:  MOVF   FF5,W
5340:  MOVWF  FFA
5342:  TBLRD*
5344:  MOVF   FF5,W
5346:  MOVWF  FF9
5348:  DATA E4,51
534A:  DATA 6C,4C
534C:  DATA 66,52
534E:  DATA 66,52
5350:  DATA 66,52
5352:  DATA DA,4D
5354:  DATA 12,4E
5356:  DATA 42,4E
5358:  DATA 70,4E
535A:  DATA 70,4E
535C:  DATA 08,4F
535E:  DATA 66,52
5360:  DATA 66,52
5362:  DATA 66,52
5364:  DATA 66,52
5366:  DATA 66,52
5368:  DATA E8,4C
536A:  DATA E8,4C
536C:  DATA 66,52
536E:  DATA 36,4F
5370:  DATA 78,51
5372:  DATA 8C,51
5374:  DATA A0,51
5376:  DATA 66,52
5378:  DATA 70,4E
537A:  DATA 18,50
537C:  DATA 8E,50
537E:  DATA 04,51
5380:  DATA B6,51
5382:  ADDWF  FE8,W
5384:  CLRF   FF7
5386:  RLCF   FF7,F
5388:  ADDLW  9D
538A:  MOVWF  FF6
538C:  MOVLW  53
538E:  ADDWFC FF7,F
5390:  TBLRD*-
5392:  MOVF   FF5,W
5394:  MOVWF  FFA
5396:  TBLRD*
5398:  MOVF   FF5,W
539A:  MOVWF  FF9
539C:  DATA AA,52
539E:  DATA 80,52
53A0:  DATA 86,52
53A2:  DATA 8C,52
53A4:  DATA D0,52
53A6:  DATA 92,52
53A8:  DATA 96,52
53AA:  DATA 9A,52
53AC:  DATA B8,52
53AE:  DATA C8,52
53B0:  DATA D0,52
53B2:  DATA D0,52
53B4:  DATA D0,52
53B6:  DATA D0,52
53B8:  DATA D0,52
53BA:  DATA D0,52
53BC:  DATA D0,52
53BE:  DATA D0,52
53C0:  DATA D0,52
53C2:  DATA CC,52
53C4:  DATA CC,52
53C6:  DATA CC,52
*
53E6:  TBLRD*+
53E8:  MOVF   FF5,F
53EA:  BZ    5406
53EC:  MOVFF  FF6,DC
53F0:  MOVFF  FF7,DD
53F4:  MOVF   FF5,W
53F6:  BTFSS  F9E.4
53F8:  BRA    53F6
53FA:  MOVWF  FAD
53FC:  MOVFF  DC,FF6
5400:  MOVFF  DD,FF7
5404:  BRA    53E6
5406:  RETURN 0
5408:  TBLRD*+
540A:  MOVF   FF5,F
540C:  BZ    5428
540E:  MOVFF  FF6,DC
5412:  MOVFF  FF7,DD
5416:  MOVF   FF5,W
5418:  BTFSS  F9E.4
541A:  BRA    5418
541C:  MOVWF  FAD
541E:  MOVFF  DC,FF6
5422:  MOVFF  DD,FF7
5426:  BRA    5408
5428:  RETURN 0
542A:  MOVLW  20
542C:  BTFSS  xE0.4
542E:  MOVLW  30
5430:  MOVWF  xE1
5432:  MOVFF  DF,00
5436:  BTFSS  xDF.7
5438:  BRA    544A
543A:  COMF   00,F
543C:  INCF   00,F
543E:  MOVFF  00,DF
5442:  MOVLW  2D
5444:  MOVWF  xE1
5446:  BSF    xE0.7
5448:  BSF    xE0.0
544A:  MOVF   01,W
544C:  MOVFF  DF,E5
5450:  MOVLW  64
5452:  MOVWF  xE6
5454:  CALL   36FE
5458:  MOVFF  00,DF
545C:  MOVLW  30
545E:  ADDWF  01,W
5460:  MOVWF  xE2
5462:  MOVFF  DF,E5
5466:  MOVLW  0A
5468:  MOVWF  xE6
546A:  CALL   36FE
546E:  MOVLW  30
5470:  ADDWF  00,W
5472:  MOVWF  xE4
5474:  MOVLW  30
5476:  ADDWF  01,W
5478:  MOVWF  xE3
547A:  MOVFF  E1,00
547E:  MOVLW  30
5480:  SUBWF  xE2,W
5482:  BZ    548C
5484:  BSF    xE0.1
5486:  BTFSC  xE0.7
5488:  BSF    xE0.2
548A:  BRA    54B0
548C:  MOVFF  E1,E2
5490:  MOVLW  20
5492:  MOVWF  xE1
5494:  MOVLW  30
5496:  SUBWF  xE3,W
5498:  BZ    54A2
549A:  BSF    xE0.0
549C:  BTFSC  xE0.7
549E:  BSF    xE0.1
54A0:  BRA    54B0
54A2:  BTFSS  FD8.2
54A4:  BSF    xE0.0
54A6:  BNZ   54B0
54A8:  MOVFF  E2,E3
54AC:  MOVLW  20
54AE:  MOVWF  xE2
54B0:  BTFSC  xE0.2
54B2:  BRA    54BE
54B4:  BTFSC  xE0.1
54B6:  BRA    54C6
54B8:  BTFSC  xE0.0
54BA:  BRA    54CE
54BC:  BRA    54D6
54BE:  MOVF   xE1,W
54C0:  BTFSS  F9E.4
54C2:  BRA    54C0
54C4:  MOVWF  FAD
54C6:  MOVF   xE2,W
54C8:  BTFSS  F9E.4
54CA:  BRA    54C8
54CC:  MOVWF  FAD
54CE:  MOVF   xE3,W
54D0:  BTFSS  F9E.4
54D2:  BRA    54D0
54D4:  MOVWF  FAD
54D6:  MOVF   xE4,W
54D8:  BTFSS  F9E.4
54DA:  BRA    54D8
54DC:  MOVWF  FAD
54DE:  RETURN 0
54E0:  TBLRD*+
54E2:  MOVFF  FF6,E0
54E6:  MOVFF  FF7,E1
54EA:  MOVF   FF5,W
54EC:  BTFSS  F9E.4
54EE:  BRA    54EC
54F0:  MOVWF  FAD
54F2:  MOVFF  E0,FF6
54F6:  MOVFF  E1,FF7
54FA:  DECFSZ xDF,F
54FC:  BRA    54E0
54FE:  RETURN 0
5500:  MOVF   xE9,W
5502:  SUBLW  B6
5504:  MOVWF  xE9
5506:  CLRF   03
5508:  MOVFF  EA,ED
550C:  BSF    xEA.7
550E:  BCF    FD8.0
5510:  RRCF   xEA,F
5512:  RRCF   xEB,F
5514:  RRCF   xEC,F
5516:  RRCF   03,F
5518:  RRCF   02,F
551A:  RRCF   01,F
551C:  RRCF   00,F
551E:  DECFSZ xE9,F
5520:  BRA    550E
5522:  BTFSS  xED.7
5524:  BRA    553C
5526:  COMF   00,F
5528:  COMF   01,F
552A:  COMF   02,F
552C:  COMF   03,F
552E:  INCF   00,F
5530:  BTFSC  FD8.2
5532:  INCF   01,F
5534:  BTFSC  FD8.2
5536:  INCF   02,F
5538:  BTFSC  FD8.2
553A:  INCF   03,F
553C:  GOTO   562E (RETURN)
5540:  BTFSC  FD8.1
5542:  BRA    554A
5544:  CLRF   FEA
5546:  MOVLW  F1
5548:  MOVWF  FE9
554A:  CLRF   00
554C:  CLRF   01
554E:  CLRF   02
5550:  CLRF   03
5552:  CLRF   xF1
5554:  CLRF   xF2
5556:  CLRF   xF3
5558:  CLRF   xF4
555A:  MOVF   xF0,W
555C:  IORWF  xEF,W
555E:  IORWF  xEE,W
5560:  IORWF  xED,W
5562:  BZ    55BC
5564:  MOVLW  20
5566:  MOVWF  xF5
5568:  BCF    FD8.0
556A:  RLCF   xE9,F
556C:  RLCF   xEA,F
556E:  RLCF   xEB,F
5570:  RLCF   xEC,F
5572:  RLCF   xF1,F
5574:  RLCF   xF2,F
5576:  RLCF   xF3,F
5578:  RLCF   xF4,F
557A:  MOVF   xF0,W
557C:  SUBWF  xF4,W
557E:  BNZ   5590
5580:  MOVF   xEF,W
5582:  SUBWF  xF3,W
5584:  BNZ   5590
5586:  MOVF   xEE,W
5588:  SUBWF  xF2,W
558A:  BNZ   5590
558C:  MOVF   xED,W
558E:  SUBWF  xF1,W
5590:  BNC   55B0
5592:  MOVF   xED,W
5594:  SUBWF  xF1,F
5596:  MOVF   xEE,W
5598:  BTFSS  FD8.0
559A:  INCFSZ xEE,W
559C:  SUBWF  xF2,F
559E:  MOVF   xEF,W
55A0:  BTFSS  FD8.0
55A2:  INCFSZ xEF,W
55A4:  SUBWF  xF3,F
55A6:  MOVF   xF0,W
55A8:  BTFSS  FD8.0
55AA:  INCFSZ xF0,W
55AC:  SUBWF  xF4,F
55AE:  BSF    FD8.0
55B0:  RLCF   00,F
55B2:  RLCF   01,F
55B4:  RLCF   02,F
55B6:  RLCF   03,F
55B8:  DECFSZ xF5,F
55BA:  BRA    5568
55BC:  MOVFF  F1,FEF
55C0:  MOVFF  F2,FEC
55C4:  MOVFF  F3,FEC
55C8:  MOVFF  F4,FEC
55CC:  RETURN 0
55CE:  MOVF   FE9,W
55D0:  MOVWF  xE1
55D2:  MOVF   xE0,W
55D4:  MOVWF  xE3
55D6:  BZ    561C
55D8:  CLRF   19
55DA:  BTFSC  FF2.7
55DC:  BSF    19.7
55DE:  BCF    FF2.7
55E0:  MOVFF  DF,109
55E4:  MOVFF  DE,108
55E8:  MOVFF  DD,107
55EC:  MOVFF  DC,106
55F0:  MOVLB  1
55F2:  CLRF   x0D
55F4:  CLRF   x0C
55F6:  MOVLW  20
55F8:  MOVWF  x0B
55FA:  MOVLW  82
55FC:  MOVWF  x0A
55FE:  MOVLB  0
5600:  CALL   0412
5604:  BTFSC  19.7
5606:  BSF    FF2.7
5608:  MOVFF  03,DF
560C:  MOVFF  02,DE
5610:  MOVFF  01,DD
5614:  MOVFF  00,DC
5618:  DECFSZ xE3,F
561A:  BRA    55D8
561C:  MOVFF  DF,EC
5620:  MOVFF  DE,EB
5624:  MOVFF  DD,EA
5628:  MOVFF  DC,E9
562C:  BRA    5500
562E:  MOVFF  03,DF
5632:  MOVFF  02,DE
5636:  MOVFF  01,DD
563A:  MOVFF  00,DC
563E:  BTFSS  xDF.7
5640:  BRA    565C
5642:  DECF   xE1,F
5644:  BSF    xE1.5
5646:  COMF   xDC,F
5648:  COMF   xDD,F
564A:  COMF   xDE,F
564C:  COMF   xDF,F
564E:  INCF   xDC,F
5650:  BTFSC  FD8.2
5652:  INCF   xDD,F
5654:  BTFSC  FD8.2
5656:  INCF   xDE,F
5658:  BTFSC  FD8.2
565A:  INCF   xDF,F
565C:  MOVLW  3B
565E:  MOVWF  xE8
5660:  MOVLW  9A
5662:  MOVWF  xE7
5664:  MOVLW  CA
5666:  MOVWF  xE6
5668:  CLRF   xE5
566A:  MOVLW  0A
566C:  MOVWF  xE3
566E:  MOVF   xE0,W
5670:  BTFSC  FD8.2
5672:  INCF   xE1,F
5674:  BSF    FD8.1
5676:  CLRF   FEA
5678:  MOVLW  DC
567A:  MOVWF  FE9
567C:  MOVFF  DF,EC
5680:  MOVFF  DE,EB
5684:  MOVFF  DD,EA
5688:  MOVFF  DC,E9
568C:  MOVFF  E8,F0
5690:  MOVFF  E7,EF
5694:  MOVFF  E6,EE
5698:  MOVFF  E5,ED
569C:  RCALL  5540
569E:  MOVF   01,W
56A0:  MOVF   00,F
56A2:  BNZ   56C2
56A4:  INCF   xE0,W
56A6:  SUBWF  xE3,W
56A8:  BZ    56C2
56AA:  MOVF   xE1,W
56AC:  BZ    56C6
56AE:  ANDLW  0F
56B0:  SUBWF  xE3,W
56B2:  BZ    56B6
56B4:  BC    572C
56B6:  BTFSC  xE1.7
56B8:  BRA    572C
56BA:  BTFSC  xE1.6
56BC:  BRA    56C6
56BE:  MOVLW  20
56C0:  BRA    5722
56C2:  MOVLW  20
56C4:  ANDWF  xE1,F
56C6:  BTFSS  xE1.5
56C8:  BRA    56E4
56CA:  BCF    xE1.5
56CC:  MOVF   xE0,W
56CE:  BTFSS  FD8.2
56D0:  DECF   xE1,F
56D2:  MOVF   00,W
56D4:  MOVWF  xE1
56D6:  MOVLW  2D
56D8:  BTFSS  F9E.4
56DA:  BRA    56D8
56DC:  MOVWF  FAD
56DE:  MOVF   xE1,W
56E0:  MOVWF  00
56E2:  CLRF   xE1
56E4:  MOVF   xE0,W
56E6:  SUBWF  xE3,W
56E8:  BNZ   5700
56EA:  MOVF   00,W
56EC:  MOVWF  xE1
56EE:  MOVLW  2E
56F0:  BTFSS  F9E.4
56F2:  BRA    56F0
56F4:  MOVWF  FAD
56F6:  MOVF   xE1,W
56F8:  MOVWF  00
56FA:  MOVLW  20
56FC:  ANDWF  xE1,F
56FE:  MOVLW  00
5700:  MOVLW  30
5702:  BTFSS  xE1.5
5704:  BRA    5722
5706:  BCF    xE1.5
5708:  MOVF   xE0,W
570A:  BTFSS  FD8.2
570C:  DECF   xE1,F
570E:  MOVF   00,W
5710:  MOVWF  xE1
5712:  MOVLW  2D
5714:  BTFSS  F9E.4
5716:  BRA    5714
5718:  MOVWF  FAD
571A:  MOVF   xE1,W
571C:  MOVWF  00
571E:  CLRF   xE1
5720:  MOVLW  30
5722:  ADDWF  00,F
5724:  MOVF   00,W
5726:  BTFSS  F9E.4
5728:  BRA    5726
572A:  MOVWF  FAD
572C:  BCF    FD8.1
572E:  MOVFF  E8,EC
5732:  MOVFF  E7,EB
5736:  MOVFF  E6,EA
573A:  MOVFF  E5,E9
573E:  CLRF   xF0
5740:  CLRF   xEF
5742:  CLRF   xEE
5744:  MOVLW  0A
5746:  MOVWF  xED
5748:  RCALL  5540
574A:  MOVFF  03,E8
574E:  MOVFF  02,E7
5752:  MOVFF  01,E6
5756:  MOVFF  00,E5
575A:  DECFSZ xE3,F
575C:  BRA    5674
575E:  RETURN 0
*
5C4E:  ADDWF  FE8,W
5C50:  CLRF   FF7
5C52:  RLCF   FF7,F
5C54:  ADDLW  69
5C56:  MOVWF  FF6
5C58:  MOVLW  5C
5C5A:  ADDWFC FF7,F
5C5C:  TBLRD*-
5C5E:  MOVF   FF5,W
5C60:  MOVWF  FFA
5C62:  TBLRD*
5C64:  MOVF   FF5,W
5C66:  MOVWF  FF9
5C68:  DATA 38,58
5C6A:  DATA 3E,58
5C6C:  DATA 44,58
5C6E:  DATA 4A,58
5C70:  DATA 50,58
5C72:  DATA 56,58
5C74:  DATA 5C,58
5C76:  DATA 62,58
5C78:  DATA 68,58
5C7A:  DATA 6E,58
5C7C:  BTFSC  FD8.1
5C7E:  BRA    5C86
5C80:  CLRF   FEA
5C82:  MOVLW  E4
5C84:  MOVWF  FE9
5C86:  MOVF   xDF,W
5C88:  XORWF  xE3,W
5C8A:  ANDLW  80
5C8C:  MOVWF  xE9
5C8E:  BTFSS  xDF.7
5C90:  BRA    5CA8
5C92:  COMF   xDC,F
5C94:  COMF   xDD,F
5C96:  COMF   xDE,F
5C98:  COMF   xDF,F
5C9A:  INCF   xDC,F
5C9C:  BTFSC  FD8.2
5C9E:  INCF   xDD,F
5CA0:  BTFSC  FD8.2
5CA2:  INCF   xDE,F
5CA4:  BTFSC  FD8.2
5CA6:  INCF   xDF,F
5CA8:  BTFSS  xE3.7
5CAA:  BRA    5CC2
5CAC:  COMF   xE0,F
5CAE:  COMF   xE1,F
5CB0:  COMF   xE2,F
5CB2:  COMF   xE3,F
5CB4:  INCF   xE0,F
5CB6:  BTFSC  FD8.2
5CB8:  INCF   xE1,F
5CBA:  BTFSC  FD8.2
5CBC:  INCF   xE2,F
5CBE:  BTFSC  FD8.2
5CC0:  INCF   xE3,F
5CC2:  CLRF   00
5CC4:  CLRF   01
5CC6:  CLRF   02
5CC8:  CLRF   03
5CCA:  CLRF   xE4
5CCC:  CLRF   xE5
5CCE:  CLRF   xE6
5CD0:  CLRF   xE7
5CD2:  MOVF   xE3,W
5CD4:  IORWF  xE2,W
5CD6:  IORWF  xE1,W
5CD8:  IORWF  xE0,W
5CDA:  BZ    5D34
5CDC:  MOVLW  20
5CDE:  MOVWF  xE8
5CE0:  BCF    FD8.0
5CE2:  RLCF   xDC,F
5CE4:  RLCF   xDD,F
5CE6:  RLCF   xDE,F
5CE8:  RLCF   xDF,F
5CEA:  RLCF   xE4,F
5CEC:  RLCF   xE5,F
5CEE:  RLCF   xE6,F
5CF0:  RLCF   xE7,F
5CF2:  MOVF   xE3,W
5CF4:  SUBWF  xE7,W
5CF6:  BNZ   5D08
5CF8:  MOVF   xE2,W
5CFA:  SUBWF  xE6,W
5CFC:  BNZ   5D08
5CFE:  MOVF   xE1,W
5D00:  SUBWF  xE5,W
5D02:  BNZ   5D08
5D04:  MOVF   xE0,W
5D06:  SUBWF  xE4,W
5D08:  BNC   5D28
5D0A:  MOVF   xE0,W
5D0C:  SUBWF  xE4,F
5D0E:  MOVF   xE1,W
5D10:  BTFSS  FD8.0
5D12:  INCFSZ xE1,W
5D14:  SUBWF  xE5,F
5D16:  MOVF   xE2,W
5D18:  BTFSS  FD8.0
5D1A:  INCFSZ xE2,W
5D1C:  SUBWF  xE6,F
5D1E:  MOVF   xE3,W
5D20:  BTFSS  FD8.0
5D22:  INCFSZ xE3,W
5D24:  SUBWF  xE7,F
5D26:  BSF    FD8.0
5D28:  RLCF   00,F
5D2A:  RLCF   01,F
5D2C:  RLCF   02,F
5D2E:  RLCF   03,F
5D30:  DECFSZ xE8,F
5D32:  BRA    5CE0
5D34:  BTFSS  xE9.7
5D36:  BRA    5D4E
5D38:  COMF   00,F
5D3A:  COMF   01,F
5D3C:  COMF   02,F
5D3E:  COMF   03,F
5D40:  INCF   00,F
5D42:  BTFSC  FD8.2
5D44:  INCF   01,F
5D46:  BTFSC  FD8.2
5D48:  INCF   02,F
5D4A:  BTFSC  FD8.2
5D4C:  INCF   03,F
5D4E:  MOVFF  E4,FEF
5D52:  MOVFF  E5,FEC
5D56:  MOVFF  E6,FEC
5D5A:  MOVFF  E7,FEC
5D5E:  RETURN 0
*
5DE4:  MOVLW  8E
5DE6:  MOVWF  00
5DE8:  MOVFF  E1,01
5DEC:  MOVFF  E0,02
5DF0:  CLRF   03
5DF2:  BTFSS  xE1.7
5DF4:  BRA    5E00
5DF6:  COMF   01,F
5DF8:  COMF   02,F
5DFA:  INCF   02,F
5DFC:  BNZ   5E00
5DFE:  INCF   01,F
5E00:  MOVF   01,F
5E02:  BNZ   5E16
5E04:  MOVFF  02,01
5E08:  CLRF   02
5E0A:  MOVLW  08
5E0C:  SUBWF  00,F
5E0E:  MOVF   01,F
5E10:  BNZ   5E16
5E12:  CLRF   00
5E14:  BRA    5E2A
5E16:  BCF    FD8.0
5E18:  BTFSC  01.7
5E1A:  BRA    5E24
5E1C:  RLCF   02,F
5E1E:  RLCF   01,F
5E20:  DECF   00,F
5E22:  BRA    5E16
5E24:  BTFSC  xE1.7
5E26:  BRA    5E2A
5E28:  BCF    01.7
5E2A:  GOTO   6074 (RETURN)
*
676E:  ADDWF  FE8,W
6770:  CLRF   FF7
6772:  RLCF   FF7,F
6774:  ADDLW  89
6776:  MOVWF  FF6
6778:  MOVLW  67
677A:  ADDWFC FF7,F
677C:  TBLRD*-
677E:  MOVF   FF5,W
6780:  MOVWF  FFA
6782:  TBLRD*
6784:  MOVF   FF5,W
6786:  MOVWF  FF9
6788:  DATA B2,66
678A:  DATA F2,66
678C:  DATA 38,67
678E:  DATA 48,67
....................  
.................... #list 
....................  
.................... #device adc=12 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... //#FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... //#FUSES BORV21                   //Brownout reset at 2.1V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=32000000) 
*
0E0A:  CLRF   FEA
0E0C:  MOVLW  DC
0E0E:  MOVWF  FE9
0E10:  MOVF   FEF,W
0E12:  BZ    0E2E
0E14:  MOVLW  0A
0E16:  MOVWF  01
0E18:  CLRF   00
0E1A:  DECFSZ 00,F
0E1C:  BRA    0E1A
0E1E:  DECFSZ 01,F
0E20:  BRA    0E18
0E22:  MOVLW  5F
0E24:  MOVWF  00
0E26:  DECFSZ 00,F
0E28:  BRA    0E26
0E2A:  DECFSZ FEF,F
0E2C:  BRA    0E14
0E2E:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
....................  
....................  
.................... #use fast_io(ALL) 
....................  
.................... #include "leds.h" 
.................... #ifndef _LEDS_H_ 
.................... #define _LEDS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... #include "globals.h" 
.................... #ifndef _GLOBALS_H_ 
.................... #define _GLOBALS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... typedef union _ADC_DATA_TYPE 
.................... { 
....................    signed int32 whole; 
....................    unsigned char bytes[4]; 
.................... }ADC_DATA_TYPE; 
....................  
.................... typedef enum { 
....................    SIGN_SENSOR_BROKEN, 
....................    SIGN_TEMP_OVERLOAD, 
....................    SIGN_SET_PID_KP, 
....................    SIGN_SET_PID_KI, 
....................    SIGN_SET_PID_KD, 
....................    SIGN_PROCESS_END, 
....................    SIGN_CN, 
....................    SIGN_T2, 
....................    SIGN_T3, 
....................    SIGN_T4, 
....................    SIGN_T5, 
....................    SIGN_T6, 
....................    SIGN_T7, 
....................    SIGN_ALL, 
....................    SIGN_BLANK, 
.................... } SIGN_CODE; 
....................  
.................... typedef enum { 
....................    STATE_KEY_IDLE, 
....................    STATE_KEY_PRESSED, 
....................    STATE_KEY_HOLD, 
.................... } KEY_STATE_; 
....................  
.................... typedef enum _STATE { 
....................    ST_INVALID, 
....................    ST_IDLE, 
....................    ST_SET_PROGRAM, 
....................    ST_SET_DAY_OF_WEEK, 
....................    ST_SET_HOUR, 
....................    ST_SET_MINUTE, 
....................    ST_SET_TIME_STER_DRY, 
....................    ST_SET_SETPOINT, 
....................    ST_SET_PROTECT, 
....................    ST_SET_TIME_DELAY, 
....................    ST_SET_WAIT_TIME, 
....................    ST_SET_HOLD_TIME, 
....................    ST_DIS_TIME_DAY_HOUR, 
....................    ST_DIS_TIME_HOUR_MIN, 
....................    ST_SET_TIME_DAY_HOUR, 
....................    ST_SET_TIME_HOUR_MIN, 
....................    ST_SET_TIMER, 
....................    ST_SET_PASS, 
....................    ST_SAVE_PASS, 
....................    ST_CHECK_PASS, 
....................    ST_SET_SERI, 
....................    ST_SET_PID_KP, 
....................    ST_SET_PID_KI, 
....................    ST_SET_PID_KD, 
....................    ST_SET_OFFSET, 
....................    ST_RUN_WAITING_TIME, 
....................    ST_RUN_HEATING_TIME, 
....................    ST_RUN_HOLDING_TIME, 
....................    ST_RUN_COOLING_TIME, 
....................    ST_COMPLETED, 
....................    ST_ERR, 
....................    TOTAL_NUMBER_OF_STATE, 
.................... } STATE; 
....................  
.................... typedef enum _SET { 
....................    SET_NONE, 
....................    SET_PROGRAM_USER, 
....................    SET_TIME_REAL_TIME_CLOCK, 
....................    SET_TIME_CLOCK, 
....................    SET_DONE, 
.................... } SET; 
....................  
.................... typedef enum _SET_TIME { 
....................    SET_TIME_DAY_HOUR, 
....................    SET_TIME_HOUR_MIN, 
....................    SET_TIME_DONE, 
....................  
.................... } SET_TIME; 
....................  
.................... typedef enum _WEEKDAY { 
....................    NULLDAY, 
....................    SUNDAY, 
....................    MONDAY, 
....................    TUESDAY, 
....................    WEDNESDAY, 
....................    THURSDAY, 
....................    FRIDAY, 
....................    SATURDAY, 
....................    NONEDAY, 
.................... } WEEKDAY; 
....................  
.................... typedef enum _PROCESS_PHASE { 
....................    WAITING_PHASE, 
....................    HEAT_RISING_PHASE, 
....................    HEAT_HOLDING_PHASE, 
....................    HEAT_FALLING_PHASE, 
....................    IDLE_PHASE, 
.................... } PROCESS_PHASE; 
....................  
.................... typedef enum _OVEN_MODE { 
....................    NONE, 
....................    PROGRAM1, 
....................    PROGRAM2, 
....................    PROGRAM3, 
....................    PROGRAM4, 
....................    PROGRAM5, 
....................    PROGRAM6, 
....................    PROGRAM7, 
....................    PROGRAM8, 
....................    PROGRAM9, 
....................    PROGRAM10, 
....................    USER_MODE, 
.................... } OVEN_MODE; 
....................  
.................... typedef enum _FLAG_MODE { 
....................    MODE_STAND, 
....................    MODE_SET_1, 
....................    MODE_SET_2, 
....................    MODE_SET_3, 
....................    MODE_SET_4, 
....................    MODE_SET_5, 
....................    MODE_SET_6, 
....................    MODE_SET_7, 
....................    MODE_SET_8, 
....................    MODE_SET_9, 
....................    MODE_SET_10, 
.................... } FLAG_MODE; 
....................  
.................... #define TRIAC_CYCLE 555.0 
.................... #define TEMP_COEFF 0.652085      // 
.................... unsigned char led7[6][4]; 
.................... unsigned char led1[5]; 
.................... unsigned char temp_accum_count = 16; 
.................... STATE g_state; 
.................... STATE old_state; 
.................... OVEN_MODE g_mode = PROGRAM1; 
.................... SET g_set = SET_NONE; 
.................... //SET_TIME g_set_time; 
.................... //FLAG_MODE g_active_mode = MODE_STAND; 
....................  
.................... unsigned int16 timed_count_ms = 187;   //toggle every 1000 ms; 
.................... unsigned char pid_countdown = 0; 
.................... unsigned int16 spk_on_count; 
.................... int16    tmp_int16; 
.................... int8     key_state; 
.................... int8     key_flag = 0; 
.................... unsigned char key_code = 0; 
.................... unsigned char tmp = 0; 
.................... unsigned int8 touch_state1, touch_state2; 
.................... int16 key_hold_count, key_repeat_count; 
.................... #define KEY_HOLD_THRESHOLD (400) 
.................... #define KEY_REPEAT_TIME (10) 
....................  
.................... unsigned char sec, min, hour, day; 
.................... unsigned char last_min; 
....................  
.................... int16 user_setpoint = 15000; 
.................... int16 user_protect = 16000; 
.................... int16 user_delay_time = 15; 
.................... int16 user_ster_time = 90; 
.................... int16 i = 0; 
....................        
.................... unsigned char wait_hour, wait_min, wait_day; 
.................... unsigned char hold_hour, hold_min; 
....................  
.................... unsigned int16 password = 0, check_password = 0; 
.................... //unsigned int16 remain_time;      //unit is in minute! 
.................... unsigned int16 setpoint; 
.................... unsigned int16 protect; 
.................... unsigned int16 realTemp; 
.................... unsigned int16 t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0; 
.................... unsigned int16 t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0; 
.................... unsigned int16 delay_time; 
.................... unsigned int16 ster_time; 
.................... //unsigned int16 day_ster_time; 
.................... //unsigned int16 hour_ster_time; 
.................... //unsigned int16 user_day_ster_time; 
.................... //unsigned int16 user_hour_ster_time; 
.................... //unsigned int16 day_remain_time, hour_remain_time; 
.................... unsigned int16 pid_kp, pid_ki, pid_kd; 
.................... //unsigned int16 RTD_realTemp2; 
.................... //unsigned long long_ster_time, long_user_ster_time; 
.................... unsigned long remain_time; 
.................... //unsigned long user_hold_time; 
.................... //float TEMP_LOWER_FULLON_CORRECTION = 3000.0; 
....................  
.................... #define SETPOINT_MAX (25000) 
.................... #define SETPOINT_DEF (15000) 
.................... #define SETPOINT_MIN (1000) 
.................... #define PROTECT_MAX (31000) 
.................... #define PROTECT_DEF (31000) 
.................... #define PROTECT_MIN (1000) 
.................... #define FAN_SPEED_MAX (10) 
.................... #define FAN_SPEED_DEF (7) 
.................... #define FAN_SPEED_MIN (5) 
.................... #define DELAY_TIME_MAX (5999) 
.................... #define DELAY_TIME_DEF (0) 
.................... #define DELAY_TIME_MIN (0) 
.................... #define STER_TIME_MAX (5999) 
.................... #define STER_TIME_DEF (60) 
.................... #define STER_TIME_MIN (0) 
....................  
.................... #define PID_KP_MAX (100) 
.................... #define PID_KP_DEF (60) 
.................... #define PID_KP_MIN (0) 
.................... #define PID_KI_MAX (100) 
.................... #define PID_KI_DEF (55) 
.................... #define PID_KI_MIN (0) 
.................... #define PID_KD_MAX (100) 
.................... #define PID_KD_DEF (28) 
.................... #define PID_KD_MIN (0) 
....................  
.................... #define PID_KP_MAX1 (100) 
.................... #define PID_KP_DEF1 (65) 
.................... #define PID_KP_MIN1 (0) 
.................... #define PID_KI_MAX1 (100) 
.................... #define PID_KI_DEF1 (65) 
.................... #define PID_KI_MIN1 (0) 
.................... #define PID_KD_MAX1 (100) 
.................... #define PID_KD_DEF1 (38) 
.................... #define PID_KD_MIN1 (0) 
....................  
.................... #define PROG1_SETPOINT (12000) 
.................... #define PROG1_PROTECT (13000) 
.................... #define PROG1_DELAY_TIME (0) 
.................... #define PROG1_STER_TIME (90) 
.................... #define PROG2_SETPOINT (13000) 
.................... #define PROG2_PROTECT (14000) 
.................... #define PROG2_DELAY_TIME (0) 
.................... #define PROG2_STER_TIME (85) 
.................... #define PROG3_SETPOINT (14000) 
.................... #define PROG3_PROTECT (15000) 
.................... #define PROG3_DELAY_TIME (0) 
.................... #define PROG3_STER_TIME (80) 
.................... #define PROG4_SETPOINT (15000) 
.................... #define PROG4_PROTECT (16000) 
.................... #define PROG4_DELAY_TIME (0) 
.................... #define PROG4_STER_TIME (70) 
.................... #define PROG5_SETPOINT (16000) 
.................... #define PROG5_PROTECT (17000) 
.................... #define PROG5_DELAY_TIME (0) 
.................... #define PROG5_STER_TIME (60) 
.................... #define PROG6_SETPOINT (17000) 
.................... #define PROG6_PROTECT (18000) 
.................... #define PROG6_DELAY_TIME (0) 
.................... #define PROG6_STER_TIME (50) 
.................... #define PROG7_SETPOINT (18000) 
.................... #define PROG7_PROTECT (19000) 
.................... #define PROG7_DELAY_TIME (0) 
.................... #define PROG7_STER_TIME (45) 
.................... #define PROG8_SETPOINT (19000) 
.................... #define PROG8_PROTECT (20000) 
.................... #define PROG8_DELAY_TIME (0) 
.................... #define PROG8_STER_TIME (40) 
.................... #define PROG9_SETPOINT (20000) 
.................... #define PROG9_PROTECT (21000) 
.................... #define PROG9_DELAY_TIME (0) 
.................... #define PROG9_STER_TIME (35) 
.................... #define PROG10_SETPOINT (22000) 
.................... #define PROG10_PROTECT (23000) 
.................... #define PROG10_DELAY_TIME (0) 
.................... #define PROG10_STER_TIME (30) 
....................  
.................... #define BEEP_TIME (3) 
....................  
.................... #define OFFSET_TEMP_RANGE (3000) 
....................  
.................... #define MAX_TEMP_RANGE (32000) 
.................... //#define ADC_FILTER_COUNT (256) 
.................... #define ADC_FILTER_COUNT (16) 
....................  
.................... #define RTD_CONST (41876) 
....................  
.................... unsigned char  fan_speed = FAN_SPEED_MAX; 
.................... unsigned int16 triac_on_time1 = 0; 
.................... unsigned int16 triac_on_time_new1 = 0; 
.................... unsigned int16 triac_count1 = 0; 
.................... unsigned int16 triac_on_time2 = 0; 
.................... unsigned int16 triac_count2 = 0; 
....................  
.................... unsigned int16 seri = 0; 
.................... unsigned char adc_integ_count = 16; 
.................... signed int32 adc_integ_data; 
.................... signed int16 adc_data, adc_data_buff; 
.................... signed int16 env_temp; 
.................... signed int16 thermo_temp; 
.................... signed int16 temp_offset = 0; 
.................... signed int32 adc_value_ch0; 
.................... signed int32 adc_value_ch1; 
....................  
.................... float k_a, k_b, float_temp; 
....................  
.................... char fan_pos = 0; 
.................... char g_err_code = 0; 
.................... char fan_rol_count = 30; 
.................... char hour_min_flag = 1; 
.................... char flag_day_hour = 0; 
.................... char flag_Rs232 = 0; 
.................... char flag_Rs232_Ster = 0; 
.................... char flag_Rs232_Complete = 0; 
.................... char flag_Rs232_Err = 0; 
.................... char flag_Rs232_IDLE = 0; 
.................... char flag_Pre_Hold = 0; 
....................  
.................... unsigned char GLb_nCountAvrTemp = 0; 
....................  
.................... #endif // #define _GLOBALS_H_ 
....................  
.................... #include "ds1307.h" 
.................... #ifndef _DS1307_H_ 
.................... #define _DS1307_H_ 
....................  
.................... #include "globals.h" 
.................... #ifndef _GLOBALS_H_ 
.................... #define _GLOBALS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... typedef union _ADC_DATA_TYPE 
.................... { 
....................    signed int32 whole; 
....................    unsigned char bytes[4]; 
.................... }ADC_DATA_TYPE; 
....................  
.................... typedef enum { 
....................    SIGN_SENSOR_BROKEN, 
....................    SIGN_TEMP_OVERLOAD, 
....................    SIGN_SET_PID_KP, 
....................    SIGN_SET_PID_KI, 
....................    SIGN_SET_PID_KD, 
....................    SIGN_PROCESS_END, 
....................    SIGN_CN, 
....................    SIGN_T2, 
....................    SIGN_T3, 
....................    SIGN_T4, 
....................    SIGN_T5, 
....................    SIGN_T6, 
....................    SIGN_T7, 
....................    SIGN_ALL, 
....................    SIGN_BLANK, 
.................... } SIGN_CODE; 
....................  
.................... typedef enum { 
....................    STATE_KEY_IDLE, 
....................    STATE_KEY_PRESSED, 
....................    STATE_KEY_HOLD, 
.................... } KEY_STATE_; 
....................  
.................... typedef enum _STATE { 
....................    ST_INVALID, 
....................    ST_IDLE, 
....................    ST_SET_PROGRAM, 
....................    ST_SET_DAY_OF_WEEK, 
....................    ST_SET_HOUR, 
....................    ST_SET_MINUTE, 
....................    ST_SET_TIME_STER_DRY, 
....................    ST_SET_SETPOINT, 
....................    ST_SET_PROTECT, 
....................    ST_SET_TIME_DELAY, 
....................    ST_SET_WAIT_TIME, 
....................    ST_SET_HOLD_TIME, 
....................    ST_DIS_TIME_DAY_HOUR, 
....................    ST_DIS_TIME_HOUR_MIN, 
....................    ST_SET_TIME_DAY_HOUR, 
....................    ST_SET_TIME_HOUR_MIN, 
....................    ST_SET_TIMER, 
....................    ST_SET_PASS, 
....................    ST_SAVE_PASS, 
....................    ST_CHECK_PASS, 
....................    ST_SET_SERI, 
....................    ST_SET_PID_KP, 
....................    ST_SET_PID_KI, 
....................    ST_SET_PID_KD, 
....................    ST_SET_OFFSET, 
....................    ST_RUN_WAITING_TIME, 
....................    ST_RUN_HEATING_TIME, 
....................    ST_RUN_HOLDING_TIME, 
....................    ST_RUN_COOLING_TIME, 
....................    ST_COMPLETED, 
....................    ST_ERR, 
....................    TOTAL_NUMBER_OF_STATE, 
.................... } STATE; 
....................  
.................... typedef enum _SET { 
....................    SET_NONE, 
....................    SET_PROGRAM_USER, 
....................    SET_TIME_REAL_TIME_CLOCK, 
....................    SET_TIME_CLOCK, 
....................    SET_DONE, 
.................... } SET; 
....................  
.................... typedef enum _SET_TIME { 
....................    SET_TIME_DAY_HOUR, 
....................    SET_TIME_HOUR_MIN, 
....................    SET_TIME_DONE, 
....................  
.................... } SET_TIME; 
....................  
.................... typedef enum _WEEKDAY { 
....................    NULLDAY, 
....................    SUNDAY, 
....................    MONDAY, 
....................    TUESDAY, 
....................    WEDNESDAY, 
....................    THURSDAY, 
....................    FRIDAY, 
....................    SATURDAY, 
....................    NONEDAY, 
.................... } WEEKDAY; 
....................  
.................... typedef enum _PROCESS_PHASE { 
....................    WAITING_PHASE, 
....................    HEAT_RISING_PHASE, 
....................    HEAT_HOLDING_PHASE, 
....................    HEAT_FALLING_PHASE, 
....................    IDLE_PHASE, 
.................... } PROCESS_PHASE; 
....................  
.................... typedef enum _OVEN_MODE { 
....................    NONE, 
....................    PROGRAM1, 
....................    PROGRAM2, 
....................    PROGRAM3, 
....................    PROGRAM4, 
....................    PROGRAM5, 
....................    PROGRAM6, 
....................    PROGRAM7, 
....................    PROGRAM8, 
....................    PROGRAM9, 
....................    PROGRAM10, 
....................    USER_MODE, 
.................... } OVEN_MODE; 
....................  
.................... typedef enum _FLAG_MODE { 
....................    MODE_STAND, 
....................    MODE_SET_1, 
....................    MODE_SET_2, 
....................    MODE_SET_3, 
....................    MODE_SET_4, 
....................    MODE_SET_5, 
....................    MODE_SET_6, 
....................    MODE_SET_7, 
....................    MODE_SET_8, 
....................    MODE_SET_9, 
....................    MODE_SET_10, 
.................... } FLAG_MODE; 
....................  
.................... #define TRIAC_CYCLE 555.0 
.................... #define TEMP_COEFF 0.652085      // 
.................... unsigned char led7[6][4]; 
.................... unsigned char led1[5]; 
.................... unsigned char temp_accum_count = 16; 
.................... STATE g_state; 
.................... STATE old_state; 
.................... OVEN_MODE g_mode = PROGRAM1; 
.................... SET g_set = SET_NONE; 
.................... //SET_TIME g_set_time; 
.................... //FLAG_MODE g_active_mode = MODE_STAND; 
....................  
.................... unsigned int16 timed_count_ms = 187;   //toggle every 1000 ms; 
.................... unsigned char pid_countdown = 0; 
.................... unsigned int16 spk_on_count; 
.................... int16    tmp_int16; 
.................... int8     key_state; 
.................... int8     key_flag = 0; 
.................... unsigned char key_code = 0; 
.................... unsigned char tmp = 0; 
.................... unsigned int8 touch_state1, touch_state2; 
.................... int16 key_hold_count, key_repeat_count; 
.................... #define KEY_HOLD_THRESHOLD (400) 
.................... #define KEY_REPEAT_TIME (10) 
....................  
.................... unsigned char sec, min, hour, day; 
.................... unsigned char last_min; 
....................  
.................... int16 user_setpoint = 15000; 
.................... int16 user_protect = 16000; 
.................... int16 user_delay_time = 15; 
.................... int16 user_ster_time = 90; 
.................... int16 i = 0; 
....................        
.................... unsigned char wait_hour, wait_min, wait_day; 
.................... unsigned char hold_hour, hold_min; 
....................  
.................... unsigned int16 password = 0, check_password = 0; 
.................... //unsigned int16 remain_time;      //unit is in minute! 
.................... unsigned int16 setpoint; 
.................... unsigned int16 protect; 
.................... unsigned int16 realTemp; 
.................... unsigned int16 t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0; 
.................... unsigned int16 t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0; 
.................... unsigned int16 delay_time; 
.................... unsigned int16 ster_time; 
.................... //unsigned int16 day_ster_time; 
.................... //unsigned int16 hour_ster_time; 
.................... //unsigned int16 user_day_ster_time; 
.................... //unsigned int16 user_hour_ster_time; 
.................... //unsigned int16 day_remain_time, hour_remain_time; 
.................... unsigned int16 pid_kp, pid_ki, pid_kd; 
.................... //unsigned int16 RTD_realTemp2; 
.................... //unsigned long long_ster_time, long_user_ster_time; 
.................... unsigned long remain_time; 
.................... //unsigned long user_hold_time; 
.................... //float TEMP_LOWER_FULLON_CORRECTION = 3000.0; 
....................  
.................... #define SETPOINT_MAX (25000) 
.................... #define SETPOINT_DEF (15000) 
.................... #define SETPOINT_MIN (1000) 
.................... #define PROTECT_MAX (31000) 
.................... #define PROTECT_DEF (31000) 
.................... #define PROTECT_MIN (1000) 
.................... #define FAN_SPEED_MAX (10) 
.................... #define FAN_SPEED_DEF (7) 
.................... #define FAN_SPEED_MIN (5) 
.................... #define DELAY_TIME_MAX (5999) 
.................... #define DELAY_TIME_DEF (0) 
.................... #define DELAY_TIME_MIN (0) 
.................... #define STER_TIME_MAX (5999) 
.................... #define STER_TIME_DEF (60) 
.................... #define STER_TIME_MIN (0) 
....................  
.................... #define PID_KP_MAX (100) 
.................... #define PID_KP_DEF (60) 
.................... #define PID_KP_MIN (0) 
.................... #define PID_KI_MAX (100) 
.................... #define PID_KI_DEF (55) 
.................... #define PID_KI_MIN (0) 
.................... #define PID_KD_MAX (100) 
.................... #define PID_KD_DEF (28) 
.................... #define PID_KD_MIN (0) 
....................  
.................... #define PID_KP_MAX1 (100) 
.................... #define PID_KP_DEF1 (65) 
.................... #define PID_KP_MIN1 (0) 
.................... #define PID_KI_MAX1 (100) 
.................... #define PID_KI_DEF1 (65) 
.................... #define PID_KI_MIN1 (0) 
.................... #define PID_KD_MAX1 (100) 
.................... #define PID_KD_DEF1 (38) 
.................... #define PID_KD_MIN1 (0) 
....................  
.................... #define PROG1_SETPOINT (12000) 
.................... #define PROG1_PROTECT (13000) 
.................... #define PROG1_DELAY_TIME (0) 
.................... #define PROG1_STER_TIME (90) 
.................... #define PROG2_SETPOINT (13000) 
.................... #define PROG2_PROTECT (14000) 
.................... #define PROG2_DELAY_TIME (0) 
.................... #define PROG2_STER_TIME (85) 
.................... #define PROG3_SETPOINT (14000) 
.................... #define PROG3_PROTECT (15000) 
.................... #define PROG3_DELAY_TIME (0) 
.................... #define PROG3_STER_TIME (80) 
.................... #define PROG4_SETPOINT (15000) 
.................... #define PROG4_PROTECT (16000) 
.................... #define PROG4_DELAY_TIME (0) 
.................... #define PROG4_STER_TIME (70) 
.................... #define PROG5_SETPOINT (16000) 
.................... #define PROG5_PROTECT (17000) 
.................... #define PROG5_DELAY_TIME (0) 
.................... #define PROG5_STER_TIME (60) 
.................... #define PROG6_SETPOINT (17000) 
.................... #define PROG6_PROTECT (18000) 
.................... #define PROG6_DELAY_TIME (0) 
.................... #define PROG6_STER_TIME (50) 
.................... #define PROG7_SETPOINT (18000) 
.................... #define PROG7_PROTECT (19000) 
.................... #define PROG7_DELAY_TIME (0) 
.................... #define PROG7_STER_TIME (45) 
.................... #define PROG8_SETPOINT (19000) 
.................... #define PROG8_PROTECT (20000) 
.................... #define PROG8_DELAY_TIME (0) 
.................... #define PROG8_STER_TIME (40) 
.................... #define PROG9_SETPOINT (20000) 
.................... #define PROG9_PROTECT (21000) 
.................... #define PROG9_DELAY_TIME (0) 
.................... #define PROG9_STER_TIME (35) 
.................... #define PROG10_SETPOINT (22000) 
.................... #define PROG10_PROTECT (23000) 
.................... #define PROG10_DELAY_TIME (0) 
.................... #define PROG10_STER_TIME (30) 
....................  
.................... #define BEEP_TIME (3) 
....................  
.................... #define OFFSET_TEMP_RANGE (3000) 
....................  
.................... #define MAX_TEMP_RANGE (32000) 
.................... //#define ADC_FILTER_COUNT (256) 
.................... #define ADC_FILTER_COUNT (16) 
....................  
.................... #define RTD_CONST (41876) 
....................  
.................... unsigned char  fan_speed = FAN_SPEED_MAX; 
.................... unsigned int16 triac_on_time1 = 0; 
.................... unsigned int16 triac_on_time_new1 = 0; 
.................... unsigned int16 triac_count1 = 0; 
.................... unsigned int16 triac_on_time2 = 0; 
.................... unsigned int16 triac_count2 = 0; 
....................  
.................... unsigned int16 seri = 0; 
.................... unsigned char adc_integ_count = 16; 
.................... signed int32 adc_integ_data; 
.................... signed int16 adc_data, adc_data_buff; 
.................... signed int16 env_temp; 
.................... signed int16 thermo_temp; 
.................... signed int16 temp_offset = 0; 
.................... signed int32 adc_value_ch0; 
.................... signed int32 adc_value_ch1; 
....................  
.................... float k_a, k_b, float_temp; 
....................  
.................... char fan_pos = 0; 
.................... char g_err_code = 0; 
.................... char fan_rol_count = 30; 
.................... char hour_min_flag = 1; 
.................... char flag_day_hour = 0; 
.................... char flag_Rs232 = 0; 
.................... char flag_Rs232_Ster = 0; 
.................... char flag_Rs232_Complete = 0; 
.................... char flag_Rs232_Err = 0; 
.................... char flag_Rs232_IDLE = 0; 
.................... char flag_Pre_Hold = 0; 
....................  
.................... unsigned char GLb_nCountAvrTemp = 0; 
....................  
.................... #endif // #define _GLOBALS_H_ 
....................  
....................  
.................... #use i2c(Master,Slow,sda=PIN_A5,scl=PIN_A4) 
*
1230:  MOVLW  08
1232:  MOVWF  01
1234:  MOVLW  0A
1236:  MOVWF  00
1238:  DECFSZ 00,F
123A:  BRA    1238
123C:  BCF    F89.4
123E:  BCF    F92.4
1240:  MOVLW  0B
1242:  MOVWF  00
1244:  DECFSZ 00,F
1246:  BRA    1244
1248:  RLCF   xE1,F
124A:  BCF    F89.5
124C:  BTFSC  FD8.0
124E:  BSF    F92.5
1250:  BTFSS  FD8.0
1252:  BCF    F92.5
1254:  BSF    F92.4
1256:  BTFSS  F80.4
1258:  BRA    1256
125A:  DECFSZ 01,F
125C:  BRA    1234
125E:  MOVLW  0A
1260:  MOVWF  00
1262:  DECFSZ 00,F
1264:  BRA    1262
1266:  BCF    F89.4
1268:  BCF    F92.4
126A:  NOP   
126C:  BSF    F92.5
126E:  MOVLW  0B
1270:  MOVWF  00
1272:  DECFSZ 00,F
1274:  BRA    1272
1276:  MOVLW  0B
1278:  MOVWF  00
127A:  DECFSZ 00,F
127C:  BRA    127A
127E:  BSF    F92.4
1280:  BTFSS  F80.4
1282:  BRA    1280
1284:  CLRF   01
1286:  MOVLW  0B
1288:  MOVWF  00
128A:  DECFSZ 00,F
128C:  BRA    128A
128E:  BTFSC  F80.5
1290:  BSF    01.0
1292:  BCF    F89.4
1294:  BCF    F92.4
1296:  BCF    F89.5
1298:  BCF    F92.5
129A:  RETURN 0
*
137E:  MOVLW  08
1380:  MOVWF  xE1
1382:  MOVFF  00,E2
1386:  BSF    F92.5
1388:  MOVLW  0B
138A:  MOVWF  00
138C:  DECFSZ 00,F
138E:  BRA    138C
1390:  BSF    F92.4
1392:  BTFSS  F80.4
1394:  BRA    1392
1396:  BTFSC  F80.5
1398:  BSF    FD8.0
139A:  BTFSS  F80.5
139C:  BCF    FD8.0
139E:  RLCF   01,F
13A0:  MOVLW  0A
13A2:  MOVWF  00
13A4:  DECFSZ 00,F
13A6:  BRA    13A4
13A8:  BCF    F92.4
13AA:  BCF    F89.4
13AC:  DECFSZ xE1,F
13AE:  BRA    1386
13B0:  BSF    F92.5
13B2:  MOVLW  0B
13B4:  MOVWF  00
13B6:  DECFSZ 00,F
13B8:  BRA    13B6
13BA:  BCF    F89.5
13BC:  MOVF   xE2,W
13BE:  BTFSS  FD8.2
13C0:  BCF    F92.5
13C2:  NOP   
13C4:  BSF    F92.4
13C6:  BTFSS  F80.4
13C8:  BRA    13C6
13CA:  MOVLW  0A
13CC:  MOVWF  00
13CE:  DECFSZ 00,F
13D0:  BRA    13CE
13D2:  BCF    F89.4
13D4:  BCF    F92.4
13D6:  MOVLW  0B
13D8:  MOVWF  00
13DA:  DECFSZ 00,F
13DC:  BRA    13DA
13DE:  BCF    F89.5
13E0:  BCF    F92.5
13E2:  GOTO   1454 (RETURN)
....................  
.................... void write_DS1307(byte address, BYTE data) 
.................... { 
....................    short int status; 
....................    disable_interrupts(GLOBAL); 
*
129C:  BCF    FF2.6
129E:  BCF    FF2.7
12A0:  BTFSC  FF2.7
12A2:  BRA    129E
....................    i2c_start(); 
12A4:  BSF    F92.5
12A6:  MOVLW  0A
12A8:  MOVWF  00
12AA:  DECFSZ 00,F
12AC:  BRA    12AA
12AE:  BSF    F92.4
12B0:  MOVLW  0B
12B2:  MOVWF  00
12B4:  DECFSZ 00,F
12B6:  BRA    12B4
12B8:  BCF    F89.5
12BA:  BCF    F92.5
12BC:  MOVLW  0A
12BE:  MOVWF  00
12C0:  DECFSZ 00,F
12C2:  BRA    12C0
12C4:  BCF    F89.4
12C6:  BCF    F92.4
....................    i2c_write(0xd0); 
12C8:  MOVLW  D0
12CA:  MOVWF  xE1
12CC:  RCALL  1230
....................    i2c_write(address); 
12CE:  MOVFF  DE,E1
12D2:  RCALL  1230
....................    i2c_write(data); 
12D4:  MOVFF  DF,E1
12D8:  RCALL  1230
....................    i2c_stop(); 
12DA:  BCF    F92.5
12DC:  NOP   
12DE:  BSF    F92.4
12E0:  BTFSS  F80.4
12E2:  BRA    12E0
12E4:  MOVLW  0A
12E6:  MOVWF  00
12E8:  DECFSZ 00,F
12EA:  BRA    12E8
12EC:  BRA    12EE
12EE:  NOP   
12F0:  BSF    F92.5
12F2:  MOVLW  0A
12F4:  MOVWF  00
12F6:  DECFSZ 00,F
12F8:  BRA    12F6
....................    i2c_start(); 
12FA:  BSF    F92.5
12FC:  MOVLW  0A
12FE:  MOVWF  00
1300:  DECFSZ 00,F
1302:  BRA    1300
1304:  BSF    F92.4
1306:  MOVLW  0B
1308:  MOVWF  00
130A:  DECFSZ 00,F
130C:  BRA    130A
130E:  BCF    F89.5
1310:  BCF    F92.5
1312:  MOVLW  0A
1314:  MOVWF  00
1316:  DECFSZ 00,F
1318:  BRA    1316
131A:  BCF    F89.4
131C:  BCF    F92.4
....................    status=i2c_write(0xd0); 
131E:  MOVLW  D0
1320:  MOVWF  xE1
1322:  RCALL  1230
1324:  MOVF   01,W
1326:  BCF    xE0.0
1328:  BTFSC  01.0
132A:  BSF    xE0.0
....................    while(status==1) 
132C:  BTFSS  xE0.0
132E:  BRA    1368
....................    { 
....................       i2c_start(); 
1330:  BSF    F92.5
1332:  MOVLW  0A
1334:  MOVWF  00
1336:  DECFSZ 00,F
1338:  BRA    1336
133A:  BSF    F92.4
133C:  MOVLW  0B
133E:  MOVWF  00
1340:  DECFSZ 00,F
1342:  BRA    1340
1344:  BTFSS  F80.4
1346:  BRA    1344
1348:  BCF    F89.5
134A:  BCF    F92.5
134C:  MOVLW  0A
134E:  MOVWF  00
1350:  DECFSZ 00,F
1352:  BRA    1350
1354:  BCF    F89.4
1356:  BCF    F92.4
....................       status=i2c_write(0xd0); 
1358:  MOVLW  D0
135A:  MOVWF  xE1
135C:  RCALL  1230
135E:  MOVF   01,W
1360:  BCF    xE0.0
1362:  BTFSC  01.0
1364:  BSF    xE0.0
1366:  BRA    132C
....................    } 
....................    enable_interrupts(GLOBAL); 
1368:  MOVLW  C0
136A:  IORWF  FF2,F
136C:  RETURN 0
.................... } 
....................  
.................... BYTE read_DS1307(byte address) 
.................... { 
....................    BYTE data; 
....................    disable_interrupts(GLOBAL); 
*
13E6:  BCF    FF2.6
13E8:  BCF    FF2.7
13EA:  BTFSC  FF2.7
13EC:  BRA    13E8
....................    i2c_start(); 
13EE:  BSF    F92.5
13F0:  MOVLW  0A
13F2:  MOVWF  00
13F4:  DECFSZ 00,F
13F6:  BRA    13F4
13F8:  BSF    F92.4
13FA:  MOVLW  0B
13FC:  MOVWF  00
13FE:  DECFSZ 00,F
1400:  BRA    13FE
1402:  BTFSS  F80.4
1404:  BRA    1402
1406:  BCF    F89.5
1408:  BCF    F92.5
140A:  MOVLW  0A
140C:  MOVWF  00
140E:  DECFSZ 00,F
1410:  BRA    140E
1412:  BCF    F89.4
1414:  BCF    F92.4
....................    i2c_write(0xd0); 
1416:  MOVLW  D0
1418:  MOVWF  xE1
141A:  RCALL  1230
....................    i2c_write(address); 
141C:  MOVFF  DE,E1
1420:  RCALL  1230
....................    i2c_start(); 
1422:  BSF    F92.5
1424:  MOVLW  0A
1426:  MOVWF  00
1428:  DECFSZ 00,F
142A:  BRA    1428
142C:  BSF    F92.4
142E:  MOVLW  0B
1430:  MOVWF  00
1432:  DECFSZ 00,F
1434:  BRA    1432
1436:  BTFSS  F80.4
1438:  BRA    1436
143A:  BCF    F89.5
143C:  BCF    F92.5
143E:  MOVLW  0A
1440:  MOVWF  00
1442:  DECFSZ 00,F
1444:  BRA    1442
1446:  BCF    F89.4
1448:  BCF    F92.4
....................    i2c_write(0xd1); 
144A:  MOVLW  D1
144C:  MOVWF  xE1
144E:  RCALL  1230
....................    data=i2c_read(0); 
1450:  CLRF   00
1452:  BRA    137E
1454:  MOVFF  01,DF
....................    i2c_stop(); 
1458:  BCF    F92.5
145A:  NOP   
145C:  BSF    F92.4
145E:  BTFSS  F80.4
1460:  BRA    145E
1462:  MOVLW  0A
1464:  MOVWF  00
1466:  DECFSZ 00,F
1468:  BRA    1466
146A:  BRA    146C
146C:  NOP   
146E:  BSF    F92.5
1470:  MOVLW  0A
1472:  MOVWF  00
1474:  DECFSZ 00,F
1476:  BRA    1474
....................    enable_interrupts(GLOBAL); 
1478:  MOVLW  C0
147A:  IORWF  FF2,F
....................    return(data); 
147C:  MOVFF  DF,01
1480:  RETURN 0
.................... } 
....................  
.................... void Stop_DS1307(void) 
.................... { 
....................    write_ds1307(0,sec | 0x80); 
.................... } 
....................  
.................... void Start_DS1307(void) 
.................... { 
....................    write_ds1307(0,sec & 0x7F); 
*
136E:  MOVF   4D,W
1370:  ANDLW  7F
1372:  MOVWF  xDC
1374:  CLRF   xDE
1376:  MOVWF  xDF
1378:  RCALL  129C
137A:  GOTO   2256 (RETURN)
.................... } 
....................  
.................... unsigned int BCD2Dec(unsigned int BCD) { 
....................    unsigned int L, H; 
....................    L=BCD & 0x0F; 
*
53C8:  MOVF   xDE,W
53CA:  ANDLW  0F
53CC:  MOVWF  xDF
....................    H=(BCD>>4)*10; 
53CE:  SWAPF  xDE,W
53D0:  MOVWF  00
53D2:  MOVLW  0F
53D4:  ANDWF  00,F
53D6:  MOVF   00,W
53D8:  MULLW  0A
53DA:  MOVFF  FF3,E0
....................    return (H+L); 
53DE:  MOVF   xDF,W
53E0:  ADDWF  xE0,W
53E2:  MOVWF  01
53E4:  RETURN 0
.................... } 
....................  
.................... void Store_Kp(void) 
.................... { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = pid_kp >> 8; 
*
2EBE:  MOVFF  84,DE
....................    tmp_L = pid_kp & 0xFF; 
2EC2:  MOVFF  83,DF
....................    // write_DS1307(0x10, tmp_H); 
....................    // write_DS1307(0x11, tmp_L); 
....................    if(setpoint < 20000) { 
2EC6:  MOVF   66,W
2EC8:  SUBLW  4E
2ECA:  BNC   2F2A
2ECC:  BNZ   2ED4
2ECE:  MOVF   65,W
2ED0:  SUBLW  1F
2ED2:  BNC   2F2A
....................       write_eeprom(0x30, tmp_H); 
2ED4:  MOVF   FF2,W
2ED6:  MOVWF  00
2ED8:  BCF    FF2.7
2EDA:  MOVLW  30
2EDC:  MOVWF  FA9
2EDE:  MOVFF  DE,FA8
2EE2:  BCF    FA6.6
2EE4:  BCF    FA6.7
2EE6:  BSF    FA6.2
2EE8:  MOVLB  F
2EEA:  MOVLW  55
2EEC:  MOVWF  FA7
2EEE:  MOVLW  AA
2EF0:  MOVWF  FA7
2EF2:  BSF    FA6.1
2EF4:  BTFSC  FA6.1
2EF6:  BRA    2EF4
2EF8:  BCF    FA6.2
2EFA:  MOVF   00,W
2EFC:  IORWF  FF2,F
....................       write_eeprom(0x31, tmp_L); 
2EFE:  MOVFF  FF2,00
2F02:  BCF    FF2.7
2F04:  MOVLW  31
2F06:  MOVWF  FA9
2F08:  MOVFF  DF,FA8
2F0C:  BCF    FA6.6
2F0E:  BCF    FA6.7
2F10:  BSF    FA6.2
2F12:  MOVLW  55
2F14:  MOVWF  FA7
2F16:  MOVLW  AA
2F18:  MOVWF  FA7
2F1A:  BSF    FA6.1
2F1C:  BTFSC  FA6.1
2F1E:  BRA    2F1C
2F20:  BCF    FA6.2
2F22:  MOVF   00,W
2F24:  IORWF  FF2,F
....................    } 
2F26:  BRA    2F7C
2F28:  MOVLB  0
....................    else { 
....................       write_eeprom(0x40, tmp_H); 
2F2A:  MOVF   FF2,W
2F2C:  MOVWF  00
2F2E:  BCF    FF2.7
2F30:  MOVLW  40
2F32:  MOVWF  FA9
2F34:  MOVFF  DE,FA8
2F38:  BCF    FA6.6
2F3A:  BCF    FA6.7
2F3C:  BSF    FA6.2
2F3E:  MOVLB  F
2F40:  MOVLW  55
2F42:  MOVWF  FA7
2F44:  MOVLW  AA
2F46:  MOVWF  FA7
2F48:  BSF    FA6.1
2F4A:  BTFSC  FA6.1
2F4C:  BRA    2F4A
2F4E:  BCF    FA6.2
2F50:  MOVF   00,W
2F52:  IORWF  FF2,F
....................       write_eeprom(0x41, tmp_L); 
2F54:  MOVFF  FF2,00
2F58:  BCF    FF2.7
2F5A:  MOVLW  41
2F5C:  MOVWF  FA9
2F5E:  MOVFF  DF,FA8
2F62:  BCF    FA6.6
2F64:  BCF    FA6.7
2F66:  BSF    FA6.2
2F68:  MOVLW  55
2F6A:  MOVWF  FA7
2F6C:  MOVLW  AA
2F6E:  MOVWF  FA7
2F70:  BSF    FA6.1
2F72:  BTFSC  FA6.1
2F74:  BRA    2F72
2F76:  BCF    FA6.2
2F78:  MOVF   00,W
2F7A:  IORWF  FF2,F
....................    } 
2F7C:  MOVLB  0
2F7E:  RETURN 0
....................     
.................... } 
....................  
.................... void Store_Ki(void) 
.................... { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = pid_ki >> 8; 
2F80:  MOVFF  86,DE
....................    tmp_L = pid_ki & 0xFF; 
2F84:  MOVFF  85,DF
....................    // write_DS1307(0x12, tmp_H); 
....................    // write_DS1307(0x13, tmp_L); 
....................    if(setpoint < 20000) { 
2F88:  MOVF   66,W
2F8A:  SUBLW  4E
2F8C:  BNC   2FEC
2F8E:  BNZ   2F96
2F90:  MOVF   65,W
2F92:  SUBLW  1F
2F94:  BNC   2FEC
....................       write_eeprom(0x32, tmp_H); 
2F96:  MOVF   FF2,W
2F98:  MOVWF  00
2F9A:  BCF    FF2.7
2F9C:  MOVLW  32
2F9E:  MOVWF  FA9
2FA0:  MOVFF  DE,FA8
2FA4:  BCF    FA6.6
2FA6:  BCF    FA6.7
2FA8:  BSF    FA6.2
2FAA:  MOVLB  F
2FAC:  MOVLW  55
2FAE:  MOVWF  FA7
2FB0:  MOVLW  AA
2FB2:  MOVWF  FA7
2FB4:  BSF    FA6.1
2FB6:  BTFSC  FA6.1
2FB8:  BRA    2FB6
2FBA:  BCF    FA6.2
2FBC:  MOVF   00,W
2FBE:  IORWF  FF2,F
....................       write_eeprom(0x33, tmp_L); 
2FC0:  MOVFF  FF2,00
2FC4:  BCF    FF2.7
2FC6:  MOVLW  33
2FC8:  MOVWF  FA9
2FCA:  MOVFF  DF,FA8
2FCE:  BCF    FA6.6
2FD0:  BCF    FA6.7
2FD2:  BSF    FA6.2
2FD4:  MOVLW  55
2FD6:  MOVWF  FA7
2FD8:  MOVLW  AA
2FDA:  MOVWF  FA7
2FDC:  BSF    FA6.1
2FDE:  BTFSC  FA6.1
2FE0:  BRA    2FDE
2FE2:  BCF    FA6.2
2FE4:  MOVF   00,W
2FE6:  IORWF  FF2,F
....................    } 
2FE8:  BRA    303E
2FEA:  MOVLB  0
....................    else { 
....................       write_eeprom(0x42, tmp_H); 
2FEC:  MOVF   FF2,W
2FEE:  MOVWF  00
2FF0:  BCF    FF2.7
2FF2:  MOVLW  42
2FF4:  MOVWF  FA9
2FF6:  MOVFF  DE,FA8
2FFA:  BCF    FA6.6
2FFC:  BCF    FA6.7
2FFE:  BSF    FA6.2
3000:  MOVLB  F
3002:  MOVLW  55
3004:  MOVWF  FA7
3006:  MOVLW  AA
3008:  MOVWF  FA7
300A:  BSF    FA6.1
300C:  BTFSC  FA6.1
300E:  BRA    300C
3010:  BCF    FA6.2
3012:  MOVF   00,W
3014:  IORWF  FF2,F
....................       write_eeprom(0x43, tmp_L); 
3016:  MOVFF  FF2,00
301A:  BCF    FF2.7
301C:  MOVLW  43
301E:  MOVWF  FA9
3020:  MOVFF  DF,FA8
3024:  BCF    FA6.6
3026:  BCF    FA6.7
3028:  BSF    FA6.2
302A:  MOVLW  55
302C:  MOVWF  FA7
302E:  MOVLW  AA
3030:  MOVWF  FA7
3032:  BSF    FA6.1
3034:  BTFSC  FA6.1
3036:  BRA    3034
3038:  BCF    FA6.2
303A:  MOVF   00,W
303C:  IORWF  FF2,F
....................    } 
303E:  MOVLB  0
3040:  RETURN 0
....................    //write_eeprom(0x32, tmp_H); 
....................    //write_eeprom(0x33, tmp_L); 
.................... } 
....................  
.................... void Store_Kd(void) 
.................... { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = pid_kd >> 8; 
3042:  MOVFF  88,DE
....................    tmp_L = pid_kd & 0xFF; 
3046:  MOVFF  87,DF
....................    // write_DS1307(0x14, tmp_H); 
....................    // write_DS1307(0x15, tmp_L); 
....................    if(setpoint < 20000) { 
304A:  MOVF   66,W
304C:  SUBLW  4E
304E:  BNC   30AE
3050:  BNZ   3058
3052:  MOVF   65,W
3054:  SUBLW  1F
3056:  BNC   30AE
....................       write_eeprom(0x34, tmp_H); 
3058:  MOVF   FF2,W
305A:  MOVWF  00
305C:  BCF    FF2.7
305E:  MOVLW  34
3060:  MOVWF  FA9
3062:  MOVFF  DE,FA8
3066:  BCF    FA6.6
3068:  BCF    FA6.7
306A:  BSF    FA6.2
306C:  MOVLB  F
306E:  MOVLW  55
3070:  MOVWF  FA7
3072:  MOVLW  AA
3074:  MOVWF  FA7
3076:  BSF    FA6.1
3078:  BTFSC  FA6.1
307A:  BRA    3078
307C:  BCF    FA6.2
307E:  MOVF   00,W
3080:  IORWF  FF2,F
....................       write_eeprom(0x35, tmp_L); 
3082:  MOVFF  FF2,00
3086:  BCF    FF2.7
3088:  MOVLW  35
308A:  MOVWF  FA9
308C:  MOVFF  DF,FA8
3090:  BCF    FA6.6
3092:  BCF    FA6.7
3094:  BSF    FA6.2
3096:  MOVLW  55
3098:  MOVWF  FA7
309A:  MOVLW  AA
309C:  MOVWF  FA7
309E:  BSF    FA6.1
30A0:  BTFSC  FA6.1
30A2:  BRA    30A0
30A4:  BCF    FA6.2
30A6:  MOVF   00,W
30A8:  IORWF  FF2,F
....................    } 
30AA:  BRA    3100
30AC:  MOVLB  0
....................    else { 
....................       write_eeprom(0x44, tmp_H); 
30AE:  MOVF   FF2,W
30B0:  MOVWF  00
30B2:  BCF    FF2.7
30B4:  MOVLW  44
30B6:  MOVWF  FA9
30B8:  MOVFF  DE,FA8
30BC:  BCF    FA6.6
30BE:  BCF    FA6.7
30C0:  BSF    FA6.2
30C2:  MOVLB  F
30C4:  MOVLW  55
30C6:  MOVWF  FA7
30C8:  MOVLW  AA
30CA:  MOVWF  FA7
30CC:  BSF    FA6.1
30CE:  BTFSC  FA6.1
30D0:  BRA    30CE
30D2:  BCF    FA6.2
30D4:  MOVF   00,W
30D6:  IORWF  FF2,F
....................       write_eeprom(0x45, tmp_L); 
30D8:  MOVFF  FF2,00
30DC:  BCF    FF2.7
30DE:  MOVLW  45
30E0:  MOVWF  FA9
30E2:  MOVFF  DF,FA8
30E6:  BCF    FA6.6
30E8:  BCF    FA6.7
30EA:  BSF    FA6.2
30EC:  MOVLW  55
30EE:  MOVWF  FA7
30F0:  MOVLW  AA
30F2:  MOVWF  FA7
30F4:  BSF    FA6.1
30F6:  BTFSC  FA6.1
30F8:  BRA    30F6
30FA:  BCF    FA6.2
30FC:  MOVF   00,W
30FE:  IORWF  FF2,F
....................    } 
3100:  MOVLB  0
3102:  RETURN 0
....................    //write_eeprom(0x34, tmp_H); 
....................    //write_eeprom(0x35, tmp_L); 
.................... } 
....................  
.................... void Store_Offset(void) 
.................... { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = temp_offset >> 8; 
*
34A4:  MOVFF  A6,DE
....................    tmp_L = temp_offset & 0xFF; 
34A8:  MOVFF  A5,DF
....................    /*write_DS1307(0x1B, tmp_H); 
....................    write_DS1307(0x1C, tmp_L); 
....................    With Air Jet Temp and Offset, we store in EEPROM*/ 
....................    write_eeprom(0x1B, tmp_H); 
34AC:  MOVF   FF2,W
34AE:  MOVWF  00
34B0:  BCF    FF2.7
34B2:  MOVLW  1B
34B4:  MOVWF  FA9
34B6:  MOVFF  DE,FA8
34BA:  BCF    FA6.6
34BC:  BCF    FA6.7
34BE:  BSF    FA6.2
34C0:  MOVLB  F
34C2:  MOVLW  55
34C4:  MOVWF  FA7
34C6:  MOVLW  AA
34C8:  MOVWF  FA7
34CA:  BSF    FA6.1
34CC:  BTFSC  FA6.1
34CE:  BRA    34CC
34D0:  BCF    FA6.2
34D2:  MOVF   00,W
34D4:  IORWF  FF2,F
....................    write_eeprom(0x1C, tmp_L); 
34D6:  MOVFF  FF2,00
34DA:  BCF    FF2.7
34DC:  MOVLW  1C
34DE:  MOVWF  FA9
34E0:  MOVFF  DF,FA8
34E4:  BCF    FA6.6
34E6:  BCF    FA6.7
34E8:  BSF    FA6.2
34EA:  MOVLW  55
34EC:  MOVWF  FA7
34EE:  MOVLW  AA
34F0:  MOVWF  FA7
34F2:  BSF    FA6.1
34F4:  BTFSC  FA6.1
34F6:  BRA    34F4
34F8:  BCF    FA6.2
34FA:  MOVF   00,W
34FC:  IORWF  FF2,F
34FE:  MOVLB  0
3500:  RETURN 0
.................... } 
....................  
.................... void Store_Mode(void) 
.................... { 
....................    write_DS1307(0x08, g_mode); 
*
289A:  MOVLW  08
289C:  MOVWF  xDE
289E:  MOVFF  3A,DF
28A2:  CALL   129C
28A6:  GOTO   28FA (RETURN)
.................... } 
....................  
.................... void Store_WaitTime(void) 
.................... { 
....................    wait_hour = user_delay_time/60; 
*
29E4:  MOVFF  57,E6
29E8:  MOVFF  56,E5
29EC:  CLRF   xE8
29EE:  MOVLW  3C
29F0:  MOVWF  xE7
29F2:  RCALL  22F4
29F4:  MOVFF  01,5C
....................    wait_min = user_delay_time%60; 
29F8:  MOVFF  57,E6
29FC:  MOVFF  56,E5
2A00:  CLRF   xE8
2A02:  MOVLW  3C
2A04:  MOVWF  xE7
2A06:  RCALL  22F4
2A08:  MOVFF  00,5D
....................    write_DS1307(0x0A, wait_hour); 
2A0C:  MOVLW  0A
2A0E:  MOVWF  xDE
2A10:  MOVFF  5C,DF
2A14:  CALL   129C
....................    write_DS1307(0x0B, wait_min); 
2A18:  MOVLW  0B
2A1A:  MOVWF  xDE
2A1C:  MOVFF  5D,DF
2A20:  CALL   129C
2A24:  GOTO   2CB4 (RETURN)
.................... } 
....................  
.................... void Store_HoldTime(void) 
.................... { 
....................    hold_hour = user_ster_time/60; 
*
2B38:  MOVFF  59,E6
2B3C:  MOVFF  58,E5
2B40:  CLRF   xE8
2B42:  MOVLW  3C
2B44:  MOVWF  xE7
2B46:  CALL   22F4
2B4A:  MOVFF  01,5F
....................    hold_min = user_ster_time%60; 
2B4E:  MOVFF  59,E6
2B52:  MOVFF  58,E5
2B56:  CLRF   xE8
2B58:  MOVLW  3C
2B5A:  MOVWF  xE7
2B5C:  CALL   22F4
2B60:  MOVFF  00,60
....................    write_eeprom(0x55, hold_hour); 
2B64:  MOVF   FF2,W
2B66:  MOVWF  00
2B68:  BCF    FF2.7
2B6A:  MOVLW  55
2B6C:  MOVWF  FA9
2B6E:  MOVFF  5F,FA8
2B72:  BCF    FA6.6
2B74:  BCF    FA6.7
2B76:  BSF    FA6.2
2B78:  MOVLB  F
2B7A:  MOVWF  FA7
2B7C:  MOVLW  AA
2B7E:  MOVWF  FA7
2B80:  BSF    FA6.1
2B82:  BTFSC  FA6.1
2B84:  BRA    2B82
2B86:  BCF    FA6.2
2B88:  MOVF   00,W
2B8A:  IORWF  FF2,F
....................    write_eeprom(0x56, hold_min); 
2B8C:  MOVFF  FF2,00
2B90:  BCF    FF2.7
2B92:  MOVLW  56
2B94:  MOVWF  FA9
2B96:  MOVFF  60,FA8
2B9A:  BCF    FA6.6
2B9C:  BCF    FA6.7
2B9E:  BSF    FA6.2
2BA0:  MOVLW  55
2BA2:  MOVWF  FA7
2BA4:  MOVLW  AA
2BA6:  MOVWF  FA7
2BA8:  BSF    FA6.1
2BAA:  BTFSC  FA6.1
2BAC:  BRA    2BAA
2BAE:  BCF    FA6.2
2BB0:  MOVF   00,W
2BB2:  IORWF  FF2,F
2BB4:  MOVLB  0
2BB6:  GOTO   2D16 (RETURN)
.................... } 
....................  
.................... /*void Store_DayTime(void) { 
....................    write_eeprom(0x51, user_day_ster_time/10); 
....................    write_eeprom(0x52, user_day_ster_time%10); 
.................... } 
....................  
.................... void Store_HourTime(void) { 
....................    write_eeprom(0x53, user_hour_ster_time/10); 
....................    write_eeprom(0x54, user_hour_ster_time%10); 
.................... }*/ 
....................  
.................... void Store_Setpoint(void) 
.................... { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = user_setpoint >> 8; 
*
2A78:  MOVFF  53,DC
....................    tmp_L = user_setpoint & 0xFF; 
2A7C:  MOVFF  52,DD
....................    //write_DS1307(0x16, tmp_H); 
....................    //write_DS1307(0x17, tmp_L); 
....................    write_eeprom(0x51, tmp_H); 
2A80:  MOVF   FF2,W
2A82:  MOVWF  00
2A84:  BCF    FF2.7
2A86:  MOVLW  51
2A88:  MOVWF  FA9
2A8A:  MOVFF  DC,FA8
2A8E:  BCF    FA6.6
2A90:  BCF    FA6.7
2A92:  BSF    FA6.2
2A94:  MOVLB  F
2A96:  MOVLW  55
2A98:  MOVWF  FA7
2A9A:  MOVLW  AA
2A9C:  MOVWF  FA7
2A9E:  BSF    FA6.1
2AA0:  BTFSC  FA6.1
2AA2:  BRA    2AA0
2AA4:  BCF    FA6.2
2AA6:  MOVF   00,W
2AA8:  IORWF  FF2,F
....................    write_eeprom(0x52, tmp_L); 
2AAA:  MOVFF  FF2,00
2AAE:  BCF    FF2.7
2AB0:  MOVLW  52
2AB2:  MOVWF  FA9
2AB4:  MOVFF  DD,FA8
2AB8:  BCF    FA6.6
2ABA:  BCF    FA6.7
2ABC:  BSF    FA6.2
2ABE:  MOVLW  55
2AC0:  MOVWF  FA7
2AC2:  MOVLW  AA
2AC4:  MOVWF  FA7
2AC6:  BSF    FA6.1
2AC8:  BTFSC  FA6.1
2ACA:  BRA    2AC8
2ACC:  BCF    FA6.2
2ACE:  MOVF   00,W
2AD0:  IORWF  FF2,F
2AD2:  MOVLB  0
2AD4:  GOTO   2CEE (RETURN)
.................... } 
....................  
.................... void Store_Protect(void) 
.................... { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = user_protect >> 8; 
2AD8:  MOVFF  55,DC
....................    tmp_L = user_protect & 0xFF; 
2ADC:  MOVFF  54,DD
....................    //write_DS1307(0x18, tmp_H); 
....................    //write_DS1307(0x19, tmp_L); 
....................    write_eeprom(0x53, tmp_H); 
2AE0:  MOVF   FF2,W
2AE2:  MOVWF  00
2AE4:  BCF    FF2.7
2AE6:  MOVLW  53
2AE8:  MOVWF  FA9
2AEA:  MOVFF  DC,FA8
2AEE:  BCF    FA6.6
2AF0:  BCF    FA6.7
2AF2:  BSF    FA6.2
2AF4:  MOVLB  F
2AF6:  MOVLW  55
2AF8:  MOVWF  FA7
2AFA:  MOVLW  AA
2AFC:  MOVWF  FA7
2AFE:  BSF    FA6.1
2B00:  BTFSC  FA6.1
2B02:  BRA    2B00
2B04:  BCF    FA6.2
2B06:  MOVF   00,W
2B08:  IORWF  FF2,F
....................    write_eeprom(0x54, tmp_L); 
2B0A:  MOVFF  FF2,00
2B0E:  BCF    FF2.7
2B10:  MOVLW  54
2B12:  MOVWF  FA9
2B14:  MOVFF  DD,FA8
2B18:  BCF    FA6.6
2B1A:  BCF    FA6.7
2B1C:  BSF    FA6.2
2B1E:  MOVLW  55
2B20:  MOVWF  FA7
2B22:  MOVLW  AA
2B24:  MOVWF  FA7
2B26:  BSF    FA6.1
2B28:  BTFSC  FA6.1
2B2A:  BRA    2B28
2B2C:  BCF    FA6.2
2B2E:  MOVF   00,W
2B30:  IORWF  FF2,F
2B32:  MOVLB  0
2B34:  GOTO   2CF0 (RETURN)
.................... } 
....................  
.................... void Store_Password(void) { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = check_password >> 8; 
*
399C:  MOVFF  64,DC
....................    tmp_L = check_password & 0xFF; 
39A0:  MOVFF  63,DD
....................    write_eeprom(0x2C, tmp_H); 
39A4:  MOVF   FF2,W
39A6:  MOVWF  00
39A8:  BCF    FF2.7
39AA:  MOVLW  2C
39AC:  MOVWF  FA9
39AE:  MOVFF  DC,FA8
39B2:  BCF    FA6.6
39B4:  BCF    FA6.7
39B6:  BSF    FA6.2
39B8:  MOVLB  F
39BA:  MOVLW  55
39BC:  MOVWF  FA7
39BE:  MOVLW  AA
39C0:  MOVWF  FA7
39C2:  BSF    FA6.1
39C4:  BTFSC  FA6.1
39C6:  BRA    39C4
39C8:  BCF    FA6.2
39CA:  MOVF   00,W
39CC:  IORWF  FF2,F
....................    write_eeprom(0x2D, tmp_L); 
39CE:  MOVFF  FF2,00
39D2:  BCF    FF2.7
39D4:  MOVLW  2D
39D6:  MOVWF  FA9
39D8:  MOVFF  DD,FA8
39DC:  BCF    FA6.6
39DE:  BCF    FA6.7
39E0:  BSF    FA6.2
39E2:  MOVLW  55
39E4:  MOVWF  FA7
39E6:  MOVLW  AA
39E8:  MOVWF  FA7
39EA:  BSF    FA6.1
39EC:  BTFSC  FA6.1
39EE:  BRA    39EC
39F0:  BCF    FA6.2
39F2:  MOVF   00,W
39F4:  IORWF  FF2,F
39F6:  MOVLB  0
39F8:  GOTO   3A28 (RETURN)
.................... } 
.................... void Store_SERI(void) { 
....................    unsigned char tmp_H, tmp_L; 
....................    tmp_H = seri >> 8; 
*
2BBA:  MOVFF  97,DC
....................    tmp_L = seri & 0xFF; 
2BBE:  MOVFF  96,DD
....................    write_eeprom(0x07, tmp_H); 
2BC2:  MOVF   FF2,W
2BC4:  MOVWF  00
2BC6:  BCF    FF2.7
2BC8:  MOVLW  07
2BCA:  MOVWF  FA9
2BCC:  MOVFF  DC,FA8
2BD0:  BCF    FA6.6
2BD2:  BCF    FA6.7
2BD4:  BSF    FA6.2
2BD6:  MOVLB  F
2BD8:  MOVLW  55
2BDA:  MOVWF  FA7
2BDC:  MOVLW  AA
2BDE:  MOVWF  FA7
2BE0:  BSF    FA6.1
2BE2:  BTFSC  FA6.1
2BE4:  BRA    2BE2
2BE6:  BCF    FA6.2
2BE8:  MOVF   00,W
2BEA:  IORWF  FF2,F
....................    write_eeprom(0x08, tmp_L); 
2BEC:  MOVFF  FF2,00
2BF0:  BCF    FF2.7
2BF2:  MOVLW  08
2BF4:  MOVWF  FA9
2BF6:  MOVFF  DD,FA8
2BFA:  BCF    FA6.6
2BFC:  BCF    FA6.7
2BFE:  BSF    FA6.2
2C00:  MOVLW  55
2C02:  MOVWF  FA7
2C04:  MOVLW  AA
2C06:  MOVWF  FA7
2C08:  BSF    FA6.1
2C0A:  BTFSC  FA6.1
2C0C:  BRA    2C0A
2C0E:  BCF    FA6.2
2C10:  MOVF   00,W
2C12:  IORWF  FF2,F
2C14:  MOVLB  0
2C16:  GOTO   2D12 (RETURN)
.................... } 
....................  
.................... void Store_FanSpeed(void) 
.................... { 
....................    // write_DS1307(0x1A, fan_speed); 
....................    write_eeprom(0x36, fan_speed); 
*
3502:  MOVF   FF2,W
3504:  MOVWF  00
3506:  BCF    FF2.7
3508:  MOVLW  36
350A:  MOVWF  FA9
350C:  MOVFF  8B,FA8
3510:  BCF    FA6.6
3512:  BCF    FA6.7
3514:  BSF    FA6.2
3516:  MOVLB  F
3518:  MOVLW  55
351A:  MOVWF  FA7
351C:  MOVLW  AA
351E:  MOVWF  FA7
3520:  BSF    FA6.1
3522:  BTFSC  FA6.1
3524:  BRA    3522
3526:  BCF    FA6.2
3528:  MOVF   00,W
352A:  IORWF  FF2,F
352C:  MOVLB  0
352E:  RETURN 0
.................... } 
....................  
.................... void Check_Data_Previous(void) { 
....................      if (SETPOINT_MIN > user_setpoint || SETPOINT_MAX < user_setpoint) { 
*
2A28:  MOVF   53,W
2A2A:  SUBLW  03
2A2C:  BNC   2A36
2A2E:  BNZ   2A46
2A30:  MOVF   52,W
2A32:  SUBLW  E7
2A34:  BC    2A46
2A36:  MOVF   53,W
2A38:  SUBLW  60
2A3A:  BC    2A4E
2A3C:  XORLW  FF
2A3E:  BNZ   2A46
2A40:  MOVF   52,W
2A42:  SUBLW  A8
2A44:  BC    2A4E
....................            user_setpoint = SETPOINT_DEF; 
2A46:  MOVLW  3A
2A48:  MOVWF  53
2A4A:  MOVLW  98
2A4C:  MOVWF  52
....................      } 
....................      if (PROTECT_MIN > user_protect || PROTECT_MAX < user_protect) { 
2A4E:  MOVF   55,W
2A50:  SUBLW  03
2A52:  BNC   2A5C
2A54:  BNZ   2A6C
2A56:  MOVF   54,W
2A58:  SUBLW  E7
2A5A:  BC    2A6C
2A5C:  MOVF   55,W
2A5E:  SUBLW  78
2A60:  BC    2A74
2A62:  XORLW  FF
2A64:  BNZ   2A6C
2A66:  MOVF   54,W
2A68:  SUBLW  18
2A6A:  BC    2A74
....................            user_protect = PROTECT_MAX; 
2A6C:  MOVLW  79
2A6E:  MOVWF  55
2A70:  MOVLW  18
2A72:  MOVWF  54
....................      } 
2A74:  GOTO   2CEC (RETURN)
.................... } 
....................  
.................... void Load_Data_Program_EEPROM(void) { 
....................    switch (g_mode) { 
*
1A16:  MOVLW  01
1A18:  SUBWF  3A,W
1A1A:  ADDLW  F6
1A1C:  BTFSC  FD8.0
1A1E:  BRA    1B14
1A20:  ADDLW  0A
1A22:  GOTO   1B16
....................       case PROGRAM1: 
....................          user_setpoint = PROG1_SETPOINT; 
1A26:  MOVLW  2E
1A28:  MOVWF  53
1A2A:  MOVLW  E0
1A2C:  MOVWF  52
....................          user_protect = PROG1_PROTECT; 
1A2E:  MOVLW  32
1A30:  MOVWF  55
1A32:  MOVLW  C8
1A34:  MOVWF  54
....................          user_ster_time = PROG1_STER_TIME; 
1A36:  CLRF   59
1A38:  MOVLW  5A
1A3A:  MOVWF  58
....................       break; 
1A3C:  BRA    1B14
....................       case PROGRAM2: 
....................          user_setpoint = PROG2_SETPOINT; 
1A3E:  MOVLW  32
1A40:  MOVWF  53
1A42:  MOVLW  C8
1A44:  MOVWF  52
....................          user_protect = PROG2_PROTECT; 
1A46:  MOVLW  36
1A48:  MOVWF  55
1A4A:  MOVLW  B0
1A4C:  MOVWF  54
....................          user_ster_time = PROG2_STER_TIME; 
1A4E:  CLRF   59
1A50:  MOVLW  55
1A52:  MOVWF  58
....................       break; 
1A54:  BRA    1B14
....................       case PROGRAM3: 
....................          user_setpoint = PROG3_SETPOINT; 
1A56:  MOVLW  36
1A58:  MOVWF  53
1A5A:  MOVLW  B0
1A5C:  MOVWF  52
....................          user_protect = PROG3_PROTECT; 
1A5E:  MOVLW  3A
1A60:  MOVWF  55
1A62:  MOVLW  98
1A64:  MOVWF  54
....................          user_ster_time = PROG3_STER_TIME; 
1A66:  CLRF   59
1A68:  MOVLW  50
1A6A:  MOVWF  58
....................       break; 
1A6C:  BRA    1B14
....................       case PROGRAM4: 
....................          user_setpoint = PROG4_SETPOINT; 
1A6E:  MOVLW  3A
1A70:  MOVWF  53
1A72:  MOVLW  98
1A74:  MOVWF  52
....................          user_protect = PROG4_PROTECT; 
1A76:  MOVLW  3E
1A78:  MOVWF  55
1A7A:  MOVLW  80
1A7C:  MOVWF  54
....................          user_ster_time = PROG4_STER_TIME; 
1A7E:  CLRF   59
1A80:  MOVLW  46
1A82:  MOVWF  58
....................       break; 
1A84:  BRA    1B14
....................       case PROGRAM5: 
....................          user_setpoint = PROG5_SETPOINT; 
1A86:  MOVLW  3E
1A88:  MOVWF  53
1A8A:  MOVLW  80
1A8C:  MOVWF  52
....................          user_protect = PROG5_PROTECT; 
1A8E:  MOVLW  42
1A90:  MOVWF  55
1A92:  MOVLW  68
1A94:  MOVWF  54
....................          user_ster_time = PROG5_STER_TIME; 
1A96:  CLRF   59
1A98:  MOVLW  3C
1A9A:  MOVWF  58
....................       break; 
1A9C:  BRA    1B14
....................       case PROGRAM6: 
....................          user_setpoint = PROG6_SETPOINT; 
1A9E:  MOVLW  42
1AA0:  MOVWF  53
1AA2:  MOVLW  68
1AA4:  MOVWF  52
....................          user_protect = PROG6_PROTECT; 
1AA6:  MOVLW  46
1AA8:  MOVWF  55
1AAA:  MOVLW  50
1AAC:  MOVWF  54
....................          user_ster_time = PROG6_STER_TIME; 
1AAE:  CLRF   59
1AB0:  MOVLW  32
1AB2:  MOVWF  58
....................       break; 
1AB4:  BRA    1B14
....................       case PROGRAM7: 
....................          user_setpoint = PROG7_SETPOINT; 
1AB6:  MOVLW  46
1AB8:  MOVWF  53
1ABA:  MOVLW  50
1ABC:  MOVWF  52
....................          user_protect = PROG7_PROTECT; 
1ABE:  MOVLW  4A
1AC0:  MOVWF  55
1AC2:  MOVLW  38
1AC4:  MOVWF  54
....................          user_ster_time = PROG7_STER_TIME; 
1AC6:  CLRF   59
1AC8:  MOVLW  2D
1ACA:  MOVWF  58
....................       break; 
1ACC:  BRA    1B14
....................       case PROGRAM8: 
....................          user_setpoint = PROG8_SETPOINT; 
1ACE:  MOVLW  4A
1AD0:  MOVWF  53
1AD2:  MOVLW  38
1AD4:  MOVWF  52
....................          user_protect = PROG8_PROTECT; 
1AD6:  MOVLW  4E
1AD8:  MOVWF  55
1ADA:  MOVLW  20
1ADC:  MOVWF  54
....................          user_ster_time = PROG8_STER_TIME; 
1ADE:  CLRF   59
1AE0:  MOVLW  28
1AE2:  MOVWF  58
....................       break; 
1AE4:  BRA    1B14
....................       case PROGRAM9: 
....................          user_setpoint = PROG9_SETPOINT; 
1AE6:  MOVLW  4E
1AE8:  MOVWF  53
1AEA:  MOVLW  20
1AEC:  MOVWF  52
....................          user_protect = PROG9_PROTECT; 
1AEE:  MOVLW  52
1AF0:  MOVWF  55
1AF2:  MOVLW  08
1AF4:  MOVWF  54
....................          user_ster_time = PROG9_STER_TIME; 
1AF6:  CLRF   59
1AF8:  MOVLW  23
1AFA:  MOVWF  58
....................       break; 
1AFC:  BRA    1B14
....................       case PROGRAM10: 
....................          user_setpoint = PROG10_SETPOINT; 
1AFE:  MOVLW  55
1B00:  MOVWF  53
1B02:  MOVLW  F0
1B04:  MOVWF  52
....................          user_protect = PROG10_PROTECT; 
1B06:  MOVLW  59
1B08:  MOVWF  55
1B0A:  MOVLW  D8
1B0C:  MOVWF  54
....................          user_ster_time = PROG10_STER_TIME; 
1B0E:  CLRF   59
1B10:  MOVLW  1E
1B12:  MOVWF  58
....................       break; 
....................    } 
1B14:  RETURN 0
....................    /*unsigned char tmp_H,tmp_L; 
....................    int8 a,b,e,f,g,h,k; 
....................    switch(g_mode) { 
....................       case PROGRAM1: 
....................          a = 0x09; 
....................          b = 0x0A; 
....................          e = 0x0D; 
....................          f = 0x0E; 
....................          g = 0x12; 
....................          h = 0x13; 
....................          //k = 0x50; 
....................          break; 
....................       case PROGRAM2: 
....................          a = 0x16; 
....................          b = 0x17; 
....................          e = 0x1A; 
....................          f = 0x1F; 
....................          g = 0x22; 
....................          h = 0x23; 
....................          //k = 0x51; 
....................          break; 
....................       case PROGRAM3: 
....................          a = 0x07; 
....................          b = 0x08; 
....................          e = 0x30; 
....................          f = 0x31; 
....................          g = 0x32; 
....................          h = 0x33; 
....................          //k = 0x52; 
....................          break; 
....................       case PROGRAM4: 
....................          a = 0x0B; 
....................          b = 0x0C; 
....................          e = 0x34; 
....................          f = 0x35; 
....................          g = 0x36; 
....................          h = 0x37; 
....................          //k = 0x53; 
....................          break; 
....................       case PROGRAM5: 
....................          a = 0x10; 
....................          b = 0x11; 
....................          e = 0x38; 
....................          f = 0x39; 
....................          g = 0x3A; 
....................          h = 0x3B; 
....................          //k = 0x54; 
....................          break; 
....................       case PROGRAM6: 
....................          a = 0x14; 
....................          b = 0x15; 
....................          e = 0x3C; 
....................          f = 0x3D; 
....................          g = 0x3E; 
....................          h = 0x3F;  
....................          //k = 0x55; 
....................          break; 
....................       case PROGRAM7: 
....................          a = 0x18; 
....................          b = 0x19; 
....................          e = 0x40; 
....................          f = 0x41; 
....................          g = 0x42; 
....................          h = 0x43;  
....................          //k = 0x56;  
....................          break; 
....................       case PROGRAM8: 
....................          a = 0x20; 
....................          b = 0x21; 
....................          e = 0x44; 
....................          f = 0x45; 
....................          g = 0x46; 
....................          h = 0x47;   
....................          //k = 0x57; 
....................          break; 
....................       case PROGRAM9: 
....................          a = 0x24; 
....................          b = 0x25; 
....................          e = 0x48; 
....................          f = 0x49; 
....................          g = 0x4A; 
....................          h = 0x4B;  
....................          //k = 0x58;  
....................          break; 
....................       case PROGRAM10: 
....................          a = 0x28; 
....................          b = 0x29; 
....................          e = 0x4C; 
....................          f = 0x4D; 
....................          g = 0x4E; 
....................          h = 0x4F;  
....................          //k = 0x59; 
....................          break; 
....................    } 
....................    if (g_active_mode != MODE_STAND) { 
....................       hold_hour = read_eeprom(a); 
....................       hold_min = read_eeprom(b); 
....................       user_ster_time = (int16)hold_hour*60 + hold_min; 
....................       tmp_H = read_eeprom(e); 
....................       tmp_L = read_eeprom(f); 
....................       user_setpoint = (unsigned int16)(tmp_H)*0x100 + tmp_L; 
....................       tmp_H = read_eeprom(g); 
....................       tmp_L = read_eeprom(h); 
....................       user_protect = (unsigned int16)(tmp_H)*0x100 + tmp_L; 
....................    } 
....................    else { 
....................       switch (g_mode) { 
....................          case PROGRAM1: 
....................             user_setpoint = PROG1_SETPOINT; 
....................             user_protect = PROG1_PROTECT; 
....................             user_ster_time = PROG1_STER_TIME; 
....................          break; 
....................          case PROGRAM2: 
....................             user_setpoint = PROG2_SETPOINT; 
....................             user_protect = PROG2_PROTECT; 
....................             user_ster_time = PROG2_STER_TIME; 
....................          break; 
....................          case PROGRAM3: 
....................             user_setpoint = PROG3_SETPOINT; 
....................             user_protect = PROG3_PROTECT; 
....................             user_ster_time = PROG3_STER_TIME; 
....................          break; 
....................          case PROGRAM4: 
....................             user_setpoint = PROG4_SETPOINT; 
....................             user_protect = PROG4_PROTECT; 
....................             user_ster_time = PROG4_STER_TIME; 
....................          break; 
....................          case PROGRAM5: 
....................             user_setpoint = PROG5_SETPOINT; 
....................             user_protect = PROG5_PROTECT; 
....................             user_ster_time = PROG5_STER_TIME; 
....................          break; 
....................          case PROGRAM6: 
....................             user_setpoint = PROG6_SETPOINT; 
....................             user_protect = PROG6_PROTECT; 
....................             user_ster_time = PROG6_STER_TIME; 
....................          break; 
....................          case PROGRAM7: 
....................             user_setpoint = PROG7_SETPOINT; 
....................             user_protect = PROG7_PROTECT; 
....................             user_ster_time = PROG7_STER_TIME; 
....................          break; 
....................          case PROGRAM8: 
....................             user_setpoint = PROG8_SETPOINT; 
....................             user_protect = PROG8_PROTECT; 
....................             user_ster_time = PROG8_STER_TIME; 
....................          break; 
....................          case PROGRAM9: 
....................             user_setpoint = PROG9_SETPOINT; 
....................             user_protect = PROG9_PROTECT; 
....................             user_ster_time = PROG9_STER_TIME; 
....................          break; 
....................          case PROGRAM10: 
....................             user_setpoint = PROG10_SETPOINT; 
....................             user_protect = PROG10_PROTECT; 
....................             user_ster_time = PROG10_STER_TIME; 
....................          break; 
....................       } 
....................    } 
....................    Check_Data_Previous();*/ 
.................... } 
....................  
.................... void Load_Data_User(void) { 
....................    unsigned char tmp_H, tmp_L; 
....................    /*if(flag_day_hour == 1) { 
....................       hold_hour = read_eeprom(0x55); 
....................       hold_min = read_eeprom(0x56); 
....................       user_ster_time = (unsigned int16)hold_hour*60 + hold_min; 
....................    } 
....................    if(flag_day_hour == 0) { 
....................       user_day_ster_time = read_eeprom(0x51) * 10 + read_eeprom(0x52); 
....................       user_hour_ster_time = read_eeprom(0x53) * 10 + read_eeprom(0x54); 
....................       day_remain_time = user_day_ster_time; 
....................       hour_remain_time = user_hour_ster_time; 
....................       user_hold_time = user_day_ster_time*24*60 + user_hour_ster_time*60; 
....................    }*/ 
....................    // hold_hour = read_DS1307(0x55); 
....................    // hold_min = read_DS1307(0x56); 
....................    // user_ster_time = (unsigned int16)hold_hour*60 + hold_min; 
....................    // tmp_H = read_DS1307(0x16); 
....................    // tmp_L = read_DS1307(0x17); 
....................    // user_setpoint = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
....................    // if (user_setpoint > SETPOINT_MAX) 
....................    //    user_setpoint = SETPOINT_DEF; 
....................    // tmp_H = read_DS1307(0x18); 
....................    // tmp_L = read_DS1307(0x19); 
....................    // user_protect = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
....................    // if (user_protect > PROTECT_MAX) 
....................    //    user_protect = PROTECT_DEF; 
....................    hold_hour = read_eeprom(0x55); 
*
1FB6:  MOVFF  FF2,DE
1FBA:  BCF    FF2.7
1FBC:  MOVLW  55
1FBE:  MOVWF  FA9
1FC0:  BCF    FA6.6
1FC2:  BCF    FA6.7
1FC4:  BSF    FA6.0
1FC6:  MOVF   FA8,W
1FC8:  BTFSC  xDE.7
1FCA:  BSF    FF2.7
1FCC:  MOVWF  5F
....................    hold_min = read_eeprom(0x56); 
1FCE:  MOVFF  FF2,DE
1FD2:  BCF    FF2.7
1FD4:  MOVLW  56
1FD6:  MOVWF  FA9
1FD8:  BCF    FA6.6
1FDA:  BCF    FA6.7
1FDC:  BSF    FA6.0
1FDE:  MOVF   FA8,W
1FE0:  BTFSC  xDE.7
1FE2:  BSF    FF2.7
1FE4:  MOVWF  60
....................    user_ster_time = (unsigned int16)hold_hour*60 + hold_min; 
1FE6:  CLRF   xDF
1FE8:  MOVFF  5F,DE
1FEC:  MOVFF  DF,E1
1FF0:  MOVFF  5F,E0
1FF4:  CLRF   xE3
1FF6:  MOVLW  3C
1FF8:  MOVWF  xE2
1FFA:  CALL   15D0
1FFE:  MOVF   60,W
2000:  ADDWF  01,W
2002:  MOVWF  58
2004:  MOVLW  00
2006:  ADDWFC 02,W
2008:  MOVWF  59
....................    tmp_H = read_eeprom(0x51); 
200A:  MOVFF  FF2,DE
200E:  BCF    FF2.7
2010:  MOVLW  51
2012:  MOVWF  FA9
2014:  BCF    FA6.6
2016:  BCF    FA6.7
2018:  BSF    FA6.0
201A:  MOVF   FA8,W
201C:  BTFSC  xDE.7
201E:  BSF    FF2.7
2020:  MOVWF  xDC
....................    tmp_L = read_eeprom(0x52); 
2022:  MOVFF  FF2,DE
2026:  BCF    FF2.7
2028:  MOVLW  52
202A:  MOVWF  FA9
202C:  BCF    FA6.6
202E:  BCF    FA6.7
2030:  BSF    FA6.0
2032:  MOVF   FA8,W
2034:  BTFSC  xDE.7
2036:  BSF    FF2.7
2038:  MOVWF  xDD
....................    user_setpoint = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
203A:  MOVFF  DC,DE
203E:  CLRF   xDE
2040:  MOVF   xDD,W
2042:  ADDWF  xDE,W
2044:  MOVWF  52
2046:  MOVLW  00
2048:  ADDWFC xDC,W
204A:  MOVWF  53
....................    if (user_setpoint > SETPOINT_MAX) 
204C:  MOVF   53,W
204E:  SUBLW  60
2050:  BC    2064
2052:  XORLW  FF
2054:  BNZ   205C
2056:  MOVF   52,W
2058:  SUBLW  A8
205A:  BC    2064
....................       user_setpoint = SETPOINT_DEF; 
205C:  MOVLW  3A
205E:  MOVWF  53
2060:  MOVLW  98
2062:  MOVWF  52
....................    tmp_H = read_eeprom(0x53); 
2064:  MOVFF  FF2,DE
2068:  BCF    FF2.7
206A:  MOVLW  53
206C:  MOVWF  FA9
206E:  BCF    FA6.6
2070:  BCF    FA6.7
2072:  BSF    FA6.0
2074:  MOVF   FA8,W
2076:  BTFSC  xDE.7
2078:  BSF    FF2.7
207A:  MOVWF  xDC
....................    tmp_L = read_eeprom(0x54); 
207C:  MOVFF  FF2,DE
2080:  BCF    FF2.7
2082:  MOVLW  54
2084:  MOVWF  FA9
2086:  BCF    FA6.6
2088:  BCF    FA6.7
208A:  BSF    FA6.0
208C:  MOVF   FA8,W
208E:  BTFSC  xDE.7
2090:  BSF    FF2.7
2092:  MOVWF  xDD
....................    user_protect = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
2094:  MOVFF  DC,DE
2098:  CLRF   xDE
209A:  MOVF   xDD,W
209C:  ADDWF  xDE,W
209E:  MOVWF  54
20A0:  MOVLW  00
20A2:  ADDWFC xDC,W
20A4:  MOVWF  55
....................    if (user_protect > PROTECT_MAX) 
20A6:  MOVF   55,W
20A8:  SUBLW  78
20AA:  BC    20BE
20AC:  XORLW  FF
20AE:  BNZ   20B6
20B0:  MOVF   54,W
20B2:  SUBLW  18
20B4:  BC    20BE
....................       user_protect = PROTECT_DEF; 
20B6:  MOVLW  79
20B8:  MOVWF  55
20BA:  MOVLW  18
20BC:  MOVWF  54
20BE:  RETURN 0
.................... } 
....................  
.................... void Load_PID(void) 
.................... { 
....................    unsigned char  tmp_H, tmp_L; 
....................    if(setpoint < 20000) { 
*
1768:  MOVF   66,W
176A:  SUBLW  4E
176C:  BNC   17A8
176E:  BNZ   1776
1770:  MOVF   65,W
1772:  SUBLW  1F
1774:  BNC   17A8
....................       tmp_H = read_eeprom(0x30); 
1776:  MOVFF  FF2,DE
177A:  BCF    FF2.7
177C:  MOVLW  30
177E:  MOVWF  FA9
1780:  BCF    FA6.6
1782:  BCF    FA6.7
1784:  BSF    FA6.0
1786:  MOVF   FA8,W
1788:  BTFSC  xDE.7
178A:  BSF    FF2.7
178C:  MOVWF  xDC
....................       tmp_L = read_eeprom(0x31); 
178E:  MOVFF  FF2,DE
1792:  BCF    FF2.7
1794:  MOVLW  31
1796:  MOVWF  FA9
1798:  BCF    FA6.6
179A:  BCF    FA6.7
179C:  BSF    FA6.0
179E:  MOVF   FA8,W
17A0:  BTFSC  xDE.7
17A2:  BSF    FF2.7
17A4:  MOVWF  xDD
....................    } 
17A6:  BRA    17D8
....................    else { 
....................       tmp_H = read_eeprom(0x40); 
17A8:  MOVFF  FF2,DE
17AC:  BCF    FF2.7
17AE:  MOVLW  40
17B0:  MOVWF  FA9
17B2:  BCF    FA6.6
17B4:  BCF    FA6.7
17B6:  BSF    FA6.0
17B8:  MOVF   FA8,W
17BA:  BTFSC  xDE.7
17BC:  BSF    FF2.7
17BE:  MOVWF  xDC
....................       tmp_L = read_eeprom(0x41); 
17C0:  MOVFF  FF2,DE
17C4:  BCF    FF2.7
17C6:  MOVLW  41
17C8:  MOVWF  FA9
17CA:  BCF    FA6.6
17CC:  BCF    FA6.7
17CE:  BSF    FA6.0
17D0:  MOVF   FA8,W
17D2:  BTFSC  xDE.7
17D4:  BSF    FF2.7
17D6:  MOVWF  xDD
....................    } 
....................    pid_kp = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
17D8:  MOVFF  DC,DE
17DC:  CLRF   xDE
17DE:  MOVF   xDD,W
17E0:  ADDWF  xDE,W
17E2:  MOVWF  x83
17E4:  MOVLW  00
17E6:  ADDWFC xDC,W
17E8:  MOVWF  x84
....................    if (pid_kp > PID_KP_MAX) { 
17EA:  MOVF   x84,F
17EC:  BNZ   17F4
17EE:  MOVF   x83,W
17F0:  SUBLW  64
17F2:  BC    1810
....................       if(setpoint < 20000) { 
17F4:  MOVF   66,W
17F6:  SUBLW  4E
17F8:  BNC   180A
17FA:  BNZ   1802
17FC:  MOVF   65,W
17FE:  SUBLW  1F
1800:  BNC   180A
....................          pid_kp = PID_KP_DEF;  
1802:  CLRF   x84
1804:  MOVLW  3C
1806:  MOVWF  x83
....................       } 
1808:  BRA    1810
....................       else pid_kp = PID_KP_DEF1;  
180A:  CLRF   x84
180C:  MOVLW  41
180E:  MOVWF  x83
....................    } 
....................    // tmp_H = read_DS1307(0x12); 
....................    // tmp_L = read_DS1307(0x13); 
....................     
....................    if(setpoint < 20000) { 
1810:  MOVF   66,W
1812:  SUBLW  4E
1814:  BNC   1850
1816:  BNZ   181E
1818:  MOVF   65,W
181A:  SUBLW  1F
181C:  BNC   1850
....................       tmp_H = read_eeprom(0x32); 
181E:  MOVFF  FF2,DE
1822:  BCF    FF2.7
1824:  MOVLW  32
1826:  MOVWF  FA9
1828:  BCF    FA6.6
182A:  BCF    FA6.7
182C:  BSF    FA6.0
182E:  MOVF   FA8,W
1830:  BTFSC  xDE.7
1832:  BSF    FF2.7
1834:  MOVWF  xDC
....................       tmp_L = read_eeprom(0x33); 
1836:  MOVFF  FF2,DE
183A:  BCF    FF2.7
183C:  MOVLW  33
183E:  MOVWF  FA9
1840:  BCF    FA6.6
1842:  BCF    FA6.7
1844:  BSF    FA6.0
1846:  MOVF   FA8,W
1848:  BTFSC  xDE.7
184A:  BSF    FF2.7
184C:  MOVWF  xDD
....................    } 
184E:  BRA    1880
....................    else { 
....................       tmp_H = read_eeprom(0x42); 
1850:  MOVFF  FF2,DE
1854:  BCF    FF2.7
1856:  MOVLW  42
1858:  MOVWF  FA9
185A:  BCF    FA6.6
185C:  BCF    FA6.7
185E:  BSF    FA6.0
1860:  MOVF   FA8,W
1862:  BTFSC  xDE.7
1864:  BSF    FF2.7
1866:  MOVWF  xDC
....................       tmp_L = read_eeprom(0x43); 
1868:  MOVFF  FF2,DE
186C:  BCF    FF2.7
186E:  MOVLW  43
1870:  MOVWF  FA9
1872:  BCF    FA6.6
1874:  BCF    FA6.7
1876:  BSF    FA6.0
1878:  MOVF   FA8,W
187A:  BTFSC  xDE.7
187C:  BSF    FF2.7
187E:  MOVWF  xDD
....................    } 
....................    pid_ki = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
1880:  MOVFF  DC,DE
1884:  CLRF   xDE
1886:  MOVF   xDD,W
1888:  ADDWF  xDE,W
188A:  MOVWF  x85
188C:  MOVLW  00
188E:  ADDWFC xDC,W
1890:  MOVWF  x86
....................    if (pid_ki > PID_KI_MAX) { 
1892:  MOVF   x86,F
1894:  BNZ   189C
1896:  MOVF   x85,W
1898:  SUBLW  64
189A:  BC    18B8
....................       if(setpoint < 20000) { 
189C:  MOVF   66,W
189E:  SUBLW  4E
18A0:  BNC   18B2
18A2:  BNZ   18AA
18A4:  MOVF   65,W
18A6:  SUBLW  1F
18A8:  BNC   18B2
....................          pid_ki = PID_KI_DEF;  
18AA:  CLRF   x86
18AC:  MOVLW  37
18AE:  MOVWF  x85
....................       } 
18B0:  BRA    18B8
....................       else pid_ki = PID_KI_DEF1;  
18B2:  CLRF   x86
18B4:  MOVLW  41
18B6:  MOVWF  x85
....................    } 
....................    // tmp_H = read_DS1307(0x14); 
....................    // tmp_L = read_DS1307(0x15); 
....................     
....................    if(setpoint < 20000) { 
18B8:  MOVF   66,W
18BA:  SUBLW  4E
18BC:  BNC   18F8
18BE:  BNZ   18C6
18C0:  MOVF   65,W
18C2:  SUBLW  1F
18C4:  BNC   18F8
....................       tmp_H = read_eeprom(0x34); 
18C6:  MOVFF  FF2,DE
18CA:  BCF    FF2.7
18CC:  MOVLW  34
18CE:  MOVWF  FA9
18D0:  BCF    FA6.6
18D2:  BCF    FA6.7
18D4:  BSF    FA6.0
18D6:  MOVF   FA8,W
18D8:  BTFSC  xDE.7
18DA:  BSF    FF2.7
18DC:  MOVWF  xDC
....................       tmp_L = read_eeprom(0x35); 
18DE:  MOVFF  FF2,DE
18E2:  BCF    FF2.7
18E4:  MOVLW  35
18E6:  MOVWF  FA9
18E8:  BCF    FA6.6
18EA:  BCF    FA6.7
18EC:  BSF    FA6.0
18EE:  MOVF   FA8,W
18F0:  BTFSC  xDE.7
18F2:  BSF    FF2.7
18F4:  MOVWF  xDD
....................    } 
18F6:  BRA    1928
....................    else { 
....................       tmp_H = read_eeprom(0x44); 
18F8:  MOVFF  FF2,DE
18FC:  BCF    FF2.7
18FE:  MOVLW  44
1900:  MOVWF  FA9
1902:  BCF    FA6.6
1904:  BCF    FA6.7
1906:  BSF    FA6.0
1908:  MOVF   FA8,W
190A:  BTFSC  xDE.7
190C:  BSF    FF2.7
190E:  MOVWF  xDC
....................       tmp_L = read_eeprom(0x45); 
1910:  MOVFF  FF2,DE
1914:  BCF    FF2.7
1916:  MOVLW  45
1918:  MOVWF  FA9
191A:  BCF    FA6.6
191C:  BCF    FA6.7
191E:  BSF    FA6.0
1920:  MOVF   FA8,W
1922:  BTFSC  xDE.7
1924:  BSF    FF2.7
1926:  MOVWF  xDD
....................    } 
....................    pid_kd = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
1928:  MOVFF  DC,DE
192C:  CLRF   xDE
192E:  MOVF   xDD,W
1930:  ADDWF  xDE,W
1932:  MOVWF  x87
1934:  MOVLW  00
1936:  ADDWFC xDC,W
1938:  MOVWF  x88
....................    if (pid_kd > PID_KD_MAX) { 
193A:  MOVF   x88,F
193C:  BNZ   1944
193E:  MOVF   x87,W
1940:  SUBLW  64
1942:  BC    1960
....................       if(setpoint < 20000) { 
1944:  MOVF   66,W
1946:  SUBLW  4E
1948:  BNC   195A
194A:  BNZ   1952
194C:  MOVF   65,W
194E:  SUBLW  1F
1950:  BNC   195A
....................          pid_kd = PID_KD_DEF;  
1952:  CLRF   x88
1954:  MOVLW  1C
1956:  MOVWF  x87
....................       } 
1958:  BRA    1960
....................       else pid_kd = PID_KD_DEF1;  
195A:  CLRF   x88
195C:  MOVLW  26
195E:  MOVWF  x87
....................    } 
1960:  RETURN 0
....................        
....................        
.................... } 
.................... void Load_Data(void) 
.................... { 
....................    unsigned char  tmp_H, tmp_L; 
....................    g_mode = read_DS1307(0x08); 
*
15EE:  MOVLW  08
15F0:  MOVWF  xDE
15F2:  RCALL  13E6
15F4:  MOVFF  01,3A
....................    wait_day = read_DS1307(0x1D); 
15F8:  MOVLW  1D
15FA:  MOVWF  xDE
15FC:  RCALL  13E6
15FE:  MOVFF  01,5E
....................    if (wait_day > 7) { 
1602:  MOVF   5E,W
1604:  SUBLW  07
1606:  BC    160A
....................          wait_day = 0; 
1608:  CLRF   5E
....................    } 
....................  
....................    wait_hour = read_DS1307(0x0A); 
160A:  MOVLW  0A
160C:  MOVWF  xDE
160E:  RCALL  13E6
1610:  MOVFF  01,5C
....................    wait_min = read_DS1307(0x0B); 
1614:  MOVLW  0B
1616:  MOVWF  xDE
1618:  RCALL  13E6
161A:  MOVFF  01,5D
....................    if ((24 > wait_hour) && (wait_min < 59)) { 
161E:  MOVF   5C,W
1620:  SUBLW  17
1622:  BNC   164E
1624:  MOVF   5D,W
1626:  SUBLW  3A
1628:  BNC   164E
....................       user_delay_time = (int16)wait_hour * 60 + wait_min; 
162A:  CLRF   xDF
162C:  MOVFF  5C,DE
1630:  MOVFF  DF,E1
1634:  MOVFF  5C,E0
1638:  CLRF   xE3
163A:  MOVLW  3C
163C:  MOVWF  xE2
163E:  RCALL  15D0
1640:  MOVF   5D,W
1642:  ADDWF  01,W
1644:  MOVWF  56
1646:  MOVLW  00
1648:  ADDWFC 02,W
164A:  MOVWF  57
....................       } 
164C:  BRA    1652
....................    else user_delay_time = 0; 
164E:  CLRF   57
1650:  CLRF   56
....................  
....................    // tmp_H = read_DS1307(0x10); 
....................    // tmp_L = read_DS1307(0x11); 
....................     
....................    // fan_speed = read_DS1307(0x1A); 
....................    fan_speed = read_eeprom(0x36); 
1652:  MOVFF  FF2,DE
1656:  BCF    FF2.7
1658:  MOVLW  36
165A:  MOVWF  FA9
165C:  BCF    FA6.6
165E:  BCF    FA6.7
1660:  BSF    FA6.0
1662:  MOVF   FA8,W
1664:  BTFSC  xDE.7
1666:  BSF    FF2.7
1668:  MOVWF  x8B
....................    if (fan_speed > FAN_SPEED_MAX || fan_speed < FAN_SPEED_MIN) 
166A:  MOVF   x8B,W
166C:  SUBLW  0A
166E:  BNC   1676
1670:  MOVF   x8B,W
1672:  SUBLW  04
1674:  BNC   167A
....................       fan_speed = FAN_SPEED_MAX; 
1676:  MOVLW  0A
1678:  MOVWF  x8B
....................  
....................    tmp_H = read_eeprom(0x07); 
167A:  MOVFF  FF2,DE
167E:  BCF    FF2.7
1680:  MOVLW  07
1682:  MOVWF  FA9
1684:  BCF    FA6.6
1686:  BCF    FA6.7
1688:  BSF    FA6.0
168A:  MOVF   FA8,W
168C:  BTFSC  xDE.7
168E:  BSF    FF2.7
1690:  MOVWF  xDC
....................    tmp_L = read_eeprom(0x08); 
1692:  MOVFF  FF2,DE
1696:  BCF    FF2.7
1698:  MOVLW  08
169A:  MOVWF  FA9
169C:  BCF    FA6.6
169E:  BCF    FA6.7
16A0:  BSF    FA6.0
16A2:  MOVF   FA8,W
16A4:  BTFSC  xDE.7
16A6:  BSF    FF2.7
16A8:  MOVWF  xDD
....................    seri = (unsigned int16)(tmp_H)*0x100 + tmp_L; 
16AA:  MOVFF  DC,DE
16AE:  CLRF   xDE
16B0:  MOVF   xDD,W
16B2:  ADDWF  xDE,W
16B4:  MOVWF  x96
16B6:  MOVLW  00
16B8:  ADDWFC xDC,W
16BA:  MOVWF  x97
....................    if (seri > 10000) { 
16BC:  MOVF   x97,W
16BE:  SUBLW  26
16C0:  BC    16D0
16C2:  XORLW  FF
16C4:  BNZ   16CC
16C6:  MOVF   x96,W
16C8:  SUBLW  10
16CA:  BC    16D0
....................       seri = 0; 
16CC:  CLRF   x97
16CE:  CLRF   x96
....................    } 
....................  
....................    tmp_H = read_eeprom(0x1B); 
16D0:  MOVFF  FF2,DE
16D4:  BCF    FF2.7
16D6:  MOVLW  1B
16D8:  MOVWF  FA9
16DA:  BCF    FA6.6
16DC:  BCF    FA6.7
16DE:  BSF    FA6.0
16E0:  MOVF   FA8,W
16E2:  BTFSC  xDE.7
16E4:  BSF    FF2.7
16E6:  MOVWF  xDC
....................    tmp_L = read_eeprom(0x1C); 
16E8:  MOVFF  FF2,DE
16EC:  BCF    FF2.7
16EE:  MOVLW  1C
16F0:  MOVWF  FA9
16F2:  BCF    FA6.6
16F4:  BCF    FA6.7
16F6:  BSF    FA6.0
16F8:  MOVF   FA8,W
16FA:  BTFSC  xDE.7
16FC:  BSF    FF2.7
16FE:  MOVWF  xDD
....................    temp_offset = (unsigned int16)(tmp_H) * 0x100 + tmp_L; 
1700:  MOVFF  DC,DE
1704:  CLRF   xDE
1706:  MOVF   xDD,W
1708:  ADDWF  xDE,W
170A:  MOVWF  01
170C:  MOVLW  00
170E:  ADDWFC xDC,W
1710:  MOVFF  01,A5
1714:  MOVWF  xA6
....................    if ((temp_offset > OFFSET_TEMP_RANGE)||(temp_offset < -OFFSET_TEMP_RANGE)) 
1716:  BTFSC  xA6.7
1718:  BRA    172A
171A:  MOVF   xA6,W
171C:  SUBLW  0A
171E:  BC    172A
1720:  XORLW  FF
1722:  BNZ   173C
1724:  MOVF   xA5,W
1726:  SUBLW  B8
1728:  BNC   173C
172A:  BTFSS  xA6.7
172C:  BRA    1740
172E:  MOVF   xA6,W
1730:  SUBLW  F4
1732:  BNC   1740
1734:  BNZ   173C
1736:  MOVF   xA5,W
1738:  SUBLW  47
173A:  BNC   1740
....................       temp_offset = 0; 
173C:  CLRF   xA6
173E:  CLRF   xA5
....................     
....................    flag_day_hour = read_eeprom(0x50); 
1740:  MOVFF  FF2,DE
1744:  BCF    FF2.7
1746:  MOVLW  50
1748:  MOVWF  FA9
174A:  BCF    FA6.6
174C:  BCF    FA6.7
174E:  BSF    FA6.0
1750:  MOVF   FA8,W
1752:  BTFSC  xDE.7
1754:  BSF    FF2.7
1756:  MOVWF  xBF
....................    if(flag_day_hour != 0 && flag_day_hour != 1) flag_day_hour = 0; 
1758:  MOVF   xBF,F
175A:  BZ    1764
175C:  DECFSZ xBF,W
175E:  BRA    1762
1760:  BRA    1764
1762:  CLRF   xBF
1764:  GOTO   226E (RETURN)
.................... } 
....................  
.................... #endif   // #define _DS1307_H_ 
....................  
.................... #include "cap1188.h" 
.................... #ifndef _CAP1188_H_ 
.................... #define _CAP1188_H_ 
....................  
.................... #include "globals.h" 
.................... #ifndef _GLOBALS_H_ 
.................... #define _GLOBALS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... typedef union _ADC_DATA_TYPE 
.................... { 
....................    signed int32 whole; 
....................    unsigned char bytes[4]; 
.................... }ADC_DATA_TYPE; 
....................  
.................... typedef enum { 
....................    SIGN_SENSOR_BROKEN, 
....................    SIGN_TEMP_OVERLOAD, 
....................    SIGN_SET_PID_KP, 
....................    SIGN_SET_PID_KI, 
....................    SIGN_SET_PID_KD, 
....................    SIGN_PROCESS_END, 
....................    SIGN_CN, 
....................    SIGN_T2, 
....................    SIGN_T3, 
....................    SIGN_T4, 
....................    SIGN_T5, 
....................    SIGN_T6, 
....................    SIGN_T7, 
....................    SIGN_ALL, 
....................    SIGN_BLANK, 
.................... } SIGN_CODE; 
....................  
.................... typedef enum { 
....................    STATE_KEY_IDLE, 
....................    STATE_KEY_PRESSED, 
....................    STATE_KEY_HOLD, 
.................... } KEY_STATE_; 
....................  
.................... typedef enum _STATE { 
....................    ST_INVALID, 
....................    ST_IDLE, 
....................    ST_SET_PROGRAM, 
....................    ST_SET_DAY_OF_WEEK, 
....................    ST_SET_HOUR, 
....................    ST_SET_MINUTE, 
....................    ST_SET_TIME_STER_DRY, 
....................    ST_SET_SETPOINT, 
....................    ST_SET_PROTECT, 
....................    ST_SET_TIME_DELAY, 
....................    ST_SET_WAIT_TIME, 
....................    ST_SET_HOLD_TIME, 
....................    ST_DIS_TIME_DAY_HOUR, 
....................    ST_DIS_TIME_HOUR_MIN, 
....................    ST_SET_TIME_DAY_HOUR, 
....................    ST_SET_TIME_HOUR_MIN, 
....................    ST_SET_TIMER, 
....................    ST_SET_PASS, 
....................    ST_SAVE_PASS, 
....................    ST_CHECK_PASS, 
....................    ST_SET_SERI, 
....................    ST_SET_PID_KP, 
....................    ST_SET_PID_KI, 
....................    ST_SET_PID_KD, 
....................    ST_SET_OFFSET, 
....................    ST_RUN_WAITING_TIME, 
....................    ST_RUN_HEATING_TIME, 
....................    ST_RUN_HOLDING_TIME, 
....................    ST_RUN_COOLING_TIME, 
....................    ST_COMPLETED, 
....................    ST_ERR, 
....................    TOTAL_NUMBER_OF_STATE, 
.................... } STATE; 
....................  
.................... typedef enum _SET { 
....................    SET_NONE, 
....................    SET_PROGRAM_USER, 
....................    SET_TIME_REAL_TIME_CLOCK, 
....................    SET_TIME_CLOCK, 
....................    SET_DONE, 
.................... } SET; 
....................  
.................... typedef enum _SET_TIME { 
....................    SET_TIME_DAY_HOUR, 
....................    SET_TIME_HOUR_MIN, 
....................    SET_TIME_DONE, 
....................  
.................... } SET_TIME; 
....................  
.................... typedef enum _WEEKDAY { 
....................    NULLDAY, 
....................    SUNDAY, 
....................    MONDAY, 
....................    TUESDAY, 
....................    WEDNESDAY, 
....................    THURSDAY, 
....................    FRIDAY, 
....................    SATURDAY, 
....................    NONEDAY, 
.................... } WEEKDAY; 
....................  
.................... typedef enum _PROCESS_PHASE { 
....................    WAITING_PHASE, 
....................    HEAT_RISING_PHASE, 
....................    HEAT_HOLDING_PHASE, 
....................    HEAT_FALLING_PHASE, 
....................    IDLE_PHASE, 
.................... } PROCESS_PHASE; 
....................  
.................... typedef enum _OVEN_MODE { 
....................    NONE, 
....................    PROGRAM1, 
....................    PROGRAM2, 
....................    PROGRAM3, 
....................    PROGRAM4, 
....................    PROGRAM5, 
....................    PROGRAM6, 
....................    PROGRAM7, 
....................    PROGRAM8, 
....................    PROGRAM9, 
....................    PROGRAM10, 
....................    USER_MODE, 
.................... } OVEN_MODE; 
....................  
.................... typedef enum _FLAG_MODE { 
....................    MODE_STAND, 
....................    MODE_SET_1, 
....................    MODE_SET_2, 
....................    MODE_SET_3, 
....................    MODE_SET_4, 
....................    MODE_SET_5, 
....................    MODE_SET_6, 
....................    MODE_SET_7, 
....................    MODE_SET_8, 
....................    MODE_SET_9, 
....................    MODE_SET_10, 
.................... } FLAG_MODE; 
....................  
.................... #define TRIAC_CYCLE 555.0 
.................... #define TEMP_COEFF 0.652085      // 
.................... unsigned char led7[6][4]; 
.................... unsigned char led1[5]; 
.................... unsigned char temp_accum_count = 16; 
.................... STATE g_state; 
.................... STATE old_state; 
.................... OVEN_MODE g_mode = PROGRAM1; 
.................... SET g_set = SET_NONE; 
.................... //SET_TIME g_set_time; 
.................... //FLAG_MODE g_active_mode = MODE_STAND; 
....................  
.................... unsigned int16 timed_count_ms = 187;   //toggle every 1000 ms; 
.................... unsigned char pid_countdown = 0; 
.................... unsigned int16 spk_on_count; 
.................... int16    tmp_int16; 
.................... int8     key_state; 
.................... int8     key_flag = 0; 
.................... unsigned char key_code = 0; 
.................... unsigned char tmp = 0; 
.................... unsigned int8 touch_state1, touch_state2; 
.................... int16 key_hold_count, key_repeat_count; 
.................... #define KEY_HOLD_THRESHOLD (400) 
.................... #define KEY_REPEAT_TIME (10) 
....................  
.................... unsigned char sec, min, hour, day; 
.................... unsigned char last_min; 
....................  
.................... int16 user_setpoint = 15000; 
.................... int16 user_protect = 16000; 
.................... int16 user_delay_time = 15; 
.................... int16 user_ster_time = 90; 
.................... int16 i = 0; 
....................        
.................... unsigned char wait_hour, wait_min, wait_day; 
.................... unsigned char hold_hour, hold_min; 
....................  
.................... unsigned int16 password = 0, check_password = 0; 
.................... //unsigned int16 remain_time;      //unit is in minute! 
.................... unsigned int16 setpoint; 
.................... unsigned int16 protect; 
.................... unsigned int16 realTemp; 
.................... unsigned int16 t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0; 
.................... unsigned int16 t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0; 
.................... unsigned int16 delay_time; 
.................... unsigned int16 ster_time; 
.................... //unsigned int16 day_ster_time; 
.................... //unsigned int16 hour_ster_time; 
.................... //unsigned int16 user_day_ster_time; 
.................... //unsigned int16 user_hour_ster_time; 
.................... //unsigned int16 day_remain_time, hour_remain_time; 
.................... unsigned int16 pid_kp, pid_ki, pid_kd; 
.................... //unsigned int16 RTD_realTemp2; 
.................... //unsigned long long_ster_time, long_user_ster_time; 
.................... unsigned long remain_time; 
.................... //unsigned long user_hold_time; 
.................... //float TEMP_LOWER_FULLON_CORRECTION = 3000.0; 
....................  
.................... #define SETPOINT_MAX (25000) 
.................... #define SETPOINT_DEF (15000) 
.................... #define SETPOINT_MIN (1000) 
.................... #define PROTECT_MAX (31000) 
.................... #define PROTECT_DEF (31000) 
.................... #define PROTECT_MIN (1000) 
.................... #define FAN_SPEED_MAX (10) 
.................... #define FAN_SPEED_DEF (7) 
.................... #define FAN_SPEED_MIN (5) 
.................... #define DELAY_TIME_MAX (5999) 
.................... #define DELAY_TIME_DEF (0) 
.................... #define DELAY_TIME_MIN (0) 
.................... #define STER_TIME_MAX (5999) 
.................... #define STER_TIME_DEF (60) 
.................... #define STER_TIME_MIN (0) 
....................  
.................... #define PID_KP_MAX (100) 
.................... #define PID_KP_DEF (60) 
.................... #define PID_KP_MIN (0) 
.................... #define PID_KI_MAX (100) 
.................... #define PID_KI_DEF (55) 
.................... #define PID_KI_MIN (0) 
.................... #define PID_KD_MAX (100) 
.................... #define PID_KD_DEF (28) 
.................... #define PID_KD_MIN (0) 
....................  
.................... #define PID_KP_MAX1 (100) 
.................... #define PID_KP_DEF1 (65) 
.................... #define PID_KP_MIN1 (0) 
.................... #define PID_KI_MAX1 (100) 
.................... #define PID_KI_DEF1 (65) 
.................... #define PID_KI_MIN1 (0) 
.................... #define PID_KD_MAX1 (100) 
.................... #define PID_KD_DEF1 (38) 
.................... #define PID_KD_MIN1 (0) 
....................  
.................... #define PROG1_SETPOINT (12000) 
.................... #define PROG1_PROTECT (13000) 
.................... #define PROG1_DELAY_TIME (0) 
.................... #define PROG1_STER_TIME (90) 
.................... #define PROG2_SETPOINT (13000) 
.................... #define PROG2_PROTECT (14000) 
.................... #define PROG2_DELAY_TIME (0) 
.................... #define PROG2_STER_TIME (85) 
.................... #define PROG3_SETPOINT (14000) 
.................... #define PROG3_PROTECT (15000) 
.................... #define PROG3_DELAY_TIME (0) 
.................... #define PROG3_STER_TIME (80) 
.................... #define PROG4_SETPOINT (15000) 
.................... #define PROG4_PROTECT (16000) 
.................... #define PROG4_DELAY_TIME (0) 
.................... #define PROG4_STER_TIME (70) 
.................... #define PROG5_SETPOINT (16000) 
.................... #define PROG5_PROTECT (17000) 
.................... #define PROG5_DELAY_TIME (0) 
.................... #define PROG5_STER_TIME (60) 
.................... #define PROG6_SETPOINT (17000) 
.................... #define PROG6_PROTECT (18000) 
.................... #define PROG6_DELAY_TIME (0) 
.................... #define PROG6_STER_TIME (50) 
.................... #define PROG7_SETPOINT (18000) 
.................... #define PROG7_PROTECT (19000) 
.................... #define PROG7_DELAY_TIME (0) 
.................... #define PROG7_STER_TIME (45) 
.................... #define PROG8_SETPOINT (19000) 
.................... #define PROG8_PROTECT (20000) 
.................... #define PROG8_DELAY_TIME (0) 
.................... #define PROG8_STER_TIME (40) 
.................... #define PROG9_SETPOINT (20000) 
.................... #define PROG9_PROTECT (21000) 
.................... #define PROG9_DELAY_TIME (0) 
.................... #define PROG9_STER_TIME (35) 
.................... #define PROG10_SETPOINT (22000) 
.................... #define PROG10_PROTECT (23000) 
.................... #define PROG10_DELAY_TIME (0) 
.................... #define PROG10_STER_TIME (30) 
....................  
.................... #define BEEP_TIME (3) 
....................  
.................... #define OFFSET_TEMP_RANGE (3000) 
....................  
.................... #define MAX_TEMP_RANGE (32000) 
.................... //#define ADC_FILTER_COUNT (256) 
.................... #define ADC_FILTER_COUNT (16) 
....................  
.................... #define RTD_CONST (41876) 
....................  
.................... unsigned char  fan_speed = FAN_SPEED_MAX; 
.................... unsigned int16 triac_on_time1 = 0; 
.................... unsigned int16 triac_on_time_new1 = 0; 
.................... unsigned int16 triac_count1 = 0; 
.................... unsigned int16 triac_on_time2 = 0; 
.................... unsigned int16 triac_count2 = 0; 
....................  
.................... unsigned int16 seri = 0; 
.................... unsigned char adc_integ_count = 16; 
.................... signed int32 adc_integ_data; 
.................... signed int16 adc_data, adc_data_buff; 
.................... signed int16 env_temp; 
.................... signed int16 thermo_temp; 
.................... signed int16 temp_offset = 0; 
.................... signed int32 adc_value_ch0; 
.................... signed int32 adc_value_ch1; 
....................  
.................... float k_a, k_b, float_temp; 
....................  
.................... char fan_pos = 0; 
.................... char g_err_code = 0; 
.................... char fan_rol_count = 30; 
.................... char hour_min_flag = 1; 
.................... char flag_day_hour = 0; 
.................... char flag_Rs232 = 0; 
.................... char flag_Rs232_Ster = 0; 
.................... char flag_Rs232_Complete = 0; 
.................... char flag_Rs232_Err = 0; 
.................... char flag_Rs232_IDLE = 0; 
.................... char flag_Pre_Hold = 0; 
....................  
.................... unsigned char GLb_nCountAvrTemp = 0; 
....................  
.................... #endif // #define _GLOBALS_H_ 
....................  
....................  
.................... #use fast_io(C) 
....................  
.................... #define CAP_RESET    PIN_C0 
.................... #define CAP_CS1      PIN_D4 
.................... #define CAP_CS2      PIN_D5 
.................... #define CAP_CLK      PIN_C3 
.................... #define CAP_MOSI     PIN_C4 
.................... #define CAP_MISO     PIN_C5 
....................  
.................... #inline 
.................... void cap1188_reset(void) 
.................... { 
....................    output_low(CAP_CS1); 
*
0E36:  BCF    F8C.4
....................    output_low(CAP_RESET); 
0E38:  BCF    F8B.0
....................    delay_ms(10); 
0E3A:  MOVLW  0A
0E3C:  MOVWF  xDC
0E3E:  RCALL  0E0A
....................    output_high(CAP_RESET); 
0E40:  BSF    F8B.0
....................    delay_ms(100); 
0E42:  MOVLW  64
0E44:  MOVWF  xDC
0E46:  RCALL  0E0A
....................    output_low(CAP_RESET); 
0E48:  BCF    F8B.0
....................    delay_ms(1); 
0E4A:  MOVLW  01
0E4C:  MOVWF  xDC
0E4E:  RCALL  0E0A
....................    output_high(CAP_CS1); 
0E50:  BSF    F8C.4
....................    delay_ms(1); 
0E52:  MOVLW  01
0E54:  MOVWF  xDC
0E56:  RCALL  0E0A
....................    // 
....................    output_low(CAP_CS2); 
0E58:  BCF    F8C.5
....................    output_low(CAP_RESET); 
0E5A:  BCF    F8B.0
....................    delay_ms(10); 
0E5C:  MOVLW  0A
0E5E:  MOVWF  xDC
0E60:  RCALL  0E0A
....................    output_high(CAP_RESET); 
0E62:  BSF    F8B.0
....................    delay_ms(100); 
0E64:  MOVLW  64
0E66:  MOVWF  xDC
0E68:  RCALL  0E0A
....................    output_low(CAP_RESET); 
0E6A:  BCF    F8B.0
....................    delay_ms(1); 
0E6C:  MOVLW  01
0E6E:  MOVWF  xDC
0E70:  RCALL  0E0A
....................    output_high(CAP_CS2); 
0E72:  BSF    F8C.5
.................... } 
.................... /* 
.................... void cap1188_clr_int(void) 
.................... { 
....................     
.................... } 
....................  
.................... void cap1188_reset_interface(void) 
.................... {    
....................    output_low(CAP_CS1); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    output_low(CAP_CS2); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... void cap1188_set_address_ptr1(int8 adr) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_set_address_ptr2(int8 adr) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... */ 
.................... void cap1188_write_data1(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS1); 
*
00BC:  BCF    F8C.4
....................    delay_us(10); 
00BE:  MOVLW  1A
00C0:  MOVWF  00
00C2:  DECFSZ 00,F
00C4:  BRA    00C2
00C6:  NOP   
....................    spi_write(0x7D); 
00C8:  MOVF   FC9,W
00CA:  MOVLW  7D
00CC:  MOVWF  FC9
00CE:  RRCF   FC7,W
00D0:  BNC   00CE
....................    spi_write(addr); 
00D2:  MOVF   FC9,W
00D4:  MOVFF  106,FC9
00D8:  RRCF   FC7,W
00DA:  BNC   00D8
....................    delay_us(10); 
00DC:  MOVLW  1A
00DE:  MOVWF  00
00E0:  DECFSZ 00,F
00E2:  BRA    00E0
00E4:  NOP   
....................    spi_write(0x7E); 
00E6:  MOVF   FC9,W
00E8:  MOVLW  7E
00EA:  MOVWF  FC9
00EC:  RRCF   FC7,W
00EE:  BNC   00EC
....................    spi_write(data); 
00F0:  MOVF   FC9,W
00F2:  MOVFF  107,FC9
00F6:  RRCF   FC7,W
00F8:  BNC   00F6
....................    delay_us(10); 
00FA:  MOVLW  1A
00FC:  MOVWF  00
00FE:  DECFSZ 00,F
0100:  BRA    00FE
0102:  NOP   
....................    output_high(CAP_CS1); 
0104:  BSF    F8C.4
0106:  RETURN 0
.................... } 
....................  
.................... void cap1188_write_data2(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS2); 
0108:  BCF    F8C.5
....................    delay_us(10); 
010A:  MOVLW  1A
010C:  MOVWF  00
010E:  DECFSZ 00,F
0110:  BRA    010E
0112:  NOP   
....................    spi_write(0x7D); 
0114:  MOVF   FC9,W
0116:  MOVLW  7D
0118:  MOVWF  FC9
011A:  RRCF   FC7,W
011C:  BNC   011A
....................    spi_write(addr); 
011E:  MOVF   FC9,W
0120:  MOVFF  106,FC9
0124:  RRCF   FC7,W
0126:  BNC   0124
....................    delay_us(10); 
0128:  MOVLW  1A
012A:  MOVWF  00
012C:  DECFSZ 00,F
012E:  BRA    012C
0130:  NOP   
....................    spi_write(0x7E); 
0132:  MOVF   FC9,W
0134:  MOVLW  7E
0136:  MOVWF  FC9
0138:  RRCF   FC7,W
013A:  BNC   0138
....................    spi_write(data); 
013C:  MOVF   FC9,W
013E:  MOVFF  107,FC9
0142:  RRCF   FC7,W
0144:  BNC   0142
....................    delay_us(10); 
0146:  MOVLW  1A
0148:  MOVWF  00
014A:  DECFSZ 00,F
014C:  BRA    014A
014E:  NOP   
....................    output_high(CAP_CS2); 
0150:  BSF    F8C.5
0152:  RETURN 0
.................... } 
....................  
.................... int8 cap1188_read_data1(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS1); 
0154:  BCF    F8C.4
....................    delay_us(10); 
0156:  MOVLW  1A
0158:  MOVWF  00
015A:  DECFSZ 00,F
015C:  BRA    015A
015E:  NOP   
....................    spi_write(0x7D); 
0160:  MOVF   FC9,W
0162:  MOVLW  7D
0164:  MOVWF  FC9
0166:  RRCF   FC7,W
0168:  BNC   0166
....................    spi_write(addr); 
016A:  MOVF   FC9,W
016C:  MOVFF  106,FC9
0170:  RRCF   FC7,W
0172:  BNC   0170
....................    delay_us(10); 
0174:  MOVLW  1A
0176:  MOVWF  00
0178:  DECFSZ 00,F
017A:  BRA    0178
017C:  NOP   
....................    spi_write(0x7F); 
017E:  MOVF   FC9,W
0180:  MOVLW  7F
0182:  MOVWF  FC9
0184:  RRCF   FC7,W
0186:  BNC   0184
....................    data = spi_read(0x7F); 
0188:  MOVF   FC9,W
018A:  MOVLW  7F
018C:  MOVWF  FC9
018E:  RRCF   FC7,W
0190:  BNC   018E
0192:  MOVFF  FC9,107
....................    delay_us(10); 
0196:  MOVLW  1A
0198:  MOVWF  00
019A:  DECFSZ 00,F
019C:  BRA    019A
019E:  NOP   
....................    output_high(CAP_CS1); 
01A0:  BSF    F8C.4
....................    return data; 
01A2:  MOVLB  1
01A4:  MOVFF  107,01
01A8:  MOVLB  0
01AA:  RETURN 0
.................... } 
....................  
.................... int8 cap1188_read_data2(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS2); 
01AC:  BCF    F8C.5
....................    delay_us(10); 
01AE:  MOVLW  1A
01B0:  MOVWF  00
01B2:  DECFSZ 00,F
01B4:  BRA    01B2
01B6:  NOP   
....................    spi_write(0x7D); 
01B8:  MOVF   FC9,W
01BA:  MOVLW  7D
01BC:  MOVWF  FC9
01BE:  RRCF   FC7,W
01C0:  BNC   01BE
....................    spi_write(addr); 
01C2:  MOVF   FC9,W
01C4:  MOVFF  106,FC9
01C8:  RRCF   FC7,W
01CA:  BNC   01C8
....................    delay_us(10); 
01CC:  MOVLW  1A
01CE:  MOVWF  00
01D0:  DECFSZ 00,F
01D2:  BRA    01D0
01D4:  NOP   
....................    spi_write(0x7F); 
01D6:  MOVF   FC9,W
01D8:  MOVLW  7F
01DA:  MOVWF  FC9
01DC:  RRCF   FC7,W
01DE:  BNC   01DC
....................    data = spi_read(0x7F); 
01E0:  MOVF   FC9,W
01E2:  MOVLW  7F
01E4:  MOVWF  FC9
01E6:  RRCF   FC7,W
01E8:  BNC   01E6
01EA:  MOVFF  FC9,107
....................    delay_us(10); 
01EE:  MOVLW  1A
01F0:  MOVWF  00
01F2:  DECFSZ 00,F
01F4:  BRA    01F2
01F6:  NOP   
....................    output_high(CAP_CS2); 
01F8:  BSF    F8C.5
....................    return data; 
01FA:  MOVLB  1
01FC:  MOVFF  107,01
0200:  MOVLB  0
0202:  RETURN 0
.................... } 
.................... /* 
.................... void cap1188_disable_int(void) 
.................... { 
....................    cap1188_write_data1(0x27, 0x00); 
....................    cap1188_write_data2(0x27,0x00); 
.................... } 
....................  
.................... void cap1188_disable_ret(void) 
.................... { 
....................    cap1188_write_data1(0x28, 0x00); 
....................    cap1188_write_data2(0x28, 0x00); 
.................... } 
.................... */ 
.................... void cap1188_init(void) 
.................... { 
....................    delay_ms(100); 
*
0E30:  MOVLW  64
0E32:  MOVWF  xDC
0E34:  RCALL  0E0A
....................    cap1188_reset(); 
....................    delay_ms(100); 
*
0E74:  MOVLW  64
0E76:  MOVWF  xDC
0E78:  RCALL  0E0A
0E7A:  GOTO   20F6 (RETURN)
.................... } 
....................  
.................... /*void cap1188_clr_int1(void) 
.................... { 
....................    cap1188_write_data1(0, 0); 
.................... } 
....................  
.................... void cap1188_clr_int2(void) 
.................... { 
....................    cap1188_write_data2(0, 0); 
.................... }*/ 
....................  
.................... #endif   // #define _CAP1188_H_ 
....................  
....................  
....................  
.................... /* 
....................       4                 7 6 5 4 3 2 1 0 
....................     -----               0 1 0 1 1 1 1 1   0x5F --> 0 
....................    |     |              0 0 0 0 1 0 0 1   0x09 --> 1 
....................  6 |  7  |3             1 0 0 1 1 1 1 0   0x9E --> 2 
....................     -----               1 0 0 1 1 0 1 1   0x9B --> 3 
....................    |     |              1 1 0 0 1 0 0 1   0xC9 --> 4 
....................  2 |     |0             1 1 0 1 0 0 1 1   0xD3 --> 5 
....................     ----- o 5           1 1 0 1 0 1 1 1   0xD7 --> 6 
....................       1                 0 0 0 1 1 0 0 1   0x19 --> 7 
....................                         1 1 0 1 1 1 1 1   0xDF --> 8 
....................                         1 1 0 1 1 0 1 1   0xDB --> 9 
....................                         1 1 0 1 0 1 1 0   0xD6 --> E 
....................                         1 1 0 1 1 1 0 0   0xDC --> P 
....................                         0 1 0 0 0 1 0 0   0x44 --> I 
....................                         1 0 0 0 1 1 1 1   0x8F --> d 
....................                         1 0 0 0 0 1 0 1   0x85 --> n 
....................                         1 1 0 0 1 1 0 1    
.................... */ 
....................  
.................... static unsigned char index; 
....................  
.................... unsigned char Get7Seg(unsigned char key) { 
....................    switch (key) { 
*
14F4:  MOVF   xE7,W
14F6:  XORLW  00
14F8:  BZ    1520
14FA:  XORLW  01
14FC:  BZ    1526
14FE:  XORLW  03
1500:  BZ    152C
1502:  XORLW  01
1504:  BZ    1532
1506:  XORLW  07
1508:  BZ    1538
150A:  XORLW  01
150C:  BZ    153E
150E:  XORLW  03
1510:  BZ    1544
1512:  XORLW  01
1514:  BZ    154A
1516:  XORLW  0F
1518:  BZ    1550
151A:  XORLW  01
151C:  BZ    1556
151E:  BRA    155C
....................       case 0: 
....................          return 0x5F; 
1520:  MOVLW  5F
1522:  MOVWF  01
1524:  BRA    1560
....................       case 1: 
....................          return 0x09; 
1526:  MOVLW  09
1528:  MOVWF  01
152A:  BRA    1560
....................       case 2: 
....................          return 0x9E; 
152C:  MOVLW  9E
152E:  MOVWF  01
1530:  BRA    1560
....................       case 3: 
....................          return 0x9B; 
1532:  MOVLW  9B
1534:  MOVWF  01
1536:  BRA    1560
....................       case 4: 
....................          return 0xC9; 
1538:  MOVLW  C9
153A:  MOVWF  01
153C:  BRA    1560
....................       case 5: 
....................          return 0xD3; 
153E:  MOVLW  D3
1540:  MOVWF  01
1542:  BRA    1560
....................       case 6: 
....................          return 0xD7; 
1544:  MOVLW  D7
1546:  MOVWF  01
1548:  BRA    1560
....................       case 7: 
....................          return 0x19; 
154A:  MOVLW  19
154C:  MOVWF  01
154E:  BRA    1560
....................       case 8: 
....................          return 0xDF; 
1550:  MOVLW  DF
1552:  MOVWF  01
1554:  BRA    1560
....................       case 9: 
....................          return 0xDB; 
1556:  MOVLW  DB
1558:  MOVWF  01
155A:  BRA    1560
....................       default: 
....................          return 0x00;   //blank; 
155C:  MOVLW  00
155E:  MOVWF  01
....................    } 
1560:  RETURN 0
.................... } 
....................  
.................... unsigned char AddPoint(unsigned char key) { 
....................    return key | 0x20; 
*
3178:  MOVF   xE4,W
317A:  IORLW  20
317C:  MOVWF  01
317E:  RETURN 0
.................... } 
....................  
.................... void led_init(void) { 
....................    //Led7[0][0] = Get7Seg(0); Led7[0][1] = Get7Seg(1); Led7[0][2] = Get7Seg(2); Led7[0][3] = Get7Seg(3); 
....................    //Led7[1][0] = Get7Seg(3); Led7[1][1] = Get7Seg(4); Led7[1][2] = Get7Seg(5); Led7[1][3] = Get7Seg(6); 
....................    //Led7[2][0] = Get7Seg(6); Led7[2][1] = Get7Seg(7); Led7[2][2] = Get7Seg(8); Led7[2][3] = Get7Seg(9); 
....................    //Led1[0] = 0xA5; Led1[1] = 0xA5; Led1[2] = 0xA5; 
....................    // Setup realtime clock: 
....................    hour = read_ds1307(2); 
....................    sec = read_ds1307(0); 
....................    if (sec & 0x80) {   // If clock is disabled 
....................       hour = read_ds1307(2); 
....................       hour &= 0xBF;     // Turn on 24 hour mode 
....................       write_ds1307(2, hour); 
....................       write_ds1307(0,sec & 0x7F); // enable oscillator(bit 7 =0) 
....................    } 
.................... } 
....................  
.................... void sclk_out(void) { 
....................    output_low(PIN_A3); 
*
06A2:  BCF    F89.3
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_A3); 
06A4:  BSF    F89.3
06A6:  GOTO   06D0 (RETURN)
.................... } 
....................  
.................... void strb_out1(void) { 
....................    output_low(PIN_D1); 
*
06DA:  BCF    F8C.1
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D1); 
06DC:  BSF    F8C.1
06DE:  GOTO   0852 (RETURN)
.................... } 
....................  
.................... void strb_out2(void) { 
....................    output_low(PIN_D3); 
06E2:  BCF    F8C.3
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D3); 
06E4:  BSF    F8C.3
06E6:  GOTO   0854 (RETURN)
.................... } 
....................  
.................... void Byte_Out_All(int8 data1, int8 data2) { 
....................    char i; 
....................    for(i=0; i<8; i++){ 
*
06AA:  MOVLB  1
06AC:  CLRF   x08
06AE:  MOVF   x08,W
06B0:  SUBLW  07
06B2:  BNC   06D6
....................       output_bit(PIN_D0,shift_left(&data1,1,0)); 
06B4:  BCF    FD8.0
06B6:  RLCF   x06,F
06B8:  BC    06BE
06BA:  BCF    F8C.0
06BC:  BRA    06C0
06BE:  BSF    F8C.0
....................       output_bit(PIN_D2,shift_left(&data2,1,0)); 
06C0:  BCF    FD8.0
06C2:  RLCF   x07,F
06C4:  BC    06CA
06C6:  BCF    F8C.2
06C8:  BRA    06CC
06CA:  BSF    F8C.2
....................       sclk_out(); 
06CC:  MOVLB  0
06CE:  BRA    06A2
06D0:  MOVLB  1
06D2:  INCF   x08,F
06D4:  BRA    06AE
....................    } 
06D6:  MOVLB  0
06D8:  RETURN 0
.................... } 
....................  
.................... void Led_Scan(void){ 
....................    led1[0] &= 0x87; 
*
06EA:  MOVLW  87
06EC:  ANDWF  32,F
....................    switch(index) { 
06EE:  MOVF   xC7,W
06F0:  BZ    0710
06F2:  XORLW  01
06F4:  BZ    0736
06F6:  XORLW  03
06F8:  BZ    0760
06FA:  XORLW  01
06FC:  BZ    078A
06FE:  XORLW  07
0700:  BZ    07B4
0702:  XORLW  01
0704:  BTFSC  FD8.2
0706:  BRA    07DC
0708:  XORLW  03
070A:  BTFSC  FD8.2
070C:  BRA    0804
070E:  BRA    082C
....................       case 0: 
....................          index = 1; 
0710:  MOVLW  01
0712:  MOVWF  xC7
....................          led1[0] |= 0x20; 
0714:  BSF    32.5
....................          Byte_Out_All(led7[2][1], led1[0]); 
0716:  MOVFF  23,106
071A:  MOVFF  32,107
071E:  RCALL  06AA
....................          Byte_Out_All(led7[1][1], led1[1]); 
0720:  MOVFF  1F,106
0724:  MOVFF  33,107
0728:  RCALL  06AA
....................          Byte_Out_All(led7[0][1], led1[2]); 
072A:  MOVFF  1B,106
072E:  MOVFF  34,107
0732:  RCALL  06AA
....................          break; 
0734:  BRA    0850
....................       case 1: 
....................          index = 2; 
0736:  MOVLW  02
0738:  MOVWF  xC7
....................          led1[0] |= 0x10; 
073A:  BSF    32.4
....................          Byte_Out_All(led7[2][2], led1[0]); 
073C:  MOVFF  24,106
0740:  MOVFF  32,107
0744:  RCALL  06AA
....................          Byte_Out_All(led7[1][2], 0xFF); 
0746:  MOVFF  20,106
074A:  MOVLB  1
074C:  SETF   x07
074E:  MOVLB  0
0750:  RCALL  06AA
....................          Byte_Out_All(led7[0][2], 0xFF); 
0752:  MOVFF  1C,106
0756:  MOVLB  1
0758:  SETF   x07
075A:  MOVLB  0
075C:  RCALL  06AA
....................          break; 
075E:  BRA    0850
....................       case 2: 
....................          index = 3; 
0760:  MOVLW  03
0762:  MOVWF  xC7
....................          led1[0] |= 0x08; 
0764:  BSF    32.3
....................          Byte_Out_All(led7[2][3], led1[0]); 
0766:  MOVFF  25,106
076A:  MOVFF  32,107
076E:  RCALL  06AA
....................          Byte_Out_All(led7[1][3], 0xFF); 
0770:  MOVFF  21,106
0774:  MOVLB  1
0776:  SETF   x07
0778:  MOVLB  0
077A:  RCALL  06AA
....................          Byte_Out_All(led7[0][3], 0xFF); 
077C:  MOVFF  1D,106
0780:  MOVLB  1
0782:  SETF   x07
0784:  MOVLB  0
0786:  RCALL  06AA
....................          break; 
0788:  BRA    0850
....................       case 3: 
....................          index = 4; 
078A:  MOVLW  04
078C:  MOVWF  xC7
....................          led1[0] |= 0x40; 
078E:  BSF    32.6
....................          Byte_Out_All(led7[2][0], led1[0]); 
0790:  MOVFF  22,106
0794:  MOVFF  32,107
0798:  RCALL  06AA
....................          Byte_Out_All(led7[1][0], 0xFF); 
079A:  MOVFF  1E,106
079E:  MOVLB  1
07A0:  SETF   x07
07A2:  MOVLB  0
07A4:  RCALL  06AA
....................          Byte_Out_All(led7[0][0], 0xFF); 
07A6:  MOVFF  1A,106
07AA:  MOVLB  1
07AC:  SETF   x07
07AE:  MOVLB  0
07B0:  RCALL  06AA
....................          break; 
07B2:  BRA    0850
....................       case 4: 
....................          index = 5; 
07B4:  MOVLW  05
07B6:  MOVWF  xC7
....................          Byte_Out_All(led7[2][0], led1[0]); 
07B8:  MOVFF  22,106
07BC:  MOVFF  32,107
07C0:  RCALL  06AA
....................          Byte_Out_All(led7[1][0], 0xFF); 
07C2:  MOVFF  1E,106
07C6:  MOVLB  1
07C8:  SETF   x07
07CA:  MOVLB  0
07CC:  RCALL  06AA
....................          Byte_Out_All(led7[0][0], 0xFF); 
07CE:  MOVFF  1A,106
07D2:  MOVLB  1
07D4:  SETF   x07
07D6:  MOVLB  0
07D8:  RCALL  06AA
....................          break; 
07DA:  BRA    0850
....................       case 5: 
....................          index = 6; 
07DC:  MOVLW  06
07DE:  MOVWF  xC7
....................          Byte_Out_All(led7[2][0], led1[0]); 
07E0:  MOVFF  22,106
07E4:  MOVFF  32,107
07E8:  RCALL  06AA
....................          Byte_Out_All(led7[1][0], 0xFF); 
07EA:  MOVFF  1E,106
07EE:  MOVLB  1
07F0:  SETF   x07
07F2:  MOVLB  0
07F4:  RCALL  06AA
....................          Byte_Out_All(led7[0][0], 0xFF); 
07F6:  MOVFF  1A,106
07FA:  MOVLB  1
07FC:  SETF   x07
07FE:  MOVLB  0
0800:  RCALL  06AA
....................          break; 
0802:  BRA    0850
....................       case 6: 
....................          index = 7; 
0804:  MOVLW  07
0806:  MOVWF  xC7
....................          Byte_Out_All(led7[2][0], led1[0]); 
0808:  MOVFF  22,106
080C:  MOVFF  32,107
0810:  RCALL  06AA
....................          Byte_Out_All(led7[1][0], 0xFF); 
0812:  MOVFF  1E,106
0816:  MOVLB  1
0818:  SETF   x07
081A:  MOVLB  0
081C:  RCALL  06AA
....................          Byte_Out_All(led7[0][0], 0xFF); 
081E:  MOVFF  1A,106
0822:  MOVLB  1
0824:  SETF   x07
0826:  MOVLB  0
0828:  RCALL  06AA
....................          break; 
082A:  BRA    0850
....................       default: 
....................          index = 0; 
082C:  CLRF   xC7
....................          Byte_Out_All(led7[2][0], led1[0]); 
082E:  MOVFF  22,106
0832:  MOVFF  32,107
0836:  RCALL  06AA
....................          Byte_Out_All(led7[1][0], 0xFF); 
0838:  MOVFF  1E,106
083C:  MOVLB  1
083E:  SETF   x07
0840:  MOVLB  0
0842:  RCALL  06AA
....................          Byte_Out_All(led7[0][0], 0xFF); 
0844:  MOVFF  1A,106
0848:  MOVLB  1
084A:  SETF   x07
084C:  MOVLB  0
084E:  RCALL  06AA
....................          //led1[0] |= 0x40; 
....................          break; 
....................    } 
....................    strb_out1(); 
0850:  BRA    06DA
....................    strb_out2(); 
0852:  BRA    06E2
0854:  GOTO   0B5E (RETURN)
.................... } 
....................  
.................... void SpeakerOn(void) { 
....................    Led1[0] &= 0x7F; 
*
00AE:  BCF    32.7
00B0:  GOTO   086A (RETURN)
.................... } 
....................  
.................... void SpeakerOff(void) { 
....................    spk_on_count = 0; 
00B4:  CLRF   40
00B6:  CLRF   3F
....................    Led1[0] |= 0x80; 
00B8:  BSF    32.7
00BA:  RETURN 0
.................... } 
....................  
.................... void LedClockOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
*
15CA:  BCF    34.0
15CC:  GOTO   225E (RETURN)
.................... } 
....................  
.................... void LedClockOff(void) { 
....................    Led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedSetTempOn(void) 
.................... { 
....................    led1[1] &= 0xFE; 
*
4578:  BCF    33.0
457A:  RETURN 0
.................... } 
....................  
.................... void LedSetTempOff(void) { 
....................    Led1[1] |= 0x01; 
*
0004:  BSF    33.0
0006:  RETURN 0
.................... } 
....................  
.................... void LedProtectTempOn(void) 
.................... { 
....................    led1[1] &= 0xFD; 
*
4BAC:  BCF    33.1
4BAE:  RETURN 0
.................... } 
....................  
.................... void LedProtectTempOff(void) { 
....................    Led1[1] |= 0x02; 
*
3C5A:  BSF    33.1
3C5C:  RETURN 0
.................... } 
....................  
.................... void LedTimeDelayOn(void) 
.................... { 
....................    led1[1] &= 0xFB; 
*
4BB0:  BCF    33.2
4BB2:  GOTO   4E7A (RETURN)
.................... } 
....................  
.................... void LedTimeDelayOff(void) { 
....................    Led1[1] |= 0x04; 
*
3C5E:  BSF    33.2
3C60:  RETURN 0
.................... } 
....................  
.................... void LedTimeSterOn(void) 
.................... { 
....................    led1[1] &= 0xF7; 
*
457C:  BCF    33.3
457E:  RETURN 0
.................... } 
....................  
.................... void LedTimeSterOff(void) { 
....................    Led1[1] |= 0x08; 
*
3C62:  BSF    33.3
3C64:  RETURN 0
.................... } 
....................  
.................... //============================================================================== 
....................  
.................... void LedTimeOn(void) 
.................... { 
....................    led1[4] &= 0x7F; 
.................... } 
....................  
.................... void LedTimeOff(void) 
.................... { 
....................    led1[4] |= 0x80; 
.................... } 
....................  
.................... void LedHeaterOn(void) 
.................... { 
....................    led1[3] &= 0xDF; 
*
6696:  BCF    35.5
6698:  GOTO   66F0 (RETURN)
.................... } 
....................  
.................... void LedHeaterOff(void) 
.................... { 
....................    led1[3] |= 0x20; 
669C:  BSF    35.5
669E:  GOTO   6746 (RETURN)
.................... } 
....................  
.................... void LedAlarmOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
.................... } 
....................  
.................... void LedAlarmOff(void) 
.................... { 
....................    led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedIconOn(void) 
.................... { 
....................    led1[2] &= 0xFD; 
.................... } 
....................  
.................... void LedMaxOn(void) 
.................... { 
....................    led1[2] &= 0xFB; 
.................... } 
.................... void LedMaxOff(void) 
.................... { 
....................    led1[2] |= 0x04; 
.................... } 
....................  
.................... void LedTempOn(void) 
.................... { 
....................    led1[3] &= 0xBF; 
.................... } 
....................  
.................... void LedTempOff(void) 
.................... { 
....................    led1[3] |= 0x40; 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
.................... /*void Led_1CDEF8_Off(void) { 
....................    //Led1 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
....................    //LedCDEF8 off: 
....................    tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x0E; 
....................    cap1188_write_data2(0x74, tmp); 
.................... }*/ 
.................... void Led_Prog_Off(void) { 
*
1962:  CLRF   19
1964:  BTFSC  FF2.7
1966:  BSF    19.7
1968:  BCF    FF2.7
196A:  MOVLW  74
196C:  MOVLB  1
196E:  MOVWF  x06
1970:  MOVLB  0
1972:  CALL   0154
1976:  BTFSC  19.7
1978:  BSF    FF2.7
197A:  MOVFF  01,DC
....................    //Led 1,2,3,4,5,6,7,8 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x00; 
197E:  CLRF   xDC
1980:  CLRF   19
1982:  BTFSC  FF2.7
1984:  BSF    19.7
1986:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1988:  MOVLW  74
198A:  MOVLB  1
198C:  MOVWF  x06
198E:  MOVFF  DC,107
1992:  MOVLB  0
1994:  CALL   00BC
1998:  BTFSC  19.7
199A:  BSF    FF2.7
199C:  CLRF   19
199E:  BTFSC  FF2.7
19A0:  BSF    19.7
19A2:  BCF    FF2.7
....................    //Led 9,10 off: 
....................    tmp = cap1188_read_data2(0x74); 
19A4:  MOVLW  74
19A6:  MOVLB  1
19A8:  MOVWF  x06
19AA:  MOVLB  0
19AC:  CALL   01AC
19B0:  BTFSC  19.7
19B2:  BSF    FF2.7
19B4:  MOVFF  01,DC
....................    tmp &= 0xC8; 
19B8:  MOVLW  C8
19BA:  ANDWF  xDC,F
19BC:  CLRF   19
19BE:  BTFSC  FF2.7
19C0:  BSF    19.7
19C2:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
19C4:  MOVLW  74
19C6:  MOVLB  1
19C8:  MOVWF  x06
19CA:  MOVFF  DC,107
19CE:  MOVLB  0
19D0:  CALL   0108
19D4:  BTFSC  19.7
19D6:  BSF    FF2.7
19D8:  RETURN 0
.................... } 
....................  
.................... void Led_0_On(void) 
19DA:  CLRF   19
19DC:  BTFSC  FF2.7
19DE:  BSF    19.7
19E0:  BCF    FF2.7
19E2:  MOVLW  74
19E4:  MOVLB  1
19E6:  MOVWF  x06
19E8:  MOVLB  0
19EA:  CALL   0154
19EE:  BTFSC  19.7
19F0:  BSF    FF2.7
19F2:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x01; 
19F6:  BSF    xDC.0
19F8:  CLRF   19
19FA:  BTFSC  FF2.7
19FC:  BSF    19.7
19FE:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1A00:  MOVLW  74
1A02:  MOVLB  1
1A04:  MOVWF  x06
1A06:  MOVFF  DC,107
1A0A:  MOVLB  0
1A0C:  CALL   00BC
1A10:  BTFSC  19.7
1A12:  BSF    FF2.7
1A14:  RETURN 0
.................... } 
.................... void Led_0_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_1_On(void) 
*
1B7A:  CLRF   19
1B7C:  BTFSC  FF2.7
1B7E:  BSF    19.7
1B80:  BCF    FF2.7
1B82:  MOVLW  74
1B84:  MOVLB  1
1B86:  MOVWF  x06
1B88:  MOVLB  0
1B8A:  CALL   0154
1B8E:  BTFSC  19.7
1B90:  BSF    FF2.7
1B92:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x02; 
1B96:  BSF    xDC.1
1B98:  CLRF   19
1B9A:  BTFSC  FF2.7
1B9C:  BSF    19.7
1B9E:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1BA0:  MOVLW  74
1BA2:  MOVLB  1
1BA4:  MOVWF  x06
1BA6:  MOVFF  DC,107
1BAA:  MOVLB  0
1BAC:  CALL   00BC
1BB0:  BTFSC  19.7
1BB2:  BSF    FF2.7
1BB4:  RETURN 0
.................... } 
....................  
.................... void Led_1_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_2_On(void) 
*
1BEC:  CLRF   19
1BEE:  BTFSC  FF2.7
1BF0:  BSF    19.7
1BF2:  BCF    FF2.7
1BF4:  MOVLW  74
1BF6:  MOVLB  1
1BF8:  MOVWF  x06
1BFA:  MOVLB  0
1BFC:  CALL   0154
1C00:  BTFSC  19.7
1C02:  BSF    FF2.7
1C04:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x04; 
1C08:  BSF    xDC.2
1C0A:  CLRF   19
1C0C:  BTFSC  FF2.7
1C0E:  BSF    19.7
1C10:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1C12:  MOVLW  74
1C14:  MOVLB  1
1C16:  MOVWF  x06
1C18:  MOVFF  DC,107
1C1C:  MOVLB  0
1C1E:  CALL   00BC
1C22:  BTFSC  19.7
1C24:  BSF    FF2.7
1C26:  RETURN 0
.................... } 
.................... void Led_2_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_3_On(void) 
*
1C5E:  CLRF   19
1C60:  BTFSC  FF2.7
1C62:  BSF    19.7
1C64:  BCF    FF2.7
1C66:  MOVLW  74
1C68:  MOVLB  1
1C6A:  MOVWF  x06
1C6C:  MOVLB  0
1C6E:  CALL   0154
1C72:  BTFSC  19.7
1C74:  BSF    FF2.7
1C76:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x08; 
1C7A:  BSF    xDC.3
1C7C:  CLRF   19
1C7E:  BTFSC  FF2.7
1C80:  BSF    19.7
1C82:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1C84:  MOVLW  74
1C86:  MOVLB  1
1C88:  MOVWF  x06
1C8A:  MOVFF  DC,107
1C8E:  MOVLB  0
1C90:  CALL   00BC
1C94:  BTFSC  19.7
1C96:  BSF    FF2.7
1C98:  RETURN 0
.................... } 
.................... void Led_3_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_4_On(void) 
*
1CD0:  CLRF   19
1CD2:  BTFSC  FF2.7
1CD4:  BSF    19.7
1CD6:  BCF    FF2.7
1CD8:  MOVLW  74
1CDA:  MOVLB  1
1CDC:  MOVWF  x06
1CDE:  MOVLB  0
1CE0:  CALL   0154
1CE4:  BTFSC  19.7
1CE6:  BSF    FF2.7
1CE8:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x10; 
1CEC:  BSF    xDC.4
1CEE:  CLRF   19
1CF0:  BTFSC  FF2.7
1CF2:  BSF    19.7
1CF4:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1CF6:  MOVLW  74
1CF8:  MOVLB  1
1CFA:  MOVWF  x06
1CFC:  MOVFF  DC,107
1D00:  MOVLB  0
1D02:  CALL   00BC
1D06:  BTFSC  19.7
1D08:  BSF    FF2.7
1D0A:  RETURN 0
.................... } 
.................... void Led_4_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xEF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_5_On(void) 
*
1D42:  CLRF   19
1D44:  BTFSC  FF2.7
1D46:  BSF    19.7
1D48:  BCF    FF2.7
1D4A:  MOVLW  74
1D4C:  MOVLB  1
1D4E:  MOVWF  x06
1D50:  MOVLB  0
1D52:  CALL   0154
1D56:  BTFSC  19.7
1D58:  BSF    FF2.7
1D5A:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x20; 
1D5E:  BSF    xDC.5
1D60:  CLRF   19
1D62:  BTFSC  FF2.7
1D64:  BSF    19.7
1D66:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1D68:  MOVLW  74
1D6A:  MOVLB  1
1D6C:  MOVWF  x06
1D6E:  MOVFF  DC,107
1D72:  MOVLB  0
1D74:  CALL   00BC
1D78:  BTFSC  19.7
1D7A:  BSF    FF2.7
1D7C:  RETURN 0
.................... } 
.................... void Led_5_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_6_On(void) 
*
1DB4:  CLRF   19
1DB6:  BTFSC  FF2.7
1DB8:  BSF    19.7
1DBA:  BCF    FF2.7
1DBC:  MOVLW  74
1DBE:  MOVLB  1
1DC0:  MOVWF  x06
1DC2:  MOVLB  0
1DC4:  CALL   0154
1DC8:  BTFSC  19.7
1DCA:  BSF    FF2.7
1DCC:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x40; 
1DD0:  BSF    xDC.6
1DD2:  CLRF   19
1DD4:  BTFSC  FF2.7
1DD6:  BSF    19.7
1DD8:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1DDA:  MOVLW  74
1DDC:  MOVLB  1
1DDE:  MOVWF  x06
1DE0:  MOVFF  DC,107
1DE4:  MOVLB  0
1DE6:  CALL   00BC
1DEA:  BTFSC  19.7
1DEC:  BSF    FF2.7
1DEE:  RETURN 0
.................... } 
.................... void Led_6_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_7_On(void) 
*
1E26:  CLRF   19
1E28:  BTFSC  FF2.7
1E2A:  BSF    19.7
1E2C:  BCF    FF2.7
1E2E:  MOVLW  74
1E30:  MOVLB  1
1E32:  MOVWF  x06
1E34:  MOVLB  0
1E36:  CALL   0154
1E3A:  BTFSC  19.7
1E3C:  BSF    FF2.7
1E3E:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x80; 
1E42:  BSF    xDC.7
1E44:  CLRF   19
1E46:  BTFSC  FF2.7
1E48:  BSF    19.7
1E4A:  BCF    FF2.7
....................    cap1188_write_data1(0x74, tmp); 
1E4C:  MOVLW  74
1E4E:  MOVLB  1
1E50:  MOVWF  x06
1E52:  MOVFF  DC,107
1E56:  MOVLB  0
1E58:  CALL   00BC
1E5C:  BTFSC  19.7
1E5E:  BSF    FF2.7
1E60:  RETURN 0
.................... } 
.................... void Led_7_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_8_On(void) 
*
1E98:  CLRF   19
1E9A:  BTFSC  FF2.7
1E9C:  BSF    19.7
1E9E:  BCF    FF2.7
1EA0:  MOVLW  74
1EA2:  MOVLB  1
1EA4:  MOVWF  x06
1EA6:  MOVLB  0
1EA8:  CALL   01AC
1EAC:  BTFSC  19.7
1EAE:  BSF    FF2.7
1EB0:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x01; 
1EB4:  BSF    xDC.0
1EB6:  CLRF   19
1EB8:  BTFSC  FF2.7
1EBA:  BSF    19.7
1EBC:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
1EBE:  MOVLW  74
1EC0:  MOVLB  1
1EC2:  MOVWF  x06
1EC4:  MOVFF  DC,107
1EC8:  MOVLB  0
1ECA:  CALL   0108
1ECE:  BTFSC  19.7
1ED0:  BSF    FF2.7
1ED2:  RETURN 0
.................... } 
.................... void Led_8_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_Dot_On(void)   //void Led_9_On(void) 
*
26F4:  CLRF   19
26F6:  BTFSC  FF2.7
26F8:  BSF    19.7
26FA:  BCF    FF2.7
26FC:  MOVLW  74
26FE:  MOVLB  1
2700:  MOVWF  x06
2702:  MOVLB  0
2704:  CALL   01AC
2708:  BTFSC  19.7
270A:  BSF    FF2.7
270C:  MOVFF  01,DE
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x02; 
2710:  BSF    xDE.1
2712:  CLRF   19
2714:  BTFSC  FF2.7
2716:  BSF    19.7
2718:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
271A:  MOVLW  74
271C:  MOVLB  1
271E:  MOVWF  x06
2720:  MOVFF  DE,107
2724:  MOVLB  0
2726:  CALL   0108
272A:  BTFSC  19.7
272C:  BSF    FF2.7
272E:  RETURN 0
.................... } 
.................... void Led_Dot_Off(void)  //void Led_9_Off(void) 
2730:  CLRF   19
2732:  BTFSC  FF2.7
2734:  BSF    19.7
2736:  BCF    FF2.7
2738:  MOVLW  74
273A:  MOVLB  1
273C:  MOVWF  x06
273E:  MOVLB  0
2740:  CALL   01AC
2744:  BTFSC  19.7
2746:  BSF    FF2.7
2748:  MOVFF  01,DE
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFD; 
274C:  BCF    xDE.1
274E:  CLRF   19
2750:  BTFSC  FF2.7
2752:  BSF    19.7
2754:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
2756:  MOVLW  74
2758:  MOVLB  1
275A:  MOVWF  x06
275C:  MOVFF  DE,107
2760:  MOVLB  0
2762:  CALL   0108
2766:  BTFSC  19.7
2768:  BSF    FF2.7
276A:  RETURN 0
.................... } 
.................... void Led_A_On(void) 
*
1F0A:  CLRF   19
1F0C:  BTFSC  FF2.7
1F0E:  BSF    19.7
1F10:  BCF    FF2.7
1F12:  MOVLW  74
1F14:  MOVLB  1
1F16:  MOVWF  x06
1F18:  MOVLB  0
1F1A:  CALL   01AC
1F1E:  BTFSC  19.7
1F20:  BSF    FF2.7
1F22:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x04; 
1F26:  BSF    xDC.2
1F28:  CLRF   19
1F2A:  BTFSC  FF2.7
1F2C:  BSF    19.7
1F2E:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
1F30:  MOVLW  74
1F32:  MOVLB  1
1F34:  MOVWF  x06
1F36:  MOVFF  DC,107
1F3A:  MOVLB  0
1F3C:  CALL   0108
1F40:  BTFSC  19.7
1F42:  BSF    FF2.7
1F44:  RETURN 0
.................... } 
.................... void Led_A_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x08; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_C_On(void) 
*
285C:  CLRF   19
285E:  BTFSC  FF2.7
2860:  BSF    19.7
2862:  BCF    FF2.7
2864:  MOVLW  74
2866:  MOVLB  1
2868:  MOVWF  x06
286A:  MOVLB  0
286C:  CALL   01AC
2870:  BTFSC  19.7
2872:  BSF    FF2.7
2874:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x10; 
2878:  BSF    xDC.4
287A:  CLRF   19
287C:  BTFSC  FF2.7
287E:  BSF    19.7
2880:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
2882:  MOVLW  74
2884:  MOVLB  1
2886:  MOVWF  x06
2888:  MOVFF  DC,107
288C:  MOVLB  0
288E:  CALL   0108
2892:  BTFSC  19.7
2894:  BSF    FF2.7
2896:  GOTO   28F8 (RETURN)
.................... } 
.................... void Led_C_Off(void) 
*
28AA:  CLRF   19
28AC:  BTFSC  FF2.7
28AE:  BSF    19.7
28B0:  BCF    FF2.7
28B2:  MOVLW  74
28B4:  MOVLB  1
28B6:  MOVWF  x06
28B8:  MOVLB  0
28BA:  CALL   01AC
28BE:  BTFSC  19.7
28C0:  BSF    FF2.7
28C2:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xEF; 
28C6:  BCF    xDC.4
28C8:  CLRF   19
28CA:  BTFSC  FF2.7
28CC:  BSF    19.7
28CE:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
28D0:  MOVLW  74
28D2:  MOVLB  1
28D4:  MOVWF  x06
28D6:  MOVFF  DC,107
28DA:  MOVLB  0
28DC:  CALL   0108
28E0:  BTFSC  19.7
28E2:  BSF    FF2.7
28E4:  GOTO   2926 (RETURN)
.................... } 
.................... void Led_D_On(void) 
*
1F7A:  CLRF   19
1F7C:  BTFSC  FF2.7
1F7E:  BSF    19.7
1F80:  BCF    FF2.7
1F82:  MOVLW  74
1F84:  MOVLB  1
1F86:  MOVWF  x06
1F88:  MOVLB  0
1F8A:  CALL   01AC
1F8E:  BTFSC  19.7
1F90:  BSF    FF2.7
1F92:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x20; 
1F96:  BSF    xDC.5
1F98:  CLRF   19
1F9A:  BTFSC  FF2.7
1F9C:  BSF    19.7
1F9E:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
1FA0:  MOVLW  74
1FA2:  MOVLB  1
1FA4:  MOVWF  x06
1FA6:  MOVFF  DC,107
1FAA:  MOVLB  0
1FAC:  CALL   0108
1FB0:  BTFSC  19.7
1FB2:  BSF    FF2.7
1FB4:  RETURN 0
.................... } 
.................... void Led_D_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_E_On(void) 
*
4BF4:  CLRF   19
4BF6:  BTFSC  FF2.7
4BF8:  BSF    19.7
4BFA:  BCF    FF2.7
4BFC:  MOVLW  74
4BFE:  MOVLB  1
4C00:  MOVWF  x06
4C02:  MOVLB  0
4C04:  CALL   01AC
4C08:  BTFSC  19.7
4C0A:  BSF    FF2.7
4C0C:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x40; 
4C10:  BSF    xDC.6
4C12:  CLRF   19
4C14:  BTFSC  FF2.7
4C16:  BSF    19.7
4C18:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
4C1A:  MOVLW  74
4C1C:  MOVLB  1
4C1E:  MOVWF  x06
4C20:  MOVFF  DC,107
4C24:  MOVLB  0
4C26:  CALL   0108
4C2A:  BTFSC  19.7
4C2C:  BSF    FF2.7
4C2E:  GOTO   518E (RETURN)
.................... } 
.................... void Led_E_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_F_On(void) 
*
4BB6:  CLRF   19
4BB8:  BTFSC  FF2.7
4BBA:  BSF    19.7
4BBC:  BCF    FF2.7
4BBE:  MOVLW  74
4BC0:  MOVLB  1
4BC2:  MOVWF  x06
4BC4:  MOVLB  0
4BC6:  CALL   01AC
4BCA:  BTFSC  19.7
4BCC:  BSF    FF2.7
4BCE:  MOVFF  01,DC
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x80; 
4BD2:  BSF    xDC.7
4BD4:  CLRF   19
4BD6:  BTFSC  FF2.7
4BD8:  BSF    19.7
4BDA:  BCF    FF2.7
....................    cap1188_write_data2(0x74, tmp); 
4BDC:  MOVLW  74
4BDE:  MOVLB  1
4BE0:  MOVWF  x06
4BE2:  MOVFF  DC,107
4BE6:  MOVLB  0
4BE8:  CALL   0108
4BEC:  BTFSC  19.7
4BEE:  BSF    FF2.7
4BF0:  GOTO   517A (RETURN)
.................... } 
.................... void Led_F_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
....................  
.................... void Beep(unsigned int16 duration) 
.................... { 
....................    spk_on_count = duration; 
*
22EA:  MOVFF  DD,40
22EE:  MOVFF  DC,3F
22F2:  RETURN 0
.................... } 
.................... /* 
.................... void ClrLed7(unsigned char mon) 
.................... { 
....................    Led7[mon][0] = 0x00;  //clear led 
....................    Led7[mon][1] = 0x00; 
....................    Led7[mon][2] = 0x00; 
....................    Led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... void SetDate(WEEKDAY date) { 
....................    unsigned char tmp; 
....................    tmp = led1[2]; 
*
1482:  MOVFF  34,DD
....................    if ((SUNDAY <= date)&&(date <= SATURDAY)) { 
1486:  MOVF   xDC,W
1488:  SUBLW  00
148A:  BC    14C4
148C:  MOVF   xDC,W
148E:  SUBLW  07
1490:  BNC   14C4
....................       tmp |= 0xFE;  // Turn off all leds for date indicator 
1492:  MOVLW  FE
1494:  IORWF  xDD,F
....................       switch(date) 
1496:  MOVLW  01
1498:  SUBWF  xDC,W
149A:  ADDLW  F9
149C:  BC    14BE
149E:  ADDLW  07
14A0:  GOTO   14CC
....................       { 
....................          case SUNDAY: 
....................             tmp &= 0xFD; 
14A4:  BCF    xDD.1
....................             break; 
14A6:  BRA    14BE
....................          case MONDAY: 
....................             tmp &= 0xFB; 
14A8:  BCF    xDD.2
....................             break; 
14AA:  BRA    14BE
....................          case TUESDAY: 
....................             tmp &= 0xF7; 
14AC:  BCF    xDD.3
....................             break; 
14AE:  BRA    14BE
....................          case WEDNESDAY: 
....................             tmp &= 0xEF; 
14B0:  BCF    xDD.4
....................             break; 
14B2:  BRA    14BE
....................          case THURSDAY: 
....................             tmp &= 0xDF; 
14B4:  BCF    xDD.5
....................             break; 
14B6:  BRA    14BE
....................          case FRIDAY: 
....................             tmp &= 0xBF; 
14B8:  BCF    xDD.6
....................             break; 
14BA:  BRA    14BE
....................          case SATURDAY: 
....................             tmp &= 0x7F; 
14BC:  BCF    xDD.7
....................             break; 
....................       } 
....................       led1[2] = tmp; 
14BE:  MOVFF  DD,34
....................    } else { 
14C2:  BRA    14C8
....................       led1[2] |= 0xFE; 
14C4:  MOVLW  FE
14C6:  IORWF  34,F
....................    } 
14C8:  GOTO   1574 (RETURN)
.................... } 
.................... /* 
.................... void PutDay(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
....................    SetDate((WEEKDAY)(day)); 
.................... } 
.................... */ 
.................... void PutDateTime(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
*
1562:  MOVLW  03
1564:  MOVWF  xDE
1566:  RCALL  13E6
1568:  MOVF   01,W
156A:  ANDLW  07
156C:  MOVWF  50
....................    SetDate((WEEKDAY)(day)); 
156E:  MOVFF  50,DC
1572:  BRA    1482
....................    hour = read_ds1307(2);   // hour 
1574:  MOVLW  02
1576:  MOVWF  xDE
1578:  RCALL  13E6
157A:  MOVFF  01,4F
....................    led7[0][0] = Get7Seg(hour/0x10); 
157E:  SWAPF  4F,W
1580:  MOVWF  xDC
1582:  MOVLW  0F
1584:  ANDWF  xDC,F
1586:  MOVFF  DC,E7
158A:  RCALL  14F4
158C:  MOVFF  01,1A
....................    led7[0][1] = Get7Seg(hour&0x0F); 
1590:  MOVF   4F,W
1592:  ANDLW  0F
1594:  MOVWF  xDC
1596:  MOVWF  xE7
1598:  RCALL  14F4
159A:  MOVFF  01,1B
....................    min = read_ds1307(1);   // min 
159E:  MOVLW  01
15A0:  MOVWF  xDE
15A2:  RCALL  13E6
15A4:  MOVFF  01,4E
....................    led7[0][2] = Get7Seg(min/0x10); 
15A8:  SWAPF  4E,W
15AA:  MOVWF  xDC
15AC:  MOVLW  0F
15AE:  ANDWF  xDC,F
15B0:  MOVFF  DC,E7
15B4:  RCALL  14F4
15B6:  MOVFF  01,1C
....................    led7[0][3] = Get7Seg(min&0x0F); 
15BA:  MOVF   4E,W
15BC:  ANDLW  0F
15BE:  MOVWF  xDC
15C0:  MOVWF  xE7
15C2:  RCALL  14F4
15C4:  MOVFF  01,1D
15C8:  RETURN 0
.................... } 
.................... /* 
.................... void PutTime(unsigned char mon, unsigned char hour, unsigned char min) 
.................... { 
....................    led7[mon][0] = Get7Seg(hour/0x10); 
....................    led7[mon][1] = AddPoint(Get7Seg(hour&0x0F)); 
....................    led7[mon][2] = Get7Seg(min/0x10); 
....................    led7[mon][3] = Get7Seg(min&0x0F); 
.................... } 
.................... */ 
.................... void PutTime_DayHour(unsigned char mon, unsigned int16 time1, unsigned int16 time2) 
.................... { 
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(time1/10); 
....................       led7[mon][1] = AddPoint(Get7Seg(time1%10)); 
....................       led7[mon][2] = Get7Seg(time2/10); 
....................       led7[mon][3] = AddPoint(Get7Seg(time2%10)); 
.................... } 
....................  
.................... void PutTime_One(unsigned char mon, int16 time) 
.................... { 
....................    int8 hour, min; 
....................    hour = time / 60; 
*
4A4E:  MOVFF  DE,E6
4A52:  MOVFF  DD,E5
4A56:  CLRF   xE8
4A58:  MOVLW  3C
4A5A:  MOVWF  xE7
4A5C:  CALL   22F4
4A60:  MOVFF  01,DF
....................    min = time % 60; 
4A64:  MOVFF  DE,E6
4A68:  MOVFF  DD,E5
4A6C:  CLRF   xE8
4A6E:  MOVLW  3C
4A70:  MOVWF  xE7
4A72:  CALL   22F4
4A76:  MOVFF  00,E0
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(hour/10); 
4A7A:  MOVF   xDC,W
4A7C:  MULLW  04
4A7E:  MOVF   FF3,W
4A80:  CLRF   xE2
4A82:  MOVWF  xE1
4A84:  MOVLW  1A
4A86:  ADDWF  xE1,W
4A88:  MOVWF  01
4A8A:  MOVLW  00
4A8C:  ADDWFC xE2,W
4A8E:  MOVWF  03
4A90:  MOVFF  01,E3
4A94:  MOVWF  xE4
4A96:  MOVFF  DF,E5
4A9A:  MOVLW  0A
4A9C:  MOVWF  xE6
4A9E:  CALL   36FE
4AA2:  MOVFF  01,E5
4AA6:  MOVFF  01,E7
4AAA:  CALL   14F4
4AAE:  MOVFF  E4,FEA
4AB2:  MOVFF  E3,FE9
4AB6:  MOVFF  01,FEF
....................       led7[mon][1] = AddPoint(Get7Seg(hour%10)); 
4ABA:  MOVF   xDC,W
4ABC:  MULLW  04
4ABE:  MOVF   FF3,W
4AC0:  CLRF   xE2
4AC2:  MOVWF  xE1
4AC4:  MOVLW  01
4AC6:  ADDWF  xE1,W
4AC8:  MOVWF  01
4ACA:  MOVLW  00
4ACC:  ADDWFC xE2,W
4ACE:  MOVWF  03
4AD0:  MOVF   01,W
4AD2:  ADDLW  1A
4AD4:  MOVWF  01
4AD6:  MOVLW  00
4AD8:  ADDWFC 03,F
4ADA:  MOVFF  01,E1
4ADE:  MOVFF  03,E2
4AE2:  MOVFF  DF,E5
4AE6:  MOVLW  0A
4AE8:  MOVWF  xE6
4AEA:  CALL   36FE
4AEE:  MOVFF  00,E3
4AF2:  MOVFF  00,E7
4AF6:  CALL   14F4
4AFA:  MOVFF  01,E3
4AFE:  MOVFF  01,E4
4B02:  CALL   3178
4B06:  MOVFF  E2,FEA
4B0A:  MOVFF  E1,FE9
4B0E:  MOVFF  01,FEF
....................       led7[mon][2] = Get7Seg(min/10); 
4B12:  MOVF   xDC,W
4B14:  MULLW  04
4B16:  MOVF   FF3,W
4B18:  CLRF   xE2
4B1A:  MOVWF  xE1
4B1C:  MOVLW  02
4B1E:  ADDWF  xE1,W
4B20:  MOVWF  01
4B22:  MOVLW  00
4B24:  ADDWFC xE2,W
4B26:  MOVWF  03
4B28:  MOVF   01,W
4B2A:  ADDLW  1A
4B2C:  MOVWF  01
4B2E:  MOVLW  00
4B30:  ADDWFC 03,F
4B32:  MOVFF  01,E1
4B36:  MOVFF  03,E2
4B3A:  MOVFF  E0,E5
4B3E:  MOVLW  0A
4B40:  MOVWF  xE6
4B42:  CALL   36FE
4B46:  MOVFF  01,E3
4B4A:  MOVFF  01,E7
4B4E:  CALL   14F4
4B52:  MOVFF  E2,FEA
4B56:  MOVFF  E1,FE9
4B5A:  MOVFF  01,FEF
....................       led7[mon][3] = Get7Seg(min%10); 
4B5E:  MOVF   xDC,W
4B60:  MULLW  04
4B62:  MOVF   FF3,W
4B64:  CLRF   xE2
4B66:  MOVWF  xE1
4B68:  MOVLW  03
4B6A:  ADDWF  xE1,W
4B6C:  MOVWF  01
4B6E:  MOVLW  00
4B70:  ADDWFC xE2,W
4B72:  MOVWF  03
4B74:  MOVF   01,W
4B76:  ADDLW  1A
4B78:  MOVWF  01
4B7A:  MOVLW  00
4B7C:  ADDWFC 03,F
4B7E:  MOVFF  01,E1
4B82:  MOVFF  03,E2
4B86:  MOVFF  E0,E5
4B8A:  MOVLW  0A
4B8C:  MOVWF  xE6
4B8E:  CALL   36FE
4B92:  MOVFF  00,E3
4B96:  MOVFF  00,E7
4B9A:  CALL   14F4
4B9E:  MOVFF  E2,FEA
4BA2:  MOVFF  E1,FE9
4BA6:  MOVFF  01,FEF
4BAA:  RETURN 0
.................... } 
.................... /* 
.................... void PutTime_One_Blank(unsigned char mon) 
.................... { 
....................    led7[mon][0] = 0x00; 
....................    led7[mon][1] = 0x00; 
....................    led7[mon][2] = 0x00; 
....................    led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... /* 
.................... void PutTemp(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    if (temp >= 10000) { 
....................       led7[mon][0] = Get7Seg(temp / 10000); 
....................       led7[mon][1] = Get7Seg((temp%10000) / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((temp%100) / 10); 
....................    } else { 
....................       led7[mon][0] = Get7Seg(temp / 1000); 
....................       led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][2] = Get7Seg((temp%100) / 10); 
....................       led7[mon][3] = Get7Seg(temp % 10);    
....................    } 
.................... } 
.................... */ 
.................... void PutTempSign(unsigned char mon, signed int16 temp) 
.................... { 
....................    if (temp >= 0) { 
*
4580:  BTFSC  xDE.7
4582:  BRA    48C2
....................       if (temp >= 10000) { 
4584:  BTFSC  xDE.7
4586:  BRA    474C
4588:  MOVF   xDE,W
458A:  SUBLW  26
458C:  BTFSC  FD8.0
458E:  BRA    474C
4590:  XORLW  FF
4592:  BNZ   459C
4594:  MOVF   xDD,W
4596:  SUBLW  0F
4598:  BTFSC  FD8.0
459A:  BRA    474C
....................          led7[mon][0] = Get7Seg(temp / 10000); 
459C:  MOVF   xDC,W
459E:  MULLW  04
45A0:  MOVF   FF3,W
45A2:  CLRF   xE0
45A4:  MOVWF  xDF
45A6:  MOVLW  1A
45A8:  ADDWF  xDF,W
45AA:  MOVWF  01
45AC:  MOVLW  00
45AE:  ADDWFC xE0,W
45B0:  MOVWF  03
45B2:  MOVFF  01,E1
45B6:  MOVWF  xE2
45B8:  MOVFF  DE,E6
45BC:  MOVFF  DD,E5
45C0:  MOVLW  27
45C2:  MOVWF  xE8
45C4:  MOVLW  10
45C6:  MOVWF  xE7
45C8:  CALL   3104
45CC:  MOVFF  02,E4
45D0:  MOVFF  01,E3
45D4:  MOVFF  01,E7
45D8:  CALL   14F4
45DC:  MOVFF  E2,FEA
45E0:  MOVFF  E1,FE9
45E4:  MOVFF  01,FEF
....................          led7[mon][1] = Get7Seg((temp%10000) / 1000); 
45E8:  MOVF   xDC,W
45EA:  MULLW  04
45EC:  MOVF   FF3,W
45EE:  CLRF   xE0
45F0:  MOVWF  xDF
45F2:  MOVLW  01
45F4:  ADDWF  xDF,W
45F6:  MOVWF  01
45F8:  MOVLW  00
45FA:  ADDWFC xE0,W
45FC:  MOVWF  03
45FE:  MOVF   01,W
4600:  ADDLW  1A
4602:  MOVWF  01
4604:  MOVLW  00
4606:  ADDWFC 03,F
4608:  MOVFF  01,DF
460C:  MOVFF  03,E0
4610:  MOVFF  DE,E6
4614:  MOVFF  DD,E5
4618:  MOVLW  27
461A:  MOVWF  xE8
461C:  MOVLW  10
461E:  MOVWF  xE7
4620:  CALL   3104
4624:  MOVFF  00,E1
4628:  MOVFF  03,E2
462C:  MOVFF  03,E6
4630:  MOVFF  00,E5
4634:  MOVLW  03
4636:  MOVWF  xE8
4638:  MOVLW  E8
463A:  MOVWF  xE7
463C:  CALL   3104
4640:  MOVFF  02,E2
4644:  MOVFF  01,E1
4648:  MOVFF  01,E7
464C:  CALL   14F4
4650:  MOVFF  E0,FEA
4654:  MOVFF  DF,FE9
4658:  MOVFF  01,FEF
....................          led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
465C:  MOVF   xDC,W
465E:  MULLW  04
4660:  MOVF   FF3,W
4662:  CLRF   xE0
4664:  MOVWF  xDF
4666:  MOVLW  02
4668:  ADDWF  xDF,W
466A:  MOVWF  01
466C:  MOVLW  00
466E:  ADDWFC xE0,W
4670:  MOVWF  03
4672:  MOVF   01,W
4674:  ADDLW  1A
4676:  MOVWF  01
4678:  MOVLW  00
467A:  ADDWFC 03,F
467C:  MOVFF  01,DF
4680:  MOVFF  03,E0
4684:  MOVFF  DE,E6
4688:  MOVFF  DD,E5
468C:  MOVLW  03
468E:  MOVWF  xE8
4690:  MOVLW  E8
4692:  MOVWF  xE7
4694:  CALL   3104
4698:  MOVFF  00,E1
469C:  MOVFF  03,E2
46A0:  MOVFF  03,E6
46A4:  MOVFF  00,E5
46A8:  CLRF   xE8
46AA:  MOVLW  64
46AC:  MOVWF  xE7
46AE:  CALL   3104
46B2:  MOVFF  02,E2
46B6:  MOVFF  01,E1
46BA:  MOVFF  01,E7
46BE:  CALL   14F4
46C2:  MOVFF  01,E1
46C6:  MOVFF  01,E4
46CA:  CALL   3178
46CE:  MOVFF  E0,FEA
46D2:  MOVFF  DF,FE9
46D6:  MOVFF  01,FEF
....................          led7[mon][3] = Get7Seg((temp%100) / 10); 
46DA:  MOVF   xDC,W
46DC:  MULLW  04
46DE:  MOVF   FF3,W
46E0:  CLRF   xE0
46E2:  MOVWF  xDF
46E4:  MOVLW  03
46E6:  ADDWF  xDF,W
46E8:  MOVWF  01
46EA:  MOVLW  00
46EC:  ADDWFC xE0,W
46EE:  MOVWF  03
46F0:  MOVF   01,W
46F2:  ADDLW  1A
46F4:  MOVWF  01
46F6:  MOVLW  00
46F8:  ADDWFC 03,F
46FA:  MOVFF  01,DF
46FE:  MOVFF  03,E0
4702:  MOVFF  DE,E6
4706:  MOVFF  DD,E5
470A:  CLRF   xE8
470C:  MOVLW  64
470E:  MOVWF  xE7
4710:  CALL   3104
4714:  MOVFF  00,E1
4718:  MOVFF  03,E2
471C:  MOVFF  03,E6
4720:  MOVFF  00,E5
4724:  CLRF   xE8
4726:  MOVLW  0A
4728:  MOVWF  xE7
472A:  CALL   3104
472E:  MOVFF  02,E2
4732:  MOVFF  01,E1
4736:  MOVFF  01,E7
473A:  CALL   14F4
473E:  MOVFF  E0,FEA
4742:  MOVFF  DF,FE9
4746:  MOVFF  01,FEF
....................       } else { 
474A:  BRA    48C0
....................          led7[mon][0] = Get7Seg(temp / 1000); 
474C:  MOVF   xDC,W
474E:  MULLW  04
4750:  MOVF   FF3,W
4752:  CLRF   xE0
4754:  MOVWF  xDF
4756:  MOVLW  1A
4758:  ADDWF  xDF,W
475A:  MOVWF  01
475C:  MOVLW  00
475E:  ADDWFC xE0,W
4760:  MOVWF  03
4762:  MOVFF  01,E1
4766:  MOVWF  xE2
4768:  MOVFF  DE,E6
476C:  MOVFF  DD,E5
4770:  MOVLW  03
4772:  MOVWF  xE8
4774:  MOVLW  E8
4776:  MOVWF  xE7
4778:  CALL   3104
477C:  MOVFF  02,E4
4780:  MOVFF  01,E3
4784:  MOVFF  01,E7
4788:  CALL   14F4
478C:  MOVFF  E2,FEA
4790:  MOVFF  E1,FE9
4794:  MOVFF  01,FEF
....................          led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
4798:  MOVF   xDC,W
479A:  MULLW  04
479C:  MOVF   FF3,W
479E:  CLRF   xE0
47A0:  MOVWF  xDF
47A2:  MOVLW  01
47A4:  ADDWF  xDF,W
47A6:  MOVWF  01
47A8:  MOVLW  00
47AA:  ADDWFC xE0,W
47AC:  MOVWF  03
47AE:  MOVF   01,W
47B0:  ADDLW  1A
47B2:  MOVWF  01
47B4:  MOVLW  00
47B6:  ADDWFC 03,F
47B8:  MOVFF  01,DF
47BC:  MOVFF  03,E0
47C0:  MOVFF  DE,E6
47C4:  MOVFF  DD,E5
47C8:  MOVLW  03
47CA:  MOVWF  xE8
47CC:  MOVLW  E8
47CE:  MOVWF  xE7
47D0:  CALL   3104
47D4:  MOVFF  00,E1
47D8:  MOVFF  03,E2
47DC:  MOVFF  03,E6
47E0:  MOVFF  00,E5
47E4:  CLRF   xE8
47E6:  MOVLW  64
47E8:  MOVWF  xE7
47EA:  CALL   3104
47EE:  MOVFF  02,E2
47F2:  MOVFF  01,E1
47F6:  MOVFF  01,E7
47FA:  CALL   14F4
47FE:  MOVFF  01,E1
4802:  MOVFF  01,E4
4806:  CALL   3178
480A:  MOVFF  E0,FEA
480E:  MOVFF  DF,FE9
4812:  MOVFF  01,FEF
....................          led7[mon][2] = Get7Seg((temp%100) / 10); 
4816:  MOVF   xDC,W
4818:  MULLW  04
481A:  MOVF   FF3,W
481C:  CLRF   xE0
481E:  MOVWF  xDF
4820:  MOVLW  02
4822:  ADDWF  xDF,W
4824:  MOVWF  01
4826:  MOVLW  00
4828:  ADDWFC xE0,W
482A:  MOVWF  03
482C:  MOVF   01,W
482E:  ADDLW  1A
4830:  MOVWF  01
4832:  MOVLW  00
4834:  ADDWFC 03,F
4836:  MOVFF  01,DF
483A:  MOVFF  03,E0
483E:  MOVFF  DE,E6
4842:  MOVFF  DD,E5
4846:  CLRF   xE8
4848:  MOVLW  64
484A:  MOVWF  xE7
484C:  CALL   3104
4850:  MOVFF  00,E1
4854:  MOVFF  03,E2
4858:  MOVFF  03,E6
485C:  MOVFF  00,E5
4860:  CLRF   xE8
4862:  MOVLW  0A
4864:  MOVWF  xE7
4866:  CALL   3104
486A:  MOVFF  02,E2
486E:  MOVFF  01,E1
4872:  MOVFF  01,E7
4876:  CALL   14F4
487A:  MOVFF  E0,FEA
487E:  MOVFF  DF,FE9
4882:  MOVFF  01,FEF
....................          //led7[mon][3] = Get7Seg(temp % 10);   
....................          led7[mon][3] = Get7Seg(0);    
4886:  MOVF   xDC,W
4888:  MULLW  04
488A:  MOVF   FF3,W
488C:  CLRF   xE0
488E:  MOVWF  xDF
4890:  MOVLW  03
4892:  ADDWF  xDF,W
4894:  MOVWF  01
4896:  MOVLW  00
4898:  ADDWFC xE0,W
489A:  MOVWF  03
489C:  MOVF   01,W
489E:  ADDLW  1A
48A0:  MOVWF  01
48A2:  MOVLW  00
48A4:  ADDWFC 03,F
48A6:  MOVFF  01,DF
48AA:  MOVFF  03,E0
48AE:  CLRF   xE7
48B0:  CALL   14F4
48B4:  MOVFF  E0,FEA
48B8:  MOVFF  DF,FE9
48BC:  MOVFF  01,FEF
....................       } 
....................    } else { 
48C0:  BRA    4A4C
....................       led7[mon][0] = 0x80; 
48C2:  MOVF   xDC,W
48C4:  MULLW  04
48C6:  MOVF   FF3,W
48C8:  CLRF   xE0
48CA:  MOVWF  xDF
48CC:  MOVLW  1A
48CE:  ADDWF  xDF,W
48D0:  MOVWF  FE9
48D2:  MOVLW  00
48D4:  ADDWFC xE0,W
48D6:  MOVWF  FEA
48D8:  MOVLW  80
48DA:  MOVWF  FEF
....................       led7[mon][1] = Get7Seg(-temp / 1000); 
48DC:  MOVF   xDC,W
48DE:  MULLW  04
48E0:  MOVF   FF3,W
48E2:  CLRF   xE0
48E4:  MOVWF  xDF
48E6:  MOVLW  01
48E8:  ADDWF  xDF,W
48EA:  MOVWF  01
48EC:  MOVLW  00
48EE:  ADDWFC xE0,W
48F0:  MOVWF  03
48F2:  MOVF   01,W
48F4:  ADDLW  1A
48F6:  MOVWF  01
48F8:  MOVLW  00
48FA:  ADDWFC 03,F
48FC:  MOVFF  01,DF
4900:  MOVFF  03,E0
4904:  COMF   xDD,W
4906:  MOVWF  xE1
4908:  COMF   xDE,W
490A:  MOVWF  xE2
490C:  INCF   xE1,F
490E:  BTFSC  FD8.2
4910:  INCF   xE2,F
4912:  MOVFF  E2,E6
4916:  MOVFF  E1,E5
491A:  MOVLW  03
491C:  MOVWF  xE8
491E:  MOVLW  E8
4920:  MOVWF  xE7
4922:  CALL   3104
4926:  MOVFF  02,E2
492A:  MOVFF  01,E1
492E:  MOVFF  01,E7
4932:  CALL   14F4
4936:  MOVFF  E0,FEA
493A:  MOVFF  DF,FE9
493E:  MOVFF  01,FEF
....................       led7[mon][2] = AddPoint(Get7Seg((-temp%1000) / 100)); 
4942:  MOVF   xDC,W
4944:  MULLW  04
4946:  MOVF   FF3,W
4948:  CLRF   xE0
494A:  MOVWF  xDF
494C:  MOVLW  02
494E:  ADDWF  xDF,W
4950:  MOVWF  01
4952:  MOVLW  00
4954:  ADDWFC xE0,W
4956:  MOVWF  03
4958:  MOVF   01,W
495A:  ADDLW  1A
495C:  MOVWF  01
495E:  MOVLW  00
4960:  ADDWFC 03,F
4962:  MOVFF  01,DF
4966:  MOVFF  03,E0
496A:  COMF   xDD,W
496C:  MOVWF  xE1
496E:  COMF   xDE,W
4970:  MOVWF  xE2
4972:  INCF   xE1,F
4974:  BTFSC  FD8.2
4976:  INCF   xE2,F
4978:  MOVFF  E2,E6
497C:  MOVFF  E1,E5
4980:  MOVLW  03
4982:  MOVWF  xE8
4984:  MOVLW  E8
4986:  MOVWF  xE7
4988:  CALL   3104
498C:  MOVFF  00,E1
4990:  MOVFF  03,E2
4994:  MOVFF  03,E6
4998:  MOVFF  00,E5
499C:  CLRF   xE8
499E:  MOVLW  64
49A0:  MOVWF  xE7
49A2:  CALL   3104
49A6:  MOVFF  02,E2
49AA:  MOVFF  01,E1
49AE:  MOVFF  01,E7
49B2:  CALL   14F4
49B6:  MOVFF  01,E1
49BA:  MOVFF  01,E4
49BE:  CALL   3178
49C2:  MOVFF  E0,FEA
49C6:  MOVFF  DF,FE9
49CA:  MOVFF  01,FEF
....................       led7[mon][3] = Get7Seg((-temp%100) / 10); 
49CE:  MOVF   xDC,W
49D0:  MULLW  04
49D2:  MOVF   FF3,W
49D4:  CLRF   xE0
49D6:  MOVWF  xDF
49D8:  MOVLW  03
49DA:  ADDWF  xDF,W
49DC:  MOVWF  01
49DE:  MOVLW  00
49E0:  ADDWFC xE0,W
49E2:  MOVWF  03
49E4:  MOVF   01,W
49E6:  ADDLW  1A
49E8:  MOVWF  01
49EA:  MOVLW  00
49EC:  ADDWFC 03,F
49EE:  MOVFF  01,DF
49F2:  MOVFF  03,E0
49F6:  COMF   xDD,W
49F8:  MOVWF  xE1
49FA:  COMF   xDE,W
49FC:  MOVWF  xE2
49FE:  INCF   xE1,F
4A00:  BTFSC  FD8.2
4A02:  INCF   xE2,F
4A04:  MOVFF  E2,E6
4A08:  MOVFF  E1,E5
4A0C:  CLRF   xE8
4A0E:  MOVLW  64
4A10:  MOVWF  xE7
4A12:  CALL   3104
4A16:  MOVFF  00,E1
4A1A:  MOVFF  03,E2
4A1E:  MOVFF  03,E6
4A22:  MOVFF  00,E5
4A26:  CLRF   xE8
4A28:  MOVLW  0A
4A2A:  MOVWF  xE7
4A2C:  CALL   3104
4A30:  MOVFF  02,E2
4A34:  MOVFF  01,E1
4A38:  MOVFF  01,E7
4A3C:  CALL   14F4
4A40:  MOVFF  E0,FEA
4A44:  MOVFF  DF,FE9
4A48:  MOVFF  01,FEF
....................    } 
4A4C:  RETURN 0
.................... } 
....................  
.................... void PutOffset(unsigned char mon, signed int16 offset) 
.................... { 
....................    if (offset >= 0) { 
*
3180:  BTFSC  xE0.7
3182:  BRA    3324
....................       led7[mon][0] = Get7Seg(offset / 10000); 
3184:  MOVF   xDE,W
3186:  MULLW  04
3188:  MOVF   FF3,W
318A:  CLRF   xE2
318C:  MOVWF  xE1
318E:  MOVLW  1A
3190:  ADDWF  xE1,W
3192:  MOVWF  01
3194:  MOVLW  00
3196:  ADDWFC xE2,W
3198:  MOVWF  03
319A:  MOVFF  01,E3
319E:  MOVWF  xE4
31A0:  MOVFF  E0,E6
31A4:  MOVFF  DF,E5
31A8:  MOVLW  27
31AA:  MOVWF  xE8
31AC:  MOVLW  10
31AE:  MOVWF  xE7
31B0:  RCALL  3104
31B2:  MOVFF  02,E6
31B6:  MOVFF  01,E5
31BA:  MOVFF  01,E7
31BE:  CALL   14F4
31C2:  MOVFF  E4,FEA
31C6:  MOVFF  E3,FE9
31CA:  MOVFF  01,FEF
....................       led7[mon][1] = Get7Seg((offset%10000) / 1000); 
31CE:  MOVF   xDE,W
31D0:  MULLW  04
31D2:  MOVF   FF3,W
31D4:  CLRF   xE2
31D6:  MOVWF  xE1
31D8:  MOVLW  01
31DA:  ADDWF  xE1,W
31DC:  MOVWF  01
31DE:  MOVLW  00
31E0:  ADDWFC xE2,W
31E2:  MOVWF  03
31E4:  MOVF   01,W
31E6:  ADDLW  1A
31E8:  MOVWF  01
31EA:  MOVLW  00
31EC:  ADDWFC 03,F
31EE:  MOVFF  01,E1
31F2:  MOVFF  03,E2
31F6:  MOVFF  E0,E6
31FA:  MOVFF  DF,E5
31FE:  MOVLW  27
3200:  MOVWF  xE8
3202:  MOVLW  10
3204:  MOVWF  xE7
3206:  RCALL  3104
3208:  MOVFF  00,E3
320C:  MOVFF  03,E4
3210:  MOVFF  03,E6
3214:  MOVFF  00,E5
3218:  MOVLW  03
321A:  MOVWF  xE8
321C:  MOVLW  E8
321E:  MOVWF  xE7
3220:  RCALL  3104
3222:  MOVFF  02,E4
3226:  MOVFF  01,E3
322A:  MOVFF  01,E7
322E:  CALL   14F4
3232:  MOVFF  E2,FEA
3236:  MOVFF  E1,FE9
323A:  MOVFF  01,FEF
....................       led7[mon][2] = AddPoint(Get7Seg((offset%1000) / 100)); 
323E:  MOVF   xDE,W
3240:  MULLW  04
3242:  MOVF   FF3,W
3244:  CLRF   xE2
3246:  MOVWF  xE1
3248:  MOVLW  02
324A:  ADDWF  xE1,W
324C:  MOVWF  01
324E:  MOVLW  00
3250:  ADDWFC xE2,W
3252:  MOVWF  03
3254:  MOVF   01,W
3256:  ADDLW  1A
3258:  MOVWF  01
325A:  MOVLW  00
325C:  ADDWFC 03,F
325E:  MOVFF  01,E1
3262:  MOVFF  03,E2
3266:  MOVFF  E0,E6
326A:  MOVFF  DF,E5
326E:  MOVLW  03
3270:  MOVWF  xE8
3272:  MOVLW  E8
3274:  MOVWF  xE7
3276:  RCALL  3104
3278:  MOVFF  00,E3
327C:  MOVFF  03,E4
3280:  MOVFF  03,E6
3284:  MOVFF  00,E5
3288:  CLRF   xE8
328A:  MOVLW  64
328C:  MOVWF  xE7
328E:  RCALL  3104
3290:  MOVFF  02,E4
3294:  MOVFF  01,E3
3298:  MOVFF  01,E7
329C:  CALL   14F4
32A0:  MOVFF  01,E3
32A4:  MOVFF  01,E4
32A8:  RCALL  3178
32AA:  MOVFF  E2,FEA
32AE:  MOVFF  E1,FE9
32B2:  MOVFF  01,FEF
....................       led7[mon][3] = Get7Seg((offset%100) / 10); 
32B6:  MOVF   xDE,W
32B8:  MULLW  04
32BA:  MOVF   FF3,W
32BC:  CLRF   xE2
32BE:  MOVWF  xE1
32C0:  MOVLW  03
32C2:  ADDWF  xE1,W
32C4:  MOVWF  01
32C6:  MOVLW  00
32C8:  ADDWFC xE2,W
32CA:  MOVWF  03
32CC:  MOVF   01,W
32CE:  ADDLW  1A
32D0:  MOVWF  01
32D2:  MOVLW  00
32D4:  ADDWFC 03,F
32D6:  MOVFF  01,E1
32DA:  MOVFF  03,E2
32DE:  MOVFF  E0,E6
32E2:  MOVFF  DF,E5
32E6:  CLRF   xE8
32E8:  MOVLW  64
32EA:  MOVWF  xE7
32EC:  RCALL  3104
32EE:  MOVFF  00,E3
32F2:  MOVFF  03,E4
32F6:  MOVFF  03,E6
32FA:  MOVFF  00,E5
32FE:  CLRF   xE8
3300:  MOVLW  0A
3302:  MOVWF  xE7
3304:  RCALL  3104
3306:  MOVFF  02,E4
330A:  MOVFF  01,E3
330E:  MOVFF  01,E7
3312:  CALL   14F4
3316:  MOVFF  E2,FEA
331A:  MOVFF  E1,FE9
331E:  MOVFF  01,FEF
....................    } else { 
3322:  BRA    34A2
....................       led7[mon][0] = 0x80; 
3324:  MOVF   xDE,W
3326:  MULLW  04
3328:  MOVF   FF3,W
332A:  CLRF   xE2
332C:  MOVWF  xE1
332E:  MOVLW  1A
3330:  ADDWF  xE1,W
3332:  MOVWF  FE9
3334:  MOVLW  00
3336:  ADDWFC xE2,W
3338:  MOVWF  FEA
333A:  MOVLW  80
333C:  MOVWF  FEF
....................       led7[mon][1] = Get7Seg(-offset / 1000); 
333E:  MOVF   xDE,W
3340:  MULLW  04
3342:  MOVF   FF3,W
3344:  CLRF   xE2
3346:  MOVWF  xE1
3348:  MOVLW  01
334A:  ADDWF  xE1,W
334C:  MOVWF  01
334E:  MOVLW  00
3350:  ADDWFC xE2,W
3352:  MOVWF  03
3354:  MOVF   01,W
3356:  ADDLW  1A
3358:  MOVWF  01
335A:  MOVLW  00
335C:  ADDWFC 03,F
335E:  MOVFF  01,E1
3362:  MOVFF  03,E2
3366:  COMF   xDF,W
3368:  MOVWF  xE3
336A:  COMF   xE0,W
336C:  MOVWF  xE4
336E:  INCF   xE3,F
3370:  BTFSC  FD8.2
3372:  INCF   xE4,F
3374:  MOVFF  E4,E6
3378:  MOVFF  E3,E5
337C:  MOVLW  03
337E:  MOVWF  xE8
3380:  MOVLW  E8
3382:  MOVWF  xE7
3384:  RCALL  3104
3386:  MOVFF  02,E4
338A:  MOVFF  01,E3
338E:  MOVFF  01,E7
3392:  CALL   14F4
3396:  MOVFF  E2,FEA
339A:  MOVFF  E1,FE9
339E:  MOVFF  01,FEF
....................       led7[mon][2] = AddPoint(Get7Seg((-offset%1000) / 100)); 
33A2:  MOVF   xDE,W
33A4:  MULLW  04
33A6:  MOVF   FF3,W
33A8:  CLRF   xE2
33AA:  MOVWF  xE1
33AC:  MOVLW  02
33AE:  ADDWF  xE1,W
33B0:  MOVWF  01
33B2:  MOVLW  00
33B4:  ADDWFC xE2,W
33B6:  MOVWF  03
33B8:  MOVF   01,W
33BA:  ADDLW  1A
33BC:  MOVWF  01
33BE:  MOVLW  00
33C0:  ADDWFC 03,F
33C2:  MOVFF  01,E1
33C6:  MOVFF  03,E2
33CA:  COMF   xDF,W
33CC:  MOVWF  xE3
33CE:  COMF   xE0,W
33D0:  MOVWF  xE4
33D2:  INCF   xE3,F
33D4:  BTFSC  FD8.2
33D6:  INCF   xE4,F
33D8:  MOVFF  E4,E6
33DC:  MOVFF  E3,E5
33E0:  MOVLW  03
33E2:  MOVWF  xE8
33E4:  MOVLW  E8
33E6:  MOVWF  xE7
33E8:  RCALL  3104
33EA:  MOVFF  00,E3
33EE:  MOVFF  03,E4
33F2:  MOVFF  03,E6
33F6:  MOVFF  00,E5
33FA:  CLRF   xE8
33FC:  MOVLW  64
33FE:  MOVWF  xE7
3400:  RCALL  3104
3402:  MOVFF  02,E4
3406:  MOVFF  01,E3
340A:  MOVFF  01,E7
340E:  CALL   14F4
3412:  MOVFF  01,E3
3416:  MOVFF  01,E4
341A:  RCALL  3178
341C:  MOVFF  E2,FEA
3420:  MOVFF  E1,FE9
3424:  MOVFF  01,FEF
....................       led7[mon][3] = Get7Seg((-offset%100) / 10); 
3428:  MOVF   xDE,W
342A:  MULLW  04
342C:  MOVF   FF3,W
342E:  CLRF   xE2
3430:  MOVWF  xE1
3432:  MOVLW  03
3434:  ADDWF  xE1,W
3436:  MOVWF  01
3438:  MOVLW  00
343A:  ADDWFC xE2,W
343C:  MOVWF  03
343E:  MOVF   01,W
3440:  ADDLW  1A
3442:  MOVWF  01
3444:  MOVLW  00
3446:  ADDWFC 03,F
3448:  MOVFF  01,E1
344C:  MOVFF  03,E2
3450:  COMF   xDF,W
3452:  MOVWF  xE3
3454:  COMF   xE0,W
3456:  MOVWF  xE4
3458:  INCF   xE3,F
345A:  BTFSC  FD8.2
345C:  INCF   xE4,F
345E:  MOVFF  E4,E6
3462:  MOVFF  E3,E5
3466:  CLRF   xE8
3468:  MOVLW  64
346A:  MOVWF  xE7
346C:  RCALL  3104
346E:  MOVFF  00,E3
3472:  MOVFF  03,E4
3476:  MOVFF  03,E6
347A:  MOVFF  00,E5
347E:  CLRF   xE8
3480:  MOVLW  0A
3482:  MOVWF  xE7
3484:  RCALL  3104
3486:  MOVFF  02,E4
348A:  MOVFF  01,E3
348E:  MOVFF  01,E7
3492:  CALL   14F4
3496:  MOVFF  E2,FEA
349A:  MOVFF  E1,FE9
349E:  MOVFF  01,FEF
....................    } 
34A2:  RETURN 0
.................... } 
....................  
.................... void PutPid(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    tmp %= 10000; 
*
2D5C:  CLRF   xE6
2D5E:  MOVFF  46,E5
2D62:  MOVLW  27
2D64:  MOVWF  xE8
2D66:  MOVLW  10
2D68:  MOVWF  xE7
2D6A:  CALL   22F4
2D6E:  MOVFF  00,46
....................    led7[mon][0] = Get7Seg(0); 
2D72:  MOVF   xDE,W
2D74:  MULLW  04
2D76:  MOVF   FF3,W
2D78:  CLRF   xE2
2D7A:  MOVWF  xE1
2D7C:  MOVLW  1A
2D7E:  ADDWF  xE1,W
2D80:  MOVWF  01
2D82:  MOVLW  00
2D84:  ADDWFC xE2,W
2D86:  MOVWF  03
2D88:  MOVFF  01,E3
2D8C:  MOVWF  xE4
2D8E:  CLRF   xE7
2D90:  CALL   14F4
2D94:  MOVFF  E4,FEA
2D98:  MOVFF  E3,FE9
2D9C:  MOVFF  01,FEF
....................    led7[mon][1] = Get7Seg(temp / 100); 
2DA0:  MOVF   xDE,W
2DA2:  MULLW  04
2DA4:  MOVF   FF3,W
2DA6:  CLRF   xE2
2DA8:  MOVWF  xE1
2DAA:  MOVLW  01
2DAC:  ADDWF  xE1,W
2DAE:  MOVWF  01
2DB0:  MOVLW  00
2DB2:  ADDWFC xE2,W
2DB4:  MOVWF  03
2DB6:  MOVF   01,W
2DB8:  ADDLW  1A
2DBA:  MOVWF  01
2DBC:  MOVLW  00
2DBE:  ADDWFC 03,F
2DC0:  MOVFF  01,E1
2DC4:  MOVFF  03,E2
2DC8:  MOVFF  E0,E6
2DCC:  MOVFF  DF,E5
2DD0:  CLRF   xE8
2DD2:  MOVLW  64
2DD4:  MOVWF  xE7
2DD6:  CALL   22F4
2DDA:  MOVFF  02,E4
2DDE:  MOVFF  01,E3
2DE2:  MOVFF  01,E7
2DE6:  CALL   14F4
2DEA:  MOVFF  E2,FEA
2DEE:  MOVFF  E1,FE9
2DF2:  MOVFF  01,FEF
....................    led7[mon][2] = Get7Seg((temp%100) / 10); 
2DF6:  MOVF   xDE,W
2DF8:  MULLW  04
2DFA:  MOVF   FF3,W
2DFC:  CLRF   xE2
2DFE:  MOVWF  xE1
2E00:  MOVLW  02
2E02:  ADDWF  xE1,W
2E04:  MOVWF  01
2E06:  MOVLW  00
2E08:  ADDWFC xE2,W
2E0A:  MOVWF  03
2E0C:  MOVF   01,W
2E0E:  ADDLW  1A
2E10:  MOVWF  01
2E12:  MOVLW  00
2E14:  ADDWFC 03,F
2E16:  MOVFF  01,E1
2E1A:  MOVFF  03,E2
2E1E:  MOVFF  E0,E6
2E22:  MOVFF  DF,E5
2E26:  CLRF   xE8
2E28:  MOVLW  64
2E2A:  MOVWF  xE7
2E2C:  CALL   22F4
2E30:  MOVFF  00,E3
2E34:  MOVFF  03,E4
2E38:  MOVFF  03,E6
2E3C:  MOVFF  00,E5
2E40:  CLRF   xE8
2E42:  MOVLW  0A
2E44:  MOVWF  xE7
2E46:  CALL   22F4
2E4A:  MOVFF  02,E4
2E4E:  MOVFF  01,E3
2E52:  MOVFF  01,E7
2E56:  CALL   14F4
2E5A:  MOVFF  E2,FEA
2E5E:  MOVFF  E1,FE9
2E62:  MOVFF  01,FEF
....................    led7[mon][3] = Get7Seg(temp % 10);    
2E66:  MOVF   xDE,W
2E68:  MULLW  04
2E6A:  MOVF   FF3,W
2E6C:  CLRF   xE2
2E6E:  MOVWF  xE1
2E70:  MOVLW  03
2E72:  ADDWF  xE1,W
2E74:  MOVWF  01
2E76:  MOVLW  00
2E78:  ADDWFC xE2,W
2E7A:  MOVWF  03
2E7C:  MOVF   01,W
2E7E:  ADDLW  1A
2E80:  MOVWF  01
2E82:  MOVLW  00
2E84:  ADDWFC 03,F
2E86:  MOVFF  01,E1
2E8A:  MOVFF  03,E2
2E8E:  MOVFF  E0,E6
2E92:  MOVFF  DF,E5
2E96:  CLRF   xE8
2E98:  MOVLW  0A
2E9A:  MOVWF  xE7
2E9C:  CALL   22F4
2EA0:  MOVFF  00,E3
2EA4:  MOVFF  03,E4
2EA8:  MOVFF  00,E7
2EAC:  CALL   14F4
2EB0:  MOVFF  E2,FEA
2EB4:  MOVFF  E1,FE9
2EB8:  MOVFF  01,FEF
2EBC:  RETURN 0
.................... } 
....................  
.................... void PutSign(unsigned char mon, Sign_CODE sign) 
.................... { 
....................    switch (sign) 
*
3C66:  MOVF   xDD,W
3C68:  ADDLW  F1
3C6A:  BTFSC  FD8.0
3C6C:  GOTO   453E
3C70:  ADDLW  0F
3C72:  GOTO   4540
....................    { 
....................       case SIGN_SENSOR_BROKEN: 
....................          led7[mon][0] = 0xD6; 
3C76:  MOVF   xDC,W
3C78:  MULLW  04
3C7A:  MOVF   FF3,W
3C7C:  CLRF   xDF
3C7E:  MOVWF  xDE
3C80:  MOVLW  1A
3C82:  ADDWF  xDE,W
3C84:  MOVWF  FE9
3C86:  MOVLW  00
3C88:  ADDWFC xDF,W
3C8A:  MOVWF  FEA
3C8C:  MOVLW  D6
3C8E:  MOVWF  FEF
....................          led7[mon][2] = 0x00; 
3C90:  MOVF   xDC,W
3C92:  MULLW  04
3C94:  MOVF   FF3,W
3C96:  CLRF   xDF
3C98:  MOVWF  xDE
3C9A:  MOVLW  02
3C9C:  ADDWF  xDE,W
3C9E:  MOVWF  01
3CA0:  MOVLW  00
3CA2:  ADDWFC xDF,W
3CA4:  MOVWF  03
3CA6:  MOVF   01,W
3CA8:  ADDLW  1A
3CAA:  MOVWF  FE9
3CAC:  MOVLW  00
3CAE:  ADDWFC 03,W
3CB0:  MOVWF  FEA
3CB2:  CLRF   FEF
....................          led7[mon][3] = 0x00; 
3CB4:  MOVF   xDC,W
3CB6:  MULLW  04
3CB8:  MOVF   FF3,W
3CBA:  CLRF   xDF
3CBC:  MOVWF  xDE
3CBE:  MOVLW  03
3CC0:  ADDWF  xDE,W
3CC2:  MOVWF  01
3CC4:  MOVLW  00
3CC6:  ADDWFC xDF,W
3CC8:  MOVWF  03
3CCA:  MOVF   01,W
3CCC:  ADDLW  1A
3CCE:  MOVWF  FE9
3CD0:  MOVLW  00
3CD2:  ADDWFC 03,W
3CD4:  MOVWF  FEA
3CD6:  CLRF   FEF
....................          led7[mon][1] = Get7Seg(1); 
3CD8:  MOVF   xDC,W
3CDA:  MULLW  04
3CDC:  MOVF   FF3,W
3CDE:  CLRF   xDF
3CE0:  MOVWF  xDE
3CE2:  MOVLW  01
3CE4:  ADDWF  xDE,W
3CE6:  MOVWF  01
3CE8:  MOVLW  00
3CEA:  ADDWFC xDF,W
3CEC:  MOVWF  03
3CEE:  MOVF   01,W
3CF0:  ADDLW  1A
3CF2:  MOVWF  01
3CF4:  MOVLW  00
3CF6:  ADDWFC 03,F
3CF8:  MOVFF  01,DE
3CFC:  MOVFF  03,DF
3D00:  MOVLW  01
3D02:  MOVWF  xE7
3D04:  CALL   14F4
3D08:  MOVFF  DF,FEA
3D0C:  MOVFF  DE,FE9
3D10:  MOVFF  01,FEF
....................          g_err_code = 1; 
3D14:  MOVLW  01
3D16:  MOVWF  xBC
....................          break; 
3D18:  GOTO   453E
....................       case SIGN_TEMP_OVERLOAD: 
....................          led7[mon][0] = 0xD6; 
3D1C:  MOVF   xDC,W
3D1E:  MULLW  04
3D20:  MOVF   FF3,W
3D22:  CLRF   xDF
3D24:  MOVWF  xDE
3D26:  MOVLW  1A
3D28:  ADDWF  xDE,W
3D2A:  MOVWF  FE9
3D2C:  MOVLW  00
3D2E:  ADDWFC xDF,W
3D30:  MOVWF  FEA
3D32:  MOVLW  D6
3D34:  MOVWF  FEF
....................          led7[mon][2] = 0x00; 
3D36:  MOVF   xDC,W
3D38:  MULLW  04
3D3A:  MOVF   FF3,W
3D3C:  CLRF   xDF
3D3E:  MOVWF  xDE
3D40:  MOVLW  02
3D42:  ADDWF  xDE,W
3D44:  MOVWF  01
3D46:  MOVLW  00
3D48:  ADDWFC xDF,W
3D4A:  MOVWF  03
3D4C:  MOVF   01,W
3D4E:  ADDLW  1A
3D50:  MOVWF  FE9
3D52:  MOVLW  00
3D54:  ADDWFC 03,W
3D56:  MOVWF  FEA
3D58:  CLRF   FEF
....................          led7[mon][3] = 0x00; 
3D5A:  MOVF   xDC,W
3D5C:  MULLW  04
3D5E:  MOVF   FF3,W
3D60:  CLRF   xDF
3D62:  MOVWF  xDE
3D64:  MOVLW  03
3D66:  ADDWF  xDE,W
3D68:  MOVWF  01
3D6A:  MOVLW  00
3D6C:  ADDWFC xDF,W
3D6E:  MOVWF  03
3D70:  MOVF   01,W
3D72:  ADDLW  1A
3D74:  MOVWF  FE9
3D76:  MOVLW  00
3D78:  ADDWFC 03,W
3D7A:  MOVWF  FEA
3D7C:  CLRF   FEF
....................          led7[mon][1] = Get7Seg(2); 
3D7E:  MOVF   xDC,W
3D80:  MULLW  04
3D82:  MOVF   FF3,W
3D84:  CLRF   xDF
3D86:  MOVWF  xDE
3D88:  MOVLW  01
3D8A:  ADDWF  xDE,W
3D8C:  MOVWF  01
3D8E:  MOVLW  00
3D90:  ADDWFC xDF,W
3D92:  MOVWF  03
3D94:  MOVF   01,W
3D96:  ADDLW  1A
3D98:  MOVWF  01
3D9A:  MOVLW  00
3D9C:  ADDWFC 03,F
3D9E:  MOVFF  01,DE
3DA2:  MOVFF  03,DF
3DA6:  MOVLW  02
3DA8:  MOVWF  xE7
3DAA:  CALL   14F4
3DAE:  MOVFF  DF,FEA
3DB2:  MOVFF  DE,FE9
3DB6:  MOVFF  01,FEF
....................          g_err_code = 2; 
3DBA:  MOVLW  02
3DBC:  MOVWF  xBC
....................          break; 
3DBE:  BRA    453E
....................       case SIGN_SET_PID_KP: 
....................          led7[mon][0] = 0xDC; 
3DC0:  MOVF   xDC,W
3DC2:  MULLW  04
3DC4:  MOVF   FF3,W
3DC6:  CLRF   xDF
3DC8:  MOVWF  xDE
3DCA:  MOVLW  1A
3DCC:  ADDWF  xDE,W
3DCE:  MOVWF  FE9
3DD0:  MOVLW  00
3DD2:  ADDWFC xDF,W
3DD4:  MOVWF  FEA
3DD6:  MOVLW  DC
3DD8:  MOVWF  FEF
....................          led7[mon][2] = 0x00; 
3DDA:  MOVF   xDC,W
3DDC:  MULLW  04
3DDE:  MOVF   FF3,W
3DE0:  CLRF   xDF
3DE2:  MOVWF  xDE
3DE4:  MOVLW  02
3DE6:  ADDWF  xDE,W
3DE8:  MOVWF  01
3DEA:  MOVLW  00
3DEC:  ADDWFC xDF,W
3DEE:  MOVWF  03
3DF0:  MOVF   01,W
3DF2:  ADDLW  1A
3DF4:  MOVWF  FE9
3DF6:  MOVLW  00
3DF8:  ADDWFC 03,W
3DFA:  MOVWF  FEA
3DFC:  CLRF   FEF
....................          led7[mon][3] = 0x00; 
3DFE:  MOVF   xDC,W
3E00:  MULLW  04
3E02:  MOVF   FF3,W
3E04:  CLRF   xDF
3E06:  MOVWF  xDE
3E08:  MOVLW  03
3E0A:  ADDWF  xDE,W
3E0C:  MOVWF  01
3E0E:  MOVLW  00
3E10:  ADDWFC xDF,W
3E12:  MOVWF  03
3E14:  MOVF   01,W
3E16:  ADDLW  1A
3E18:  MOVWF  FE9
3E1A:  MOVLW  00
3E1C:  ADDWFC 03,W
3E1E:  MOVWF  FEA
3E20:  CLRF   FEF
....................          led7[mon][1] = 0x00; 
3E22:  MOVF   xDC,W
3E24:  MULLW  04
3E26:  MOVF   FF3,W
3E28:  CLRF   xDF
3E2A:  MOVWF  xDE
3E2C:  MOVLW  01
3E2E:  ADDWF  xDE,W
3E30:  MOVWF  01
3E32:  MOVLW  00
3E34:  ADDWFC xDF,W
3E36:  MOVWF  03
3E38:  MOVF   01,W
3E3A:  ADDLW  1A
3E3C:  MOVWF  FE9
3E3E:  MOVLW  00
3E40:  ADDWFC 03,W
3E42:  MOVWF  FEA
3E44:  CLRF   FEF
....................          break; 
3E46:  BRA    453E
....................       case SIGN_SET_PID_KI: 
....................          led7[mon][0] = 0x44; 
3E48:  MOVF   xDC,W
3E4A:  MULLW  04
3E4C:  MOVF   FF3,W
3E4E:  CLRF   xDF
3E50:  MOVWF  xDE
3E52:  MOVLW  1A
3E54:  ADDWF  xDE,W
3E56:  MOVWF  FE9
3E58:  MOVLW  00
3E5A:  ADDWFC xDF,W
3E5C:  MOVWF  FEA
3E5E:  MOVLW  44
3E60:  MOVWF  FEF
....................          led7[mon][2] = 0x00; 
3E62:  MOVF   xDC,W
3E64:  MULLW  04
3E66:  MOVF   FF3,W
3E68:  CLRF   xDF
3E6A:  MOVWF  xDE
3E6C:  MOVLW  02
3E6E:  ADDWF  xDE,W
3E70:  MOVWF  01
3E72:  MOVLW  00
3E74:  ADDWFC xDF,W
3E76:  MOVWF  03
3E78:  MOVF   01,W
3E7A:  ADDLW  1A
3E7C:  MOVWF  FE9
3E7E:  MOVLW  00
3E80:  ADDWFC 03,W
3E82:  MOVWF  FEA
3E84:  CLRF   FEF
....................          led7[mon][3] = 0x00; 
3E86:  MOVF   xDC,W
3E88:  MULLW  04
3E8A:  MOVF   FF3,W
3E8C:  CLRF   xDF
3E8E:  MOVWF  xDE
3E90:  MOVLW  03
3E92:  ADDWF  xDE,W
3E94:  MOVWF  01
3E96:  MOVLW  00
3E98:  ADDWFC xDF,W
3E9A:  MOVWF  03
3E9C:  MOVF   01,W
3E9E:  ADDLW  1A
3EA0:  MOVWF  FE9
3EA2:  MOVLW  00
3EA4:  ADDWFC 03,W
3EA6:  MOVWF  FEA
3EA8:  CLRF   FEF
....................          led7[mon][1] = 0x00; 
3EAA:  MOVF   xDC,W
3EAC:  MULLW  04
3EAE:  MOVF   FF3,W
3EB0:  CLRF   xDF
3EB2:  MOVWF  xDE
3EB4:  MOVLW  01
3EB6:  ADDWF  xDE,W
3EB8:  MOVWF  01
3EBA:  MOVLW  00
3EBC:  ADDWFC xDF,W
3EBE:  MOVWF  03
3EC0:  MOVF   01,W
3EC2:  ADDLW  1A
3EC4:  MOVWF  FE9
3EC6:  MOVLW  00
3EC8:  ADDWFC 03,W
3ECA:  MOVWF  FEA
3ECC:  CLRF   FEF
....................          break; 
3ECE:  BRA    453E
....................       case SIGN_SET_PID_KD: 
....................          led7[mon][0] = 0x8F; 
3ED0:  MOVF   xDC,W
3ED2:  MULLW  04
3ED4:  MOVF   FF3,W
3ED6:  CLRF   xDF
3ED8:  MOVWF  xDE
3EDA:  MOVLW  1A
3EDC:  ADDWF  xDE,W
3EDE:  MOVWF  FE9
3EE0:  MOVLW  00
3EE2:  ADDWFC xDF,W
3EE4:  MOVWF  FEA
3EE6:  MOVLW  8F
3EE8:  MOVWF  FEF
....................          led7[mon][2] = 0x00; 
3EEA:  MOVF   xDC,W
3EEC:  MULLW  04
3EEE:  MOVF   FF3,W
3EF0:  CLRF   xDF
3EF2:  MOVWF  xDE
3EF4:  MOVLW  02
3EF6:  ADDWF  xDE,W
3EF8:  MOVWF  01
3EFA:  MOVLW  00
3EFC:  ADDWFC xDF,W
3EFE:  MOVWF  03
3F00:  MOVF   01,W
3F02:  ADDLW  1A
3F04:  MOVWF  FE9
3F06:  MOVLW  00
3F08:  ADDWFC 03,W
3F0A:  MOVWF  FEA
3F0C:  CLRF   FEF
....................          led7[mon][3] = 0x00; 
3F0E:  MOVF   xDC,W
3F10:  MULLW  04
3F12:  MOVF   FF3,W
3F14:  CLRF   xDF
3F16:  MOVWF  xDE
3F18:  MOVLW  03
3F1A:  ADDWF  xDE,W
3F1C:  MOVWF  01
3F1E:  MOVLW  00
3F20:  ADDWFC xDF,W
3F22:  MOVWF  03
3F24:  MOVF   01,W
3F26:  ADDLW  1A
3F28:  MOVWF  FE9
3F2A:  MOVLW  00
3F2C:  ADDWFC 03,W
3F2E:  MOVWF  FEA
3F30:  CLRF   FEF
....................          led7[mon][1] = 0x00; 
3F32:  MOVF   xDC,W
3F34:  MULLW  04
3F36:  MOVF   FF3,W
3F38:  CLRF   xDF
3F3A:  MOVWF  xDE
3F3C:  MOVLW  01
3F3E:  ADDWF  xDE,W
3F40:  MOVWF  01
3F42:  MOVLW  00
3F44:  ADDWFC xDF,W
3F46:  MOVWF  03
3F48:  MOVF   01,W
3F4A:  ADDLW  1A
3F4C:  MOVWF  FE9
3F4E:  MOVLW  00
3F50:  ADDWFC 03,W
3F52:  MOVWF  FEA
3F54:  CLRF   FEF
....................          break; 
3F56:  BRA    453E
....................       case SIGN_PROCESS_END: 
....................          led7[mon][0] = 0xD6; 
3F58:  MOVF   xDC,W
3F5A:  MULLW  04
3F5C:  MOVF   FF3,W
3F5E:  CLRF   xDF
3F60:  MOVWF  xDE
3F62:  MOVLW  1A
3F64:  ADDWF  xDE,W
3F66:  MOVWF  FE9
3F68:  MOVLW  00
3F6A:  ADDWFC xDF,W
3F6C:  MOVWF  FEA
3F6E:  MOVLW  D6
3F70:  MOVWF  FEF
....................          led7[mon][2] = 0xAF; 
3F72:  MOVF   xDC,W
3F74:  MULLW  04
3F76:  MOVF   FF3,W
3F78:  CLRF   xDF
3F7A:  MOVWF  xDE
3F7C:  MOVLW  02
3F7E:  ADDWF  xDE,W
3F80:  MOVWF  01
3F82:  MOVLW  00
3F84:  ADDWFC xDF,W
3F86:  MOVWF  03
3F88:  MOVF   01,W
3F8A:  ADDLW  1A
3F8C:  MOVWF  FE9
3F8E:  MOVLW  00
3F90:  ADDWFC 03,W
3F92:  MOVWF  FEA
3F94:  MOVLW  AF
3F96:  MOVWF  FEF
....................          led7[mon][3] = 0x00; 
3F98:  MOVF   xDC,W
3F9A:  MULLW  04
3F9C:  MOVF   FF3,W
3F9E:  CLRF   xDF
3FA0:  MOVWF  xDE
3FA2:  MOVLW  03
3FA4:  ADDWF  xDE,W
3FA6:  MOVWF  01
3FA8:  MOVLW  00
3FAA:  ADDWFC xDF,W
3FAC:  MOVWF  03
3FAE:  MOVF   01,W
3FB0:  ADDLW  1A
3FB2:  MOVWF  FE9
3FB4:  MOVLW  00
3FB6:  ADDWFC 03,W
3FB8:  MOVWF  FEA
3FBA:  CLRF   FEF
....................          led7[mon][1] = 0x85; 
3FBC:  MOVF   xDC,W
3FBE:  MULLW  04
3FC0:  MOVF   FF3,W
3FC2:  CLRF   xDF
3FC4:  MOVWF  xDE
3FC6:  MOVLW  01
3FC8:  ADDWF  xDE,W
3FCA:  MOVWF  01
3FCC:  MOVLW  00
3FCE:  ADDWFC xDF,W
3FD0:  MOVWF  03
3FD2:  MOVF   01,W
3FD4:  ADDLW  1A
3FD6:  MOVWF  FE9
3FD8:  MOVLW  00
3FDA:  ADDWFC 03,W
3FDC:  MOVWF  FEA
3FDE:  MOVLW  85
3FE0:  MOVWF  FEF
....................          break; 
3FE2:  BRA    453E
....................       case SIGN_T2: 
....................          led7[mon][0] = 0x00;        
3FE4:  MOVF   xDC,W
3FE6:  MULLW  04
3FE8:  MOVF   FF3,W
3FEA:  CLRF   xDF
3FEC:  MOVWF  xDE
3FEE:  MOVLW  1A
3FF0:  ADDWF  xDE,W
3FF2:  MOVWF  FE9
3FF4:  MOVLW  00
3FF6:  ADDWFC xDF,W
3FF8:  MOVWF  FEA
3FFA:  CLRF   FEF
....................          led7[mon][1] = 0x00;        
3FFC:  MOVF   xDC,W
3FFE:  MULLW  04
4000:  MOVF   FF3,W
4002:  CLRF   xDF
4004:  MOVWF  xDE
4006:  MOVLW  01
4008:  ADDWF  xDE,W
400A:  MOVWF  01
400C:  MOVLW  00
400E:  ADDWFC xDF,W
4010:  MOVWF  03
4012:  MOVF   01,W
4014:  ADDLW  1A
4016:  MOVWF  FE9
4018:  MOVLW  00
401A:  ADDWFC 03,W
401C:  MOVWF  FEA
401E:  CLRF   FEF
....................          led7[mon][2] = 0x54;       //'T' 
4020:  MOVF   xDC,W
4022:  MULLW  04
4024:  MOVF   FF3,W
4026:  CLRF   xDF
4028:  MOVWF  xDE
402A:  MOVLW  02
402C:  ADDWF  xDE,W
402E:  MOVWF  01
4030:  MOVLW  00
4032:  ADDWFC xDF,W
4034:  MOVWF  03
4036:  MOVF   01,W
4038:  ADDLW  1A
403A:  MOVWF  FE9
403C:  MOVLW  00
403E:  ADDWFC 03,W
4040:  MOVWF  FEA
4042:  MOVLW  54
4044:  MOVWF  FEF
....................          led7[mon][3] = Get7Seg(2); //'2' 
4046:  MOVF   xDC,W
4048:  MULLW  04
404A:  MOVF   FF3,W
404C:  CLRF   xDF
404E:  MOVWF  xDE
4050:  MOVLW  03
4052:  ADDWF  xDE,W
4054:  MOVWF  01
4056:  MOVLW  00
4058:  ADDWFC xDF,W
405A:  MOVWF  03
405C:  MOVF   01,W
405E:  ADDLW  1A
4060:  MOVWF  01
4062:  MOVLW  00
4064:  ADDWFC 03,F
4066:  MOVFF  01,DE
406A:  MOVFF  03,DF
406E:  MOVLW  02
4070:  MOVWF  xE7
4072:  CALL   14F4
4076:  MOVFF  DF,FEA
407A:  MOVFF  DE,FE9
407E:  MOVFF  01,FEF
....................          break; 
4082:  BRA    453E
....................        case SIGN_T3: 
....................          led7[mon][0] = 0x00;       
4084:  MOVF   xDC,W
4086:  MULLW  04
4088:  MOVF   FF3,W
408A:  CLRF   xDF
408C:  MOVWF  xDE
408E:  MOVLW  1A
4090:  ADDWF  xDE,W
4092:  MOVWF  FE9
4094:  MOVLW  00
4096:  ADDWFC xDF,W
4098:  MOVWF  FEA
409A:  CLRF   FEF
....................          led7[mon][1] = 0x00;        
409C:  MOVF   xDC,W
409E:  MULLW  04
40A0:  MOVF   FF3,W
40A2:  CLRF   xDF
40A4:  MOVWF  xDE
40A6:  MOVLW  01
40A8:  ADDWF  xDE,W
40AA:  MOVWF  01
40AC:  MOVLW  00
40AE:  ADDWFC xDF,W
40B0:  MOVWF  03
40B2:  MOVF   01,W
40B4:  ADDLW  1A
40B6:  MOVWF  FE9
40B8:  MOVLW  00
40BA:  ADDWFC 03,W
40BC:  MOVWF  FEA
40BE:  CLRF   FEF
....................          led7[mon][2] = 0x54;       //'T' 
40C0:  MOVF   xDC,W
40C2:  MULLW  04
40C4:  MOVF   FF3,W
40C6:  CLRF   xDF
40C8:  MOVWF  xDE
40CA:  MOVLW  02
40CC:  ADDWF  xDE,W
40CE:  MOVWF  01
40D0:  MOVLW  00
40D2:  ADDWFC xDF,W
40D4:  MOVWF  03
40D6:  MOVF   01,W
40D8:  ADDLW  1A
40DA:  MOVWF  FE9
40DC:  MOVLW  00
40DE:  ADDWFC 03,W
40E0:  MOVWF  FEA
40E2:  MOVLW  54
40E4:  MOVWF  FEF
....................          led7[mon][3] = Get7Seg(3); //'3' 
40E6:  MOVF   xDC,W
40E8:  MULLW  04
40EA:  MOVF   FF3,W
40EC:  CLRF   xDF
40EE:  MOVWF  xDE
40F0:  MOVLW  03
40F2:  ADDWF  xDE,W
40F4:  MOVWF  01
40F6:  MOVLW  00
40F8:  ADDWFC xDF,W
40FA:  MOVWF  03
40FC:  MOVF   01,W
40FE:  ADDLW  1A
4100:  MOVWF  01
4102:  MOVLW  00
4104:  ADDWFC 03,F
4106:  MOVFF  01,DE
410A:  MOVFF  03,DF
410E:  MOVLW  03
4110:  MOVWF  xE7
4112:  CALL   14F4
4116:  MOVFF  DF,FEA
411A:  MOVFF  DE,FE9
411E:  MOVFF  01,FEF
....................          break; 
4122:  BRA    453E
....................        case SIGN_T4: 
....................          led7[mon][0] = 0x00;        
4124:  MOVF   xDC,W
4126:  MULLW  04
4128:  MOVF   FF3,W
412A:  CLRF   xDF
412C:  MOVWF  xDE
412E:  MOVLW  1A
4130:  ADDWF  xDE,W
4132:  MOVWF  FE9
4134:  MOVLW  00
4136:  ADDWFC xDF,W
4138:  MOVWF  FEA
413A:  CLRF   FEF
....................          led7[mon][1] = 0x00;        
413C:  MOVF   xDC,W
413E:  MULLW  04
4140:  MOVF   FF3,W
4142:  CLRF   xDF
4144:  MOVWF  xDE
4146:  MOVLW  01
4148:  ADDWF  xDE,W
414A:  MOVWF  01
414C:  MOVLW  00
414E:  ADDWFC xDF,W
4150:  MOVWF  03
4152:  MOVF   01,W
4154:  ADDLW  1A
4156:  MOVWF  FE9
4158:  MOVLW  00
415A:  ADDWFC 03,W
415C:  MOVWF  FEA
415E:  CLRF   FEF
....................          led7[mon][2] = 0x54;       //'T' 
4160:  MOVF   xDC,W
4162:  MULLW  04
4164:  MOVF   FF3,W
4166:  CLRF   xDF
4168:  MOVWF  xDE
416A:  MOVLW  02
416C:  ADDWF  xDE,W
416E:  MOVWF  01
4170:  MOVLW  00
4172:  ADDWFC xDF,W
4174:  MOVWF  03
4176:  MOVF   01,W
4178:  ADDLW  1A
417A:  MOVWF  FE9
417C:  MOVLW  00
417E:  ADDWFC 03,W
4180:  MOVWF  FEA
4182:  MOVLW  54
4184:  MOVWF  FEF
....................          led7[mon][3] = Get7Seg(4); //'4' 
4186:  MOVF   xDC,W
4188:  MULLW  04
418A:  MOVF   FF3,W
418C:  CLRF   xDF
418E:  MOVWF  xDE
4190:  MOVLW  03
4192:  ADDWF  xDE,W
4194:  MOVWF  01
4196:  MOVLW  00
4198:  ADDWFC xDF,W
419A:  MOVWF  03
419C:  MOVF   01,W
419E:  ADDLW  1A
41A0:  MOVWF  01
41A2:  MOVLW  00
41A4:  ADDWFC 03,F
41A6:  MOVFF  01,DE
41AA:  MOVFF  03,DF
41AE:  MOVLW  04
41B0:  MOVWF  xE7
41B2:  CALL   14F4
41B6:  MOVFF  DF,FEA
41BA:  MOVFF  DE,FE9
41BE:  MOVFF  01,FEF
....................          break; 
41C2:  BRA    453E
....................        case SIGN_T5: 
....................          led7[mon][0] = 0x00;        
41C4:  MOVF   xDC,W
41C6:  MULLW  04
41C8:  MOVF   FF3,W
41CA:  CLRF   xDF
41CC:  MOVWF  xDE
41CE:  MOVLW  1A
41D0:  ADDWF  xDE,W
41D2:  MOVWF  FE9
41D4:  MOVLW  00
41D6:  ADDWFC xDF,W
41D8:  MOVWF  FEA
41DA:  CLRF   FEF
....................          led7[mon][1] = 0x00;        
41DC:  MOVF   xDC,W
41DE:  MULLW  04
41E0:  MOVF   FF3,W
41E2:  CLRF   xDF
41E4:  MOVWF  xDE
41E6:  MOVLW  01
41E8:  ADDWF  xDE,W
41EA:  MOVWF  01
41EC:  MOVLW  00
41EE:  ADDWFC xDF,W
41F0:  MOVWF  03
41F2:  MOVF   01,W
41F4:  ADDLW  1A
41F6:  MOVWF  FE9
41F8:  MOVLW  00
41FA:  ADDWFC 03,W
41FC:  MOVWF  FEA
41FE:  CLRF   FEF
....................          led7[mon][2] = 0x54;       //'T' 
4200:  MOVF   xDC,W
4202:  MULLW  04
4204:  MOVF   FF3,W
4206:  CLRF   xDF
4208:  MOVWF  xDE
420A:  MOVLW  02
420C:  ADDWF  xDE,W
420E:  MOVWF  01
4210:  MOVLW  00
4212:  ADDWFC xDF,W
4214:  MOVWF  03
4216:  MOVF   01,W
4218:  ADDLW  1A
421A:  MOVWF  FE9
421C:  MOVLW  00
421E:  ADDWFC 03,W
4220:  MOVWF  FEA
4222:  MOVLW  54
4224:  MOVWF  FEF
....................          led7[mon][3] = Get7Seg(5); //'5' 
4226:  MOVF   xDC,W
4228:  MULLW  04
422A:  MOVF   FF3,W
422C:  CLRF   xDF
422E:  MOVWF  xDE
4230:  MOVLW  03
4232:  ADDWF  xDE,W
4234:  MOVWF  01
4236:  MOVLW  00
4238:  ADDWFC xDF,W
423A:  MOVWF  03
423C:  MOVF   01,W
423E:  ADDLW  1A
4240:  MOVWF  01
4242:  MOVLW  00
4244:  ADDWFC 03,F
4246:  MOVFF  01,DE
424A:  MOVFF  03,DF
424E:  MOVLW  05
4250:  MOVWF  xE7
4252:  CALL   14F4
4256:  MOVFF  DF,FEA
425A:  MOVFF  DE,FE9
425E:  MOVFF  01,FEF
....................          break; 
4262:  BRA    453E
....................       case SIGN_T6: 
....................          led7[mon][0] = 0x00;        
4264:  MOVF   xDC,W
4266:  MULLW  04
4268:  MOVF   FF3,W
426A:  CLRF   xDF
426C:  MOVWF  xDE
426E:  MOVLW  1A
4270:  ADDWF  xDE,W
4272:  MOVWF  FE9
4274:  MOVLW  00
4276:  ADDWFC xDF,W
4278:  MOVWF  FEA
427A:  CLRF   FEF
....................          led7[mon][1] = 0x00;        
427C:  MOVF   xDC,W
427E:  MULLW  04
4280:  MOVF   FF3,W
4282:  CLRF   xDF
4284:  MOVWF  xDE
4286:  MOVLW  01
4288:  ADDWF  xDE,W
428A:  MOVWF  01
428C:  MOVLW  00
428E:  ADDWFC xDF,W
4290:  MOVWF  03
4292:  MOVF   01,W
4294:  ADDLW  1A
4296:  MOVWF  FE9
4298:  MOVLW  00
429A:  ADDWFC 03,W
429C:  MOVWF  FEA
429E:  CLRF   FEF
....................          led7[mon][2] = 0x54;       //'T' 
42A0:  MOVF   xDC,W
42A2:  MULLW  04
42A4:  MOVF   FF3,W
42A6:  CLRF   xDF
42A8:  MOVWF  xDE
42AA:  MOVLW  02
42AC:  ADDWF  xDE,W
42AE:  MOVWF  01
42B0:  MOVLW  00
42B2:  ADDWFC xDF,W
42B4:  MOVWF  03
42B6:  MOVF   01,W
42B8:  ADDLW  1A
42BA:  MOVWF  FE9
42BC:  MOVLW  00
42BE:  ADDWFC 03,W
42C0:  MOVWF  FEA
42C2:  MOVLW  54
42C4:  MOVWF  FEF
....................          led7[mon][3] = Get7Seg(6); //'6' 
42C6:  MOVF   xDC,W
42C8:  MULLW  04
42CA:  MOVF   FF3,W
42CC:  CLRF   xDF
42CE:  MOVWF  xDE
42D0:  MOVLW  03
42D2:  ADDWF  xDE,W
42D4:  MOVWF  01
42D6:  MOVLW  00
42D8:  ADDWFC xDF,W
42DA:  MOVWF  03
42DC:  MOVF   01,W
42DE:  ADDLW  1A
42E0:  MOVWF  01
42E2:  MOVLW  00
42E4:  ADDWFC 03,F
42E6:  MOVFF  01,DE
42EA:  MOVFF  03,DF
42EE:  MOVLW  06
42F0:  MOVWF  xE7
42F2:  CALL   14F4
42F6:  MOVFF  DF,FEA
42FA:  MOVFF  DE,FE9
42FE:  MOVFF  01,FEF
....................          break; 
4302:  BRA    453E
....................        case SIGN_T7: 
....................          led7[mon][0] = 0x00;        
4304:  MOVF   xDC,W
4306:  MULLW  04
4308:  MOVF   FF3,W
430A:  CLRF   xDF
430C:  MOVWF  xDE
430E:  MOVLW  1A
4310:  ADDWF  xDE,W
4312:  MOVWF  FE9
4314:  MOVLW  00
4316:  ADDWFC xDF,W
4318:  MOVWF  FEA
431A:  CLRF   FEF
....................          led7[mon][1] = 0x00;        
431C:  MOVF   xDC,W
431E:  MULLW  04
4320:  MOVF   FF3,W
4322:  CLRF   xDF
4324:  MOVWF  xDE
4326:  MOVLW  01
4328:  ADDWF  xDE,W
432A:  MOVWF  01
432C:  MOVLW  00
432E:  ADDWFC xDF,W
4330:  MOVWF  03
4332:  MOVF   01,W
4334:  ADDLW  1A
4336:  MOVWF  FE9
4338:  MOVLW  00
433A:  ADDWFC 03,W
433C:  MOVWF  FEA
433E:  CLRF   FEF
....................          led7[mon][2] = 0x54;       //'T' 
4340:  MOVF   xDC,W
4342:  MULLW  04
4344:  MOVF   FF3,W
4346:  CLRF   xDF
4348:  MOVWF  xDE
434A:  MOVLW  02
434C:  ADDWF  xDE,W
434E:  MOVWF  01
4350:  MOVLW  00
4352:  ADDWFC xDF,W
4354:  MOVWF  03
4356:  MOVF   01,W
4358:  ADDLW  1A
435A:  MOVWF  FE9
435C:  MOVLW  00
435E:  ADDWFC 03,W
4360:  MOVWF  FEA
4362:  MOVLW  54
4364:  MOVWF  FEF
....................          led7[mon][3] = Get7Seg(7); //'7' 
4366:  MOVF   xDC,W
4368:  MULLW  04
436A:  MOVF   FF3,W
436C:  CLRF   xDF
436E:  MOVWF  xDE
4370:  MOVLW  03
4372:  ADDWF  xDE,W
4374:  MOVWF  01
4376:  MOVLW  00
4378:  ADDWFC xDF,W
437A:  MOVWF  03
437C:  MOVF   01,W
437E:  ADDLW  1A
4380:  MOVWF  01
4382:  MOVLW  00
4384:  ADDWFC 03,F
4386:  MOVFF  01,DE
438A:  MOVFF  03,DF
438E:  MOVLW  07
4390:  MOVWF  xE7
4392:  CALL   14F4
4396:  MOVFF  DF,FEA
439A:  MOVFF  DE,FE9
439E:  MOVFF  01,FEF
....................          break; 
43A2:  BRA    453E
....................        case SIGN_CN: 
....................          led7[mon][0] = 0x00;        
43A4:  MOVF   xDC,W
43A6:  MULLW  04
43A8:  MOVF   FF3,W
43AA:  CLRF   xDF
43AC:  MOVWF  xDE
43AE:  MOVLW  1A
43B0:  ADDWF  xDE,W
43B2:  MOVWF  FE9
43B4:  MOVLW  00
43B6:  ADDWFC xDF,W
43B8:  MOVWF  FEA
43BA:  CLRF   FEF
....................          led7[mon][1] = 0x00;        
43BC:  MOVF   xDC,W
43BE:  MULLW  04
43C0:  MOVF   FF3,W
43C2:  CLRF   xDF
43C4:  MOVWF  xDE
43C6:  MOVLW  01
43C8:  ADDWF  xDE,W
43CA:  MOVWF  01
43CC:  MOVLW  00
43CE:  ADDWFC xDF,W
43D0:  MOVWF  03
43D2:  MOVF   01,W
43D4:  ADDLW  1A
43D6:  MOVWF  FE9
43D8:  MOVLW  00
43DA:  ADDWFC 03,W
43DC:  MOVWF  FEA
43DE:  CLRF   FEF
....................          led7[mon][2] = 0x56;      //'C' 
43E0:  MOVF   xDC,W
43E2:  MULLW  04
43E4:  MOVF   FF3,W
43E6:  CLRF   xDF
43E8:  MOVWF  xDE
43EA:  MOVLW  02
43EC:  ADDWF  xDE,W
43EE:  MOVWF  01
43F0:  MOVLW  00
43F2:  ADDWFC xDF,W
43F4:  MOVWF  03
43F6:  MOVF   01,W
43F8:  ADDLW  1A
43FA:  MOVWF  FE9
43FC:  MOVLW  00
43FE:  ADDWFC 03,W
4400:  MOVWF  FEA
4402:  MOVLW  56
4404:  MOVWF  FEF
....................          led7[mon][3] = 0x85;      //'N' 
4406:  MOVF   xDC,W
4408:  MULLW  04
440A:  MOVF   FF3,W
440C:  CLRF   xDF
440E:  MOVWF  xDE
4410:  MOVLW  03
4412:  ADDWF  xDE,W
4414:  MOVWF  01
4416:  MOVLW  00
4418:  ADDWFC xDF,W
441A:  MOVWF  03
441C:  MOVF   01,W
441E:  ADDLW  1A
4420:  MOVWF  FE9
4422:  MOVLW  00
4424:  ADDWFC 03,W
4426:  MOVWF  FEA
4428:  MOVLW  85
442A:  MOVWF  FEF
....................          break; 
442C:  BRA    453E
....................        case SIGN_ALL: 
....................          led7[mon][0] = 0x00;       
442E:  MOVF   xDC,W
4430:  MULLW  04
4432:  MOVF   FF3,W
4434:  CLRF   xDF
4436:  MOVWF  xDE
4438:  MOVLW  1A
443A:  ADDWF  xDE,W
443C:  MOVWF  FE9
443E:  MOVLW  00
4440:  ADDWFC xDF,W
4442:  MOVWF  FEA
4444:  CLRF   FEF
....................          led7[mon][1] = 0xDD;     //'A'   
4446:  MOVF   xDC,W
4448:  MULLW  04
444A:  MOVF   FF3,W
444C:  CLRF   xDF
444E:  MOVWF  xDE
4450:  MOVLW  01
4452:  ADDWF  xDE,W
4454:  MOVWF  01
4456:  MOVLW  00
4458:  ADDWFC xDF,W
445A:  MOVWF  03
445C:  MOVF   01,W
445E:  ADDLW  1A
4460:  MOVWF  FE9
4462:  MOVLW  00
4464:  ADDWFC 03,W
4466:  MOVWF  FEA
4468:  MOVLW  DD
446A:  MOVWF  FEF
....................          led7[mon][2] = 0x46;     //'L'   
446C:  MOVF   xDC,W
446E:  MULLW  04
4470:  MOVF   FF3,W
4472:  CLRF   xDF
4474:  MOVWF  xDE
4476:  MOVLW  02
4478:  ADDWF  xDE,W
447A:  MOVWF  01
447C:  MOVLW  00
447E:  ADDWFC xDF,W
4480:  MOVWF  03
4482:  MOVF   01,W
4484:  ADDLW  1A
4486:  MOVWF  FE9
4488:  MOVLW  00
448A:  ADDWFC 03,W
448C:  MOVWF  FEA
448E:  MOVLW  46
4490:  MOVWF  FEF
....................          led7[mon][3] = 0x46;     //'L' 
4492:  MOVF   xDC,W
4494:  MULLW  04
4496:  MOVF   FF3,W
4498:  CLRF   xDF
449A:  MOVWF  xDE
449C:  MOVLW  03
449E:  ADDWF  xDE,W
44A0:  MOVWF  01
44A2:  MOVLW  00
44A4:  ADDWFC xDF,W
44A6:  MOVWF  03
44A8:  MOVF   01,W
44AA:  ADDLW  1A
44AC:  MOVWF  FE9
44AE:  MOVLW  00
44B0:  ADDWFC 03,W
44B2:  MOVWF  FEA
44B4:  MOVLW  46
44B6:  MOVWF  FEF
....................          break; 
44B8:  BRA    453E
....................       case SIGN_BLANK: 
....................          led7[mon][0] = 0x00; 
44BA:  MOVF   xDC,W
44BC:  MULLW  04
44BE:  MOVF   FF3,W
44C0:  CLRF   xDF
44C2:  MOVWF  xDE
44C4:  MOVLW  1A
44C6:  ADDWF  xDE,W
44C8:  MOVWF  FE9
44CA:  MOVLW  00
44CC:  ADDWFC xDF,W
44CE:  MOVWF  FEA
44D0:  CLRF   FEF
....................          led7[mon][1] = 0x00; 
44D2:  MOVF   xDC,W
44D4:  MULLW  04
44D6:  MOVF   FF3,W
44D8:  CLRF   xDF
44DA:  MOVWF  xDE
44DC:  MOVLW  01
44DE:  ADDWF  xDE,W
44E0:  MOVWF  01
44E2:  MOVLW  00
44E4:  ADDWFC xDF,W
44E6:  MOVWF  03
44E8:  MOVF   01,W
44EA:  ADDLW  1A
44EC:  MOVWF  FE9
44EE:  MOVLW  00
44F0:  ADDWFC 03,W
44F2:  MOVWF  FEA
44F4:  CLRF   FEF
....................          led7[mon][2] = 0x00; 
44F6:  MOVF   xDC,W
44F8:  MULLW  04
44FA:  MOVF   FF3,W
44FC:  CLRF   xDF
44FE:  MOVWF  xDE
4500:  MOVLW  02
4502:  ADDWF  xDE,W
4504:  MOVWF  01
4506:  MOVLW  00
4508:  ADDWFC xDF,W
450A:  MOVWF  03
450C:  MOVF   01,W
450E:  ADDLW  1A
4510:  MOVWF  FE9
4512:  MOVLW  00
4514:  ADDWFC 03,W
4516:  MOVWF  FEA
4518:  CLRF   FEF
....................          led7[mon][3] = 0x00; 
451A:  MOVF   xDC,W
451C:  MULLW  04
451E:  MOVF   FF3,W
4520:  CLRF   xDF
4522:  MOVWF  xDE
4524:  MOVLW  03
4526:  ADDWF  xDE,W
4528:  MOVWF  01
452A:  MOVLW  00
452C:  ADDWFC xDF,W
452E:  MOVWF  03
4530:  MOVF   01,W
4532:  ADDLW  1A
4534:  MOVWF  FE9
4536:  MOVLW  00
4538:  ADDWFC 03,W
453A:  MOVWF  FEA
453C:  CLRF   FEF
....................          break; 
....................    } 
453E:  RETURN 0
....................     
.................... } 
....................  
.................... void SetPhaseIndicator(PROCESS_PHASE phase) 
.................... { 
....................    unsigned char tmp; 
....................    tmp = led1[3]; 
....................    if ((WAITING_PHASE <= phase)&&(phase <= IDLE_PHASE)) { 
....................       tmp |= 0x1F;  // Turn off all leds for phase indicator 
....................       switch(phase) 
....................       { 
....................          case WAITING_PHASE: 
....................             tmp &= 0xFE; 
....................             break; 
....................          case HEAT_RISING_PHASE: 
....................             tmp &= 0xFD; 
....................             break; 
....................          case HEAT_HOLDING_PHASE: 
....................             tmp &= 0xFB; 
....................             break; 
....................          case HEAT_FALLING_PHASE: 
....................             tmp &= 0xF7; 
....................             break; 
....................          case IDLE_PHASE: 
....................             tmp &= 0xEF; 
....................             PutSign(1, SIGN_PROCESS_END); 
....................             break; 
....................       } 
....................       led1[3] = tmp; 
....................    } 
.................... } 
....................  
.................... void SetStateIndicator(STATE state) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[0]; 
....................    tmp2 = led1[1]; 
....................    tmp1 |= 0x03;  //  
....................    tmp2 |= 0xE0; 
....................    if ((ST_IDLE < state)&&(state < TOTAL_NUMBER_OF_STATE)) { 
....................       switch(state) 
....................       { 
....................          case ST_SET_TIMER: 
....................          case ST_SET_WAIT_TIME: 
....................             tmp2 &= 0xBF; 
....................             break; 
....................          case ST_SET_PID_KP: 
....................          case ST_SET_HOLD_TIME: 
....................             tmp2 &= 0x7F; 
....................             break; 
....................          case ST_SET_PID_KI: 
....................          case ST_SET_SETPOINT: 
....................             tmp1 &= 0xFE; 
....................             break; 
....................          case ST_SET_PID_KD: 
....................          case ST_SET_PROTECT: 
....................             tmp1 &= 0xFD; 
....................             break; 
....................       } 
....................       led1[0] = tmp1; 
....................       led1[1] = tmp2; 
....................    } 
.................... } 
....................  
.................... void LedFanOn1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
*
60D8:  MOVLW  F0
60DA:  IORWF  33,F
....................    led1[1] &= 0xEF; 
60DC:  BCF    33.4
60DE:  GOTO   6114 (RETURN)
.................... } 
.................... void LedFanOn2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
60E2:  MOVLW  F0
60E4:  IORWF  33,F
....................    led1[1] &= 0xDF; 
60E6:  BCF    33.5
60E8:  GOTO   611C (RETURN)
.................... } 
.................... void LedFanOn3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
60EC:  MOVLW  F0
60EE:  IORWF  33,F
....................    led1[1] &= 0xBF; 
60F0:  BCF    33.6
60F2:  GOTO   6124 (RETURN)
.................... } 
.................... void LedFanOn4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
60F6:  MOVLW  F0
60F8:  IORWF  33,F
....................    led1[1] &= 0x7F; 
60FA:  BCF    33.7
60FC:  GOTO   612C (RETURN)
.................... } 
....................  
.................... void LedFanLow(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF; 
.................... } 
....................  
.................... void LedFanMedium(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF; 
.................... } 
....................  
.................... void LedFanHigh(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x8F; 
.................... } 
....................  
....................  
.................... void LedFanOnAll(void) 
.................... { 
....................    led1[1] &= 0x0F; 
.................... } 
....................  
.................... void LedFanOffAll(void) 
.................... { 
....................    led1[1] |= 0xF0; 
*
613C:  MOVLW  F0
613E:  IORWF  33,F
6140:  GOTO   68BC (RETURN)
.................... } 
....................  
.................... void LedFan1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF;  //1110 
.................... } 
.................... void LedFan2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF;  //1100 
.................... } 
.................... void LedFan3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xDF;  //1101 
.................... } 
.................... void LedFan4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x9F;  //1001 
.................... } 
.................... void LedFan5(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xBF;  //1011 
.................... } 
.................... void LedFan6(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x3F;  //0011 
.................... } 
.................... void LedFan7(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x7F;  //0111 
.................... } 
.................... void LedFan8(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x6F;  //0110 
.................... } 
....................  
.................... void SetFanSimulator1(void) 
.................... { 
....................    if (fan_rol_count == 0) 
....................    { 
....................       switch(fan_pos) 
....................       { 
....................          case 0: 
....................             LedFan1(); 
....................             fan_pos = 1; 
....................             break; 
....................          case 1: 
....................             LedFan2(); 
....................             fan_pos = 2; 
....................             break; 
....................          case 2: 
....................             LedFan3(); 
....................             fan_pos = 3; 
....................             break; 
....................          case 3: 
....................             LedFan4(); 
....................             fan_pos = 4; 
....................             break; 
....................          case 4: 
....................             LedFan5(); 
....................             fan_pos = 5; 
....................             break; 
....................          case 5: 
....................             LedFan6(); 
....................             fan_pos = 6; 
....................             break; 
....................          case 6: 
....................             LedFan7(); 
....................             fan_pos = 7; 
....................             break; 
....................          default: 
....................             LedFan8(); 
....................             fan_pos = 0; 
....................             break; 
....................       } 
....................       fan_rol_count = 6-fan_speed; 
....................    } 
.................... } 
....................  
.................... void SetFanSimulator(void) 
.................... { 
....................    if (fan_rol_count == 0) 
*
6100:  MOVF   xBD,F
6102:  BNZ   6138
....................    { 
....................       switch(fan_pos) 
6104:  MOVF   xBB,W
6106:  BZ    6112
6108:  XORLW  01
610A:  BZ    611A
610C:  XORLW  03
610E:  BZ    6122
6110:  BRA    612A
....................       { 
....................          case 0: 
....................             LedFanOn1(); 
6112:  BRA    60D8
....................             fan_pos = 1; 
6114:  MOVLW  01
6116:  MOVWF  xBB
....................             break; 
6118:  BRA    612E
....................          case 1: 
....................             LedFanOn2(); 
611A:  BRA    60E2
....................             fan_pos = 2; 
611C:  MOVLW  02
611E:  MOVWF  xBB
....................             break; 
6120:  BRA    612E
....................          case 2: 
....................             LedFanOn3(); 
6122:  BRA    60EC
....................             fan_pos = 3; 
6124:  MOVLW  03
6126:  MOVWF  xBB
....................             break; 
6128:  BRA    612E
....................          default: 
....................             LedFanOn4(); 
612A:  BRA    60F6
....................             fan_pos = 0; 
612C:  CLRF   xBB
....................             break; 
....................       } 
....................       fan_rol_count = 25-fan_speed*2; 
612E:  BCF    FD8.0
6130:  RLCF   x8B,W
6132:  XORLW  FF
6134:  ADDLW  1A
6136:  MOVWF  xBD
....................    } 
6138:  GOTO   68AE (RETURN)
.................... } 
....................  
.................... void SetFanIndicator(unsigned char level) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[1] | 0x1F; 
....................    tmp2 = led1[2] | 0xF8; 
....................    if (level > 0) { 
....................       tmp2 &= 0xF7; 
....................       if (level > 1) { 
....................          tmp2 &= 0xEF; 
....................          if (level > 2) { 
....................             tmp2 &= 0xDF; 
....................             if (level > 3) { 
....................                tmp2 &= 0xBF; 
....................                if (level > 4) { 
....................                   tmp2 &= 0x7F; 
....................                   if (level > 5) { 
....................                      tmp1 &= 0xFE; 
....................                      if (level > 6) { 
....................                         tmp1 &= 0xFD; 
....................                         if (level > 7) { 
....................                            tmp1 &= 0xFB; 
....................                            if (level > 8) { 
....................                               tmp1 &= 0xF7; 
....................                               if (level > 9) { 
....................                                  tmp1 &= 0xEF; 
....................                               }  //9 
....................                            }  //8 
....................                         }  //7 
....................                      }  //6 
....................                   }  //5 
....................                }  //4 
....................             }  //3 
....................          }  //2 
....................       }  //1 
....................    }  //0 
....................    led1[1] = tmp1; 
....................    led1[2] = tmp2; 
.................... } 
....................  
....................  
.................... #endif //#define _LEDS_H_ 
....................  
.................... #include "keys.h" 
.................... #ifndef _KEYS_H_ 
.................... #define _KEYS_H_ 
....................  
.................... #include "globals.h" 
.................... #ifndef _GLOBALS_H_ 
.................... #define _GLOBALS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... typedef union _ADC_DATA_TYPE 
.................... { 
....................    signed int32 whole; 
....................    unsigned char bytes[4]; 
.................... }ADC_DATA_TYPE; 
....................  
.................... typedef enum { 
....................    SIGN_SENSOR_BROKEN, 
....................    SIGN_TEMP_OVERLOAD, 
....................    SIGN_SET_PID_KP, 
....................    SIGN_SET_PID_KI, 
....................    SIGN_SET_PID_KD, 
....................    SIGN_PROCESS_END, 
....................    SIGN_CN, 
....................    SIGN_T2, 
....................    SIGN_T3, 
....................    SIGN_T4, 
....................    SIGN_T5, 
....................    SIGN_T6, 
....................    SIGN_T7, 
....................    SIGN_ALL, 
....................    SIGN_BLANK, 
.................... } SIGN_CODE; 
....................  
.................... typedef enum { 
....................    STATE_KEY_IDLE, 
....................    STATE_KEY_PRESSED, 
....................    STATE_KEY_HOLD, 
.................... } KEY_STATE_; 
....................  
.................... typedef enum _STATE { 
....................    ST_INVALID, 
....................    ST_IDLE, 
....................    ST_SET_PROGRAM, 
....................    ST_SET_DAY_OF_WEEK, 
....................    ST_SET_HOUR, 
....................    ST_SET_MINUTE, 
....................    ST_SET_TIME_STER_DRY, 
....................    ST_SET_SETPOINT, 
....................    ST_SET_PROTECT, 
....................    ST_SET_TIME_DELAY, 
....................    ST_SET_WAIT_TIME, 
....................    ST_SET_HOLD_TIME, 
....................    ST_DIS_TIME_DAY_HOUR, 
....................    ST_DIS_TIME_HOUR_MIN, 
....................    ST_SET_TIME_DAY_HOUR, 
....................    ST_SET_TIME_HOUR_MIN, 
....................    ST_SET_TIMER, 
....................    ST_SET_PASS, 
....................    ST_SAVE_PASS, 
....................    ST_CHECK_PASS, 
....................    ST_SET_SERI, 
....................    ST_SET_PID_KP, 
....................    ST_SET_PID_KI, 
....................    ST_SET_PID_KD, 
....................    ST_SET_OFFSET, 
....................    ST_RUN_WAITING_TIME, 
....................    ST_RUN_HEATING_TIME, 
....................    ST_RUN_HOLDING_TIME, 
....................    ST_RUN_COOLING_TIME, 
....................    ST_COMPLETED, 
....................    ST_ERR, 
....................    TOTAL_NUMBER_OF_STATE, 
.................... } STATE; 
....................  
.................... typedef enum _SET { 
....................    SET_NONE, 
....................    SET_PROGRAM_USER, 
....................    SET_TIME_REAL_TIME_CLOCK, 
....................    SET_TIME_CLOCK, 
....................    SET_DONE, 
.................... } SET; 
....................  
.................... typedef enum _SET_TIME { 
....................    SET_TIME_DAY_HOUR, 
....................    SET_TIME_HOUR_MIN, 
....................    SET_TIME_DONE, 
....................  
.................... } SET_TIME; 
....................  
.................... typedef enum _WEEKDAY { 
....................    NULLDAY, 
....................    SUNDAY, 
....................    MONDAY, 
....................    TUESDAY, 
....................    WEDNESDAY, 
....................    THURSDAY, 
....................    FRIDAY, 
....................    SATURDAY, 
....................    NONEDAY, 
.................... } WEEKDAY; 
....................  
.................... typedef enum _PROCESS_PHASE { 
....................    WAITING_PHASE, 
....................    HEAT_RISING_PHASE, 
....................    HEAT_HOLDING_PHASE, 
....................    HEAT_FALLING_PHASE, 
....................    IDLE_PHASE, 
.................... } PROCESS_PHASE; 
....................  
.................... typedef enum _OVEN_MODE { 
....................    NONE, 
....................    PROGRAM1, 
....................    PROGRAM2, 
....................    PROGRAM3, 
....................    PROGRAM4, 
....................    PROGRAM5, 
....................    PROGRAM6, 
....................    PROGRAM7, 
....................    PROGRAM8, 
....................    PROGRAM9, 
....................    PROGRAM10, 
....................    USER_MODE, 
.................... } OVEN_MODE; 
....................  
.................... typedef enum _FLAG_MODE { 
....................    MODE_STAND, 
....................    MODE_SET_1, 
....................    MODE_SET_2, 
....................    MODE_SET_3, 
....................    MODE_SET_4, 
....................    MODE_SET_5, 
....................    MODE_SET_6, 
....................    MODE_SET_7, 
....................    MODE_SET_8, 
....................    MODE_SET_9, 
....................    MODE_SET_10, 
.................... } FLAG_MODE; 
....................  
.................... #define TRIAC_CYCLE 555.0 
.................... #define TEMP_COEFF 0.652085      // 
.................... unsigned char led7[6][4]; 
.................... unsigned char led1[5]; 
.................... unsigned char temp_accum_count = 16; 
.................... STATE g_state; 
.................... STATE old_state; 
.................... OVEN_MODE g_mode = PROGRAM1; 
.................... SET g_set = SET_NONE; 
.................... //SET_TIME g_set_time; 
.................... //FLAG_MODE g_active_mode = MODE_STAND; 
....................  
.................... unsigned int16 timed_count_ms = 187;   //toggle every 1000 ms; 
.................... unsigned char pid_countdown = 0; 
.................... unsigned int16 spk_on_count; 
.................... int16    tmp_int16; 
.................... int8     key_state; 
.................... int8     key_flag = 0; 
.................... unsigned char key_code = 0; 
.................... unsigned char tmp = 0; 
.................... unsigned int8 touch_state1, touch_state2; 
.................... int16 key_hold_count, key_repeat_count; 
.................... #define KEY_HOLD_THRESHOLD (400) 
.................... #define KEY_REPEAT_TIME (10) 
....................  
.................... unsigned char sec, min, hour, day; 
.................... unsigned char last_min; 
....................  
.................... int16 user_setpoint = 15000; 
.................... int16 user_protect = 16000; 
.................... int16 user_delay_time = 15; 
.................... int16 user_ster_time = 90; 
.................... int16 i = 0; 
....................        
.................... unsigned char wait_hour, wait_min, wait_day; 
.................... unsigned char hold_hour, hold_min; 
....................  
.................... unsigned int16 password = 0, check_password = 0; 
.................... //unsigned int16 remain_time;      //unit is in minute! 
.................... unsigned int16 setpoint; 
.................... unsigned int16 protect; 
.................... unsigned int16 realTemp; 
.................... unsigned int16 t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0; 
.................... unsigned int16 t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0; 
.................... unsigned int16 delay_time; 
.................... unsigned int16 ster_time; 
.................... //unsigned int16 day_ster_time; 
.................... //unsigned int16 hour_ster_time; 
.................... //unsigned int16 user_day_ster_time; 
.................... //unsigned int16 user_hour_ster_time; 
.................... //unsigned int16 day_remain_time, hour_remain_time; 
.................... unsigned int16 pid_kp, pid_ki, pid_kd; 
.................... //unsigned int16 RTD_realTemp2; 
.................... //unsigned long long_ster_time, long_user_ster_time; 
.................... unsigned long remain_time; 
.................... //unsigned long user_hold_time; 
.................... //float TEMP_LOWER_FULLON_CORRECTION = 3000.0; 
....................  
.................... #define SETPOINT_MAX (25000) 
.................... #define SETPOINT_DEF (15000) 
.................... #define SETPOINT_MIN (1000) 
.................... #define PROTECT_MAX (31000) 
.................... #define PROTECT_DEF (31000) 
.................... #define PROTECT_MIN (1000) 
.................... #define FAN_SPEED_MAX (10) 
.................... #define FAN_SPEED_DEF (7) 
.................... #define FAN_SPEED_MIN (5) 
.................... #define DELAY_TIME_MAX (5999) 
.................... #define DELAY_TIME_DEF (0) 
.................... #define DELAY_TIME_MIN (0) 
.................... #define STER_TIME_MAX (5999) 
.................... #define STER_TIME_DEF (60) 
.................... #define STER_TIME_MIN (0) 
....................  
.................... #define PID_KP_MAX (100) 
.................... #define PID_KP_DEF (60) 
.................... #define PID_KP_MIN (0) 
.................... #define PID_KI_MAX (100) 
.................... #define PID_KI_DEF (55) 
.................... #define PID_KI_MIN (0) 
.................... #define PID_KD_MAX (100) 
.................... #define PID_KD_DEF (28) 
.................... #define PID_KD_MIN (0) 
....................  
.................... #define PID_KP_MAX1 (100) 
.................... #define PID_KP_DEF1 (65) 
.................... #define PID_KP_MIN1 (0) 
.................... #define PID_KI_MAX1 (100) 
.................... #define PID_KI_DEF1 (65) 
.................... #define PID_KI_MIN1 (0) 
.................... #define PID_KD_MAX1 (100) 
.................... #define PID_KD_DEF1 (38) 
.................... #define PID_KD_MIN1 (0) 
....................  
.................... #define PROG1_SETPOINT (12000) 
.................... #define PROG1_PROTECT (13000) 
.................... #define PROG1_DELAY_TIME (0) 
.................... #define PROG1_STER_TIME (90) 
.................... #define PROG2_SETPOINT (13000) 
.................... #define PROG2_PROTECT (14000) 
.................... #define PROG2_DELAY_TIME (0) 
.................... #define PROG2_STER_TIME (85) 
.................... #define PROG3_SETPOINT (14000) 
.................... #define PROG3_PROTECT (15000) 
.................... #define PROG3_DELAY_TIME (0) 
.................... #define PROG3_STER_TIME (80) 
.................... #define PROG4_SETPOINT (15000) 
.................... #define PROG4_PROTECT (16000) 
.................... #define PROG4_DELAY_TIME (0) 
.................... #define PROG4_STER_TIME (70) 
.................... #define PROG5_SETPOINT (16000) 
.................... #define PROG5_PROTECT (17000) 
.................... #define PROG5_DELAY_TIME (0) 
.................... #define PROG5_STER_TIME (60) 
.................... #define PROG6_SETPOINT (17000) 
.................... #define PROG6_PROTECT (18000) 
.................... #define PROG6_DELAY_TIME (0) 
.................... #define PROG6_STER_TIME (50) 
.................... #define PROG7_SETPOINT (18000) 
.................... #define PROG7_PROTECT (19000) 
.................... #define PROG7_DELAY_TIME (0) 
.................... #define PROG7_STER_TIME (45) 
.................... #define PROG8_SETPOINT (19000) 
.................... #define PROG8_PROTECT (20000) 
.................... #define PROG8_DELAY_TIME (0) 
.................... #define PROG8_STER_TIME (40) 
.................... #define PROG9_SETPOINT (20000) 
.................... #define PROG9_PROTECT (21000) 
.................... #define PROG9_DELAY_TIME (0) 
.................... #define PROG9_STER_TIME (35) 
.................... #define PROG10_SETPOINT (22000) 
.................... #define PROG10_PROTECT (23000) 
.................... #define PROG10_DELAY_TIME (0) 
.................... #define PROG10_STER_TIME (30) 
....................  
.................... #define BEEP_TIME (3) 
....................  
.................... #define OFFSET_TEMP_RANGE (3000) 
....................  
.................... #define MAX_TEMP_RANGE (32000) 
.................... //#define ADC_FILTER_COUNT (256) 
.................... #define ADC_FILTER_COUNT (16) 
....................  
.................... #define RTD_CONST (41876) 
....................  
.................... unsigned char  fan_speed = FAN_SPEED_MAX; 
.................... unsigned int16 triac_on_time1 = 0; 
.................... unsigned int16 triac_on_time_new1 = 0; 
.................... unsigned int16 triac_count1 = 0; 
.................... unsigned int16 triac_on_time2 = 0; 
.................... unsigned int16 triac_count2 = 0; 
....................  
.................... unsigned int16 seri = 0; 
.................... unsigned char adc_integ_count = 16; 
.................... signed int32 adc_integ_data; 
.................... signed int16 adc_data, adc_data_buff; 
.................... signed int16 env_temp; 
.................... signed int16 thermo_temp; 
.................... signed int16 temp_offset = 0; 
.................... signed int32 adc_value_ch0; 
.................... signed int32 adc_value_ch1; 
....................  
.................... float k_a, k_b, float_temp; 
....................  
.................... char fan_pos = 0; 
.................... char g_err_code = 0; 
.................... char fan_rol_count = 30; 
.................... char hour_min_flag = 1; 
.................... char flag_day_hour = 0; 
.................... char flag_Rs232 = 0; 
.................... char flag_Rs232_Ster = 0; 
.................... char flag_Rs232_Complete = 0; 
.................... char flag_Rs232_Err = 0; 
.................... char flag_Rs232_IDLE = 0; 
.................... char flag_Pre_Hold = 0; 
....................  
.................... unsigned char GLb_nCountAvrTemp = 0; 
....................  
.................... #endif // #define _GLOBALS_H_ 
....................  
.................... #include "cap1188.h" 
.................... #ifndef _CAP1188_H_ 
.................... #define _CAP1188_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #use fast_io(C) 
....................  
.................... #define CAP_RESET    PIN_C0 
.................... #define CAP_CS1      PIN_D4 
.................... #define CAP_CS2      PIN_D5 
.................... #define CAP_CLK      PIN_C3 
.................... #define CAP_MOSI     PIN_C4 
.................... #define CAP_MISO     PIN_C5 
....................  
.................... #inline 
.................... void cap1188_reset(void) 
.................... { 
....................    output_low(CAP_CS1); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    // 
....................    output_low(CAP_CS2); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... /* 
.................... void cap1188_clr_int(void) 
.................... { 
....................     
.................... } 
....................  
.................... void cap1188_reset_interface(void) 
.................... {    
....................    output_low(CAP_CS1); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    output_low(CAP_CS2); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... void cap1188_set_address_ptr1(int8 adr) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_set_address_ptr2(int8 adr) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... */ 
.................... void cap1188_write_data1(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_write_data2(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... int8 cap1188_read_data1(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
....................    return data; 
.................... } 
....................  
.................... int8 cap1188_read_data2(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
....................    return data; 
.................... } 
.................... /* 
.................... void cap1188_disable_int(void) 
.................... { 
....................    cap1188_write_data1(0x27, 0x00); 
....................    cap1188_write_data2(0x27,0x00); 
.................... } 
....................  
.................... void cap1188_disable_ret(void) 
.................... { 
....................    cap1188_write_data1(0x28, 0x00); 
....................    cap1188_write_data2(0x28, 0x00); 
.................... } 
.................... */ 
.................... void cap1188_init(void) 
.................... { 
....................    delay_ms(100); 
....................    cap1188_reset(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... /*void cap1188_clr_int1(void) 
.................... { 
....................    cap1188_write_data1(0, 0); 
.................... } 
....................  
.................... void cap1188_clr_int2(void) 
.................... { 
....................    cap1188_write_data2(0, 0); 
.................... }*/ 
....................  
.................... #endif   // #define _CAP1188_H_ 
....................  
....................  
....................  
.................... unsigned char Get_Key_Code(void); 
.................... unsigned char kthit(void); 
....................  
.................... #inline 
.................... void key_init(void) 
.................... { 
....................    cap1188_init(); 
*
20F2:  GOTO   0E30
20F6:  CLRF   19
20F8:  BTFSC  FF2.7
20FA:  BSF    19.7
20FC:  BCF    FF2.7
....................    //Only press generate interrupt, release doesn't: 
....................    //cap1188_write_data1(0x44, 0x41); 
....................    //cap1188_write_data2(0x44, 0x41); 
....................    //Press and hold does not generate key repeatedly; only the Up/Down keys are 
....................    // configured for repeatable: 
....................    //cap1188_write_data1(0x28, 0xF0); 
....................    //cap1188_write_data2(0x28, 0x00); 
....................    //Automatic Recalibration: 
....................    cap1188_write_data1(0x20, 0x28); 
20FE:  MOVLW  20
2100:  MOVLB  1
2102:  MOVWF  x06
2104:  MOVLW  28
2106:  MOVWF  x07
2108:  MOVLB  0
210A:  CALL   00BC
210E:  BTFSC  19.7
2110:  BSF    FF2.7
2112:  CLRF   19
2114:  BTFSC  FF2.7
2116:  BSF    19.7
2118:  BCF    FF2.7
....................    cap1188_write_data2(0x20, 0x28); 
211A:  MOVLW  20
211C:  MOVLB  1
211E:  MOVWF  x06
2120:  MOVLW  28
2122:  MOVWF  x07
2124:  MOVLB  0
2126:  CALL   0108
212A:  BTFSC  19.7
212C:  BSF    FF2.7
212E:  CLRF   19
2130:  BTFSC  FF2.7
2132:  BSF    19.7
2134:  BCF    FF2.7
....................    //Automatic Recalibration after press and hold for 11200ms: 
....................    //cap1188_write_data1(0x22, 0xF4); 
....................    //cap1188_write_data2(0x22, 0xF4); 
....................    //Touch is linked to LED for Touch 2,3,4,5,6,7 
....................    //cap1188_write_data1(0x72, 0xFC); 
....................    //cap1188_write_data2(0x72, 0x0E); 
....................    //Touch is not linked to any LED 
....................    //cap1188_write_data1(0x72, 0x00); 
....................    //cap1188_write_data2(0x72, 0x00); 
....................    //Touch is not linked to 'CLEAR'(B), 'DOWN'(E), 'UP'(F) 
....................    cap1188_write_data1(0x72, 0x00); 
2136:  MOVLW  72
2138:  MOVLB  1
213A:  MOVWF  x06
213C:  CLRF   x07
213E:  MOVLB  0
2140:  CALL   00BC
2144:  BTFSC  19.7
2146:  BSF    FF2.7
2148:  CLRF   19
214A:  BTFSC  FF2.7
214C:  BSF    19.7
214E:  BCF    FF2.7
....................    cap1188_write_data2(0x72, 0xC8); 
2150:  MOVLW  72
2152:  MOVLB  1
2154:  MOVWF  x06
2156:  MOVLW  C8
2158:  MOVWF  x07
215A:  MOVLB  0
215C:  CALL   0108
2160:  BTFSC  19.7
2162:  BSF    FF2.7
2164:  CLRF   19
2166:  BTFSC  FF2.7
2168:  BSF    19.7
216A:  BCF    FF2.7
....................    //Touch Led duty cycle reduced to 7%-0% 
....................    cap1188_write_data1(0x93, 0x00); 
216C:  MOVLW  93
216E:  MOVLB  1
2170:  MOVWF  x06
2172:  CLRF   x07
2174:  MOVLB  0
2176:  CALL   00BC
217A:  BTFSC  19.7
217C:  BSF    FF2.7
217E:  CLRF   19
2180:  BTFSC  FF2.7
2182:  BSF    19.7
2184:  BCF    FF2.7
....................    cap1188_write_data2(0x93, 0x00); 
2186:  MOVLW  93
2188:  MOVLB  1
218A:  MOVWF  x06
218C:  CLRF   x07
218E:  MOVLB  0
2190:  CALL   0108
2194:  BTFSC  19.7
2196:  BSF    FF2.7
....................    //Set sensitivity to X64 
....................    //cap1188_write_data1(0x1F, 0x1F); 
....................    //cap1188_write_data2(0x1F, 0x1F); 
....................    key_flag = 0; 
2198:  CLRF   44
....................    key_state = STATE_KEY_IDLE; 
219A:  CLRF   43
....................    key_hold_count = 0; 
219C:  CLRF   4A
219E:  CLRF   49
....................    key_repeat_count = 0; 
21A0:  CLRF   4C
21A2:  CLRF   4B
....................    key_code = 0xFF; 
21A4:  SETF   45
....................     
.................... } 
....................  
.................... #inline 
.................... void key_scan(void) { 
....................    cap1188_write_data1(0, 0); 
*
08B0:  MOVLB  1
08B2:  CLRF   x06
08B4:  CLRF   x07
08B6:  MOVLB  0
08B8:  RCALL  00BC
....................    cap1188_write_data2(0, 0); 
08BA:  MOVLB  1
08BC:  CLRF   x06
08BE:  CLRF   x07
08C0:  MOVLB  0
08C2:  RCALL  0108
....................    touch_state1 = cap1188_read_data1(3); 
08C4:  MOVLW  03
08C6:  MOVLB  1
08C8:  MOVWF  x06
08CA:  MOVLB  0
08CC:  RCALL  0154
08CE:  MOVFF  01,47
....................    touch_state2 = cap1188_read_data2(3); 
08D2:  MOVLW  03
08D4:  MOVLB  1
08D6:  MOVWF  x06
08D8:  MOVLB  0
08DA:  RCALL  01AC
08DC:  MOVFF  01,48
....................    switch(key_state) { 
08E0:  MOVF   43,W
08E2:  BZ    08EE
08E4:  XORLW  01
08E6:  BZ    0904
08E8:  XORLW  03
08EA:  BZ    0938
08EC:  BRA    09C4
....................       case STATE_KEY_IDLE: 
....................          if (touch_state1 | touch_state2) { 
08EE:  MOVF   47,W
08F0:  IORWF  48,W
08F2:  BZ    0902
....................             key_state = STATE_KEY_PRESSED; 
08F4:  MOVLW  01
08F6:  MOVWF  43
....................             key_code = Get_Key_Code(); 
08F8:  BRA    0204
08FA:  MOVFF  01,45
....................             key_hold_count = 0; 
08FE:  CLRF   4A
0900:  CLRF   49
....................          } 
....................          break; 
0902:  BRA    09C4
....................       case STATE_KEY_PRESSED: 
....................          if (touch_state1 | touch_state2) { 
0904:  MOVF   47,W
0906:  IORWF  48,W
0908:  BZ    0928
....................             key_hold_count += 1; 
090A:  MOVLW  01
090C:  ADDWF  49,F
090E:  MOVLW  00
0910:  ADDWFC 4A,F
....................             if (key_hold_count > KEY_HOLD_THRESHOLD) { 
0912:  MOVF   4A,W
0914:  SUBLW  00
0916:  BC    0926
0918:  XORLW  FF
091A:  BNZ   0922
091C:  MOVF   49,W
091E:  SUBLW  90
0920:  BC    0926
....................                key_state = STATE_KEY_HOLD; 
0922:  MOVLW  02
0924:  MOVWF  43
....................             } 
....................          } else { 
0926:  BRA    0936
....................             key_flag = 1; 
0928:  MOVLW  01
092A:  MOVWF  44
....................             key_state = STATE_KEY_IDLE; 
092C:  CLRF   43
....................             key_hold_count = 0; 
092E:  CLRF   4A
0930:  CLRF   49
....................             key_repeat_count = 0; 
0932:  CLRF   4C
0934:  CLRF   4B
....................          } 
....................          break; 
0936:  BRA    09C4
....................       case STATE_KEY_HOLD: 
....................          if (touch_state1 | touch_state2) { 
0938:  MOVF   47,W
093A:  IORWF  48,W
093C:  BZ    09BA
....................             key_repeat_count += 1; 
093E:  MOVLW  01
0940:  ADDWF  4B,F
0942:  MOVLW  00
0944:  ADDWFC 4C,F
....................             if (key_repeat_count > KEY_REPEAT_TIME) { 
0946:  MOVF   4C,F
0948:  BNZ   0950
094A:  MOVF   4B,W
094C:  SUBLW  0A
094E:  BC    09B8
....................                switch (key_code) { 
0950:  MOVF   45,W
0952:  XORLW  30
0954:  BZ    0978
0956:  XORLW  01
0958:  BZ    0982
095A:  XORLW  03
095C:  BZ    098C
095E:  XORLW  70
0960:  BZ    0996
0962:  XORLW  03
0964:  BZ    09A0
0966:  XORLW  02
0968:  BZ    09AA
096A:  XORLW  07
096C:  BZ    09AC
096E:  XORLW  01
0970:  BZ    09B6
0972:  XORLW  03
0974:  BZ    09B8
0976:  BRA    09B8
....................                  /* case '7': 
....................                   case '6': 
....................                   case '5': 
....................                   case '4': 
....................                      key_flag = 1; 
....................                      key_repeat_count = 0; 
....................                      break;*/ 
....................                   //case '0': 
....................                      //key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //break; 
....................                   case '0': 
....................                      key_flag = 1; 
0978:  MOVLW  01
097A:  MOVWF  44
....................                      key_code = 'b'; 
097C:  MOVLW  62
097E:  MOVWF  45
....................                      break; 
0980:  BRA    09B8
....................                   case '1': 
....................                      key_flag = 1; 
0982:  MOVLW  01
0984:  MOVWF  44
....................                      key_code = 'e'; 
0986:  MOVLW  65
0988:  MOVWF  45
....................                      break; 
098A:  BRA    09B8
....................                   case '2': 
....................                      key_flag = 1; 
098C:  MOVLW  01
098E:  MOVWF  44
....................                      key_code = 'f'; 
0990:  MOVLW  66
0992:  MOVWF  45
....................                      break; 
0994:  BRA    09B8
....................                   case 'B': 
....................                      key_flag = 1; 
0996:  MOVLW  01
0998:  MOVWF  44
....................                      key_code = 'h'; 
099A:  MOVLW  68
099C:  MOVWF  45
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
099E:  BRA    09B8
....................                   case 'A': 
....................                      key_flag = 1; 
09A0:  MOVLW  01
09A2:  MOVWF  44
....................                      key_code = 'a'; 
09A4:  MOVLW  61
09A6:  MOVWF  45
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
09A8:  BRA    09B8
....................                   case 'C': 
....................                     // key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
09AA:  BRA    09B8
....................                   case 'D': 
....................                      key_flag = 1; 
09AC:  MOVLW  01
09AE:  MOVWF  44
....................                      key_code = 'd'; 
09B0:  MOVLW  64
09B2:  MOVWF  45
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
09B4:  BRA    09B8
....................                   case 'E': 
....................                      //key_flag = 1; 
....................                      //key_code = 'e'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
09B6:  BRA    09B8
....................                   case 'F': 
....................                      //key_flag = 1; 
....................                      //key_code = 'f'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                } 
....................             } 
....................          } else { 
09B8:  BRA    09C4
....................             //key_flag = 1; 
....................             key_state = STATE_KEY_IDLE; 
09BA:  CLRF   43
....................             key_hold_count = 0; 
09BC:  CLRF   4A
09BE:  CLRF   49
....................             key_repeat_count = 0; 
09C0:  CLRF   4C
09C2:  CLRF   4B
....................          } 
....................          break; 
....................    } 
.................... } 
....................  
.................... unsigned char kthit(void) 
.................... { 
....................    touch_state1 = 0x01 & cap1188_read_data1(0); 
....................    if (touch_state1) { 
....................       touch_state1 = cap1188_read_data1(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data1(0, 0); 
....................       return key_code; 
....................    } 
....................    touch_state2 = 0x01 & cap1188_read_data2(0); 
....................    if (touch_state2) { 
....................       touch_state2 = cap1188_read_data2(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data2(0, 0); 
....................       return key_code; 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... unsigned char Get_Key_Code(void) 
.................... { 
....................    if(touch_state1) { 
*
0204:  MOVF   47,F
0206:  BZ    0264
....................       switch(touch_state1) 
0208:  MOVF   47,W
020A:  XORLW  01
020C:  BZ    022C
020E:  XORLW  03
0210:  BZ    0232
0212:  XORLW  06
0214:  BZ    0238
0216:  XORLW  0C
0218:  BZ    023E
021A:  XORLW  18
021C:  BZ    0244
021E:  XORLW  30
0220:  BZ    024A
0222:  XORLW  60
0224:  BZ    0250
0226:  XORLW  C0
0228:  BZ    0256
022A:  BRA    025C
....................       { 
....................          case 0x01: 
....................             return '0';   // 0 
022C:  MOVLW  30
022E:  MOVWF  01
0230:  BRA    02BC
....................          case 0x02: 
....................             return '1';   // 1 
0232:  MOVLW  31
0234:  MOVWF  01
0236:  BRA    02BC
....................          case 0x04: 
....................             return '2';   // 2 
0238:  MOVLW  32
023A:  MOVWF  01
023C:  BRA    02BC
....................          case 0x08: 
....................             return '3';   // 3 
023E:  MOVLW  33
0240:  MOVWF  01
0242:  BRA    02BC
....................          case 0x10: 
....................             return '4';   // 4 
0244:  MOVLW  34
0246:  MOVWF  01
0248:  BRA    02BC
....................          case 0x20: 
....................             return '5';   // 5 
024A:  MOVLW  35
024C:  MOVWF  01
024E:  BRA    02BC
....................          case 0x40: 
....................             return '6';   // 6 
0250:  MOVLW  36
0252:  MOVWF  01
0254:  BRA    02BC
....................          case 0x80: 
....................             return '7';   // 7 
0256:  MOVLW  37
0258:  MOVWF  01
025A:  BRA    02BC
....................          default: 
....................             return 128; 
025C:  MOVLW  80
025E:  MOVWF  01
0260:  BRA    02BC
....................       } 
....................    } else { 
0262:  BRA    02BC
....................       switch(touch_state2) 
0264:  MOVF   48,W
0266:  XORLW  01
0268:  BZ    0288
026A:  XORLW  03
026C:  BZ    028E
026E:  XORLW  06
0270:  BZ    0294
0272:  XORLW  0C
0274:  BZ    029A
0276:  XORLW  18
0278:  BZ    02A0
027A:  XORLW  30
027C:  BZ    02A6
027E:  XORLW  60
0280:  BZ    02AC
0282:  XORLW  C0
0284:  BZ    02B2
0286:  BRA    02B8
....................       { 
....................          case 0x01: 
....................             return '8';   // 8 
0288:  MOVLW  38
028A:  MOVWF  01
028C:  BRA    02BC
....................          case 0x02: 
....................             return '9';   // 9 
028E:  MOVLW  39
0290:  MOVWF  01
0292:  BRA    02BC
....................          case 0x04: 
....................             return 'A';   // A 
0294:  MOVLW  41
0296:  MOVWF  01
0298:  BRA    02BC
....................          case 0x08: 
....................             return 'B';   // B 
029A:  MOVLW  42
029C:  MOVWF  01
029E:  BRA    02BC
....................          case 0x10: 
....................             return 'C';   // C 
02A0:  MOVLW  43
02A2:  MOVWF  01
02A4:  BRA    02BC
....................          case 0x20: 
....................             return 'D';   // D 
02A6:  MOVLW  44
02A8:  MOVWF  01
02AA:  BRA    02BC
....................          case 0x40: 
....................             return 'E';   // E 
02AC:  MOVLW  45
02AE:  MOVWF  01
02B0:  BRA    02BC
....................          case 0x80: 
....................             return 'F';   // F 
02B2:  MOVLW  46
02B4:  MOVWF  01
02B6:  BRA    02BC
....................          default: 
....................             return 128; 
02B8:  MOVLW  80
02BA:  MOVWF  01
....................       } 
....................    } 
02BC:  GOTO   08FA (RETURN)
.................... } 
....................  
.................... #endif //#define _KEYS_H_ 
....................  
....................  
.................... #include "adc.h" 
.................... #ifndef _ADC_H_ 
.................... #define _ADC_H_ 
....................  
.................... #include "AFE90100.h" 
.................... #ifndef _AFE90100_H_ 
.................... #define _AFE90100_H_ 
....................  
.................... /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
.................... ! NOTE: The document of LMP90100 has error in describing reading registers. The 
.................... code for INST1 need to be 0x10 for both writing and reading, not 0x90 as stated! 
.................... !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
.................... #include "globals.h" 
.................... #ifndef _GLOBALS_H_ 
.................... #define _GLOBALS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... typedef union _ADC_DATA_TYPE 
.................... { 
....................    signed int32 whole; 
....................    unsigned char bytes[4]; 
.................... }ADC_DATA_TYPE; 
....................  
.................... typedef enum { 
....................    SIGN_SENSOR_BROKEN, 
....................    SIGN_TEMP_OVERLOAD, 
....................    SIGN_SET_PID_KP, 
....................    SIGN_SET_PID_KI, 
....................    SIGN_SET_PID_KD, 
....................    SIGN_PROCESS_END, 
....................    SIGN_CN, 
....................    SIGN_T2, 
....................    SIGN_T3, 
....................    SIGN_T4, 
....................    SIGN_T5, 
....................    SIGN_T6, 
....................    SIGN_T7, 
....................    SIGN_ALL, 
....................    SIGN_BLANK, 
.................... } SIGN_CODE; 
....................  
.................... typedef enum { 
....................    STATE_KEY_IDLE, 
....................    STATE_KEY_PRESSED, 
....................    STATE_KEY_HOLD, 
.................... } KEY_STATE_; 
....................  
.................... typedef enum _STATE { 
....................    ST_INVALID, 
....................    ST_IDLE, 
....................    ST_SET_PROGRAM, 
....................    ST_SET_DAY_OF_WEEK, 
....................    ST_SET_HOUR, 
....................    ST_SET_MINUTE, 
....................    ST_SET_TIME_STER_DRY, 
....................    ST_SET_SETPOINT, 
....................    ST_SET_PROTECT, 
....................    ST_SET_TIME_DELAY, 
....................    ST_SET_WAIT_TIME, 
....................    ST_SET_HOLD_TIME, 
....................    ST_DIS_TIME_DAY_HOUR, 
....................    ST_DIS_TIME_HOUR_MIN, 
....................    ST_SET_TIME_DAY_HOUR, 
....................    ST_SET_TIME_HOUR_MIN, 
....................    ST_SET_TIMER, 
....................    ST_SET_PASS, 
....................    ST_SAVE_PASS, 
....................    ST_CHECK_PASS, 
....................    ST_SET_SERI, 
....................    ST_SET_PID_KP, 
....................    ST_SET_PID_KI, 
....................    ST_SET_PID_KD, 
....................    ST_SET_OFFSET, 
....................    ST_RUN_WAITING_TIME, 
....................    ST_RUN_HEATING_TIME, 
....................    ST_RUN_HOLDING_TIME, 
....................    ST_RUN_COOLING_TIME, 
....................    ST_COMPLETED, 
....................    ST_ERR, 
....................    TOTAL_NUMBER_OF_STATE, 
.................... } STATE; 
....................  
.................... typedef enum _SET { 
....................    SET_NONE, 
....................    SET_PROGRAM_USER, 
....................    SET_TIME_REAL_TIME_CLOCK, 
....................    SET_TIME_CLOCK, 
....................    SET_DONE, 
.................... } SET; 
....................  
.................... typedef enum _SET_TIME { 
....................    SET_TIME_DAY_HOUR, 
....................    SET_TIME_HOUR_MIN, 
....................    SET_TIME_DONE, 
....................  
.................... } SET_TIME; 
....................  
.................... typedef enum _WEEKDAY { 
....................    NULLDAY, 
....................    SUNDAY, 
....................    MONDAY, 
....................    TUESDAY, 
....................    WEDNESDAY, 
....................    THURSDAY, 
....................    FRIDAY, 
....................    SATURDAY, 
....................    NONEDAY, 
.................... } WEEKDAY; 
....................  
.................... typedef enum _PROCESS_PHASE { 
....................    WAITING_PHASE, 
....................    HEAT_RISING_PHASE, 
....................    HEAT_HOLDING_PHASE, 
....................    HEAT_FALLING_PHASE, 
....................    IDLE_PHASE, 
.................... } PROCESS_PHASE; 
....................  
.................... typedef enum _OVEN_MODE { 
....................    NONE, 
....................    PROGRAM1, 
....................    PROGRAM2, 
....................    PROGRAM3, 
....................    PROGRAM4, 
....................    PROGRAM5, 
....................    PROGRAM6, 
....................    PROGRAM7, 
....................    PROGRAM8, 
....................    PROGRAM9, 
....................    PROGRAM10, 
....................    USER_MODE, 
.................... } OVEN_MODE; 
....................  
.................... typedef enum _FLAG_MODE { 
....................    MODE_STAND, 
....................    MODE_SET_1, 
....................    MODE_SET_2, 
....................    MODE_SET_3, 
....................    MODE_SET_4, 
....................    MODE_SET_5, 
....................    MODE_SET_6, 
....................    MODE_SET_7, 
....................    MODE_SET_8, 
....................    MODE_SET_9, 
....................    MODE_SET_10, 
.................... } FLAG_MODE; 
....................  
.................... #define TRIAC_CYCLE 555.0 
.................... #define TEMP_COEFF 0.652085      // 
.................... unsigned char led7[6][4]; 
.................... unsigned char led1[5]; 
.................... unsigned char temp_accum_count = 16; 
.................... STATE g_state; 
.................... STATE old_state; 
.................... OVEN_MODE g_mode = PROGRAM1; 
.................... SET g_set = SET_NONE; 
.................... //SET_TIME g_set_time; 
.................... //FLAG_MODE g_active_mode = MODE_STAND; 
....................  
.................... unsigned int16 timed_count_ms = 187;   //toggle every 1000 ms; 
.................... unsigned char pid_countdown = 0; 
.................... unsigned int16 spk_on_count; 
.................... int16    tmp_int16; 
.................... int8     key_state; 
.................... int8     key_flag = 0; 
.................... unsigned char key_code = 0; 
.................... unsigned char tmp = 0; 
.................... unsigned int8 touch_state1, touch_state2; 
.................... int16 key_hold_count, key_repeat_count; 
.................... #define KEY_HOLD_THRESHOLD (400) 
.................... #define KEY_REPEAT_TIME (10) 
....................  
.................... unsigned char sec, min, hour, day; 
.................... unsigned char last_min; 
....................  
.................... int16 user_setpoint = 15000; 
.................... int16 user_protect = 16000; 
.................... int16 user_delay_time = 15; 
.................... int16 user_ster_time = 90; 
.................... int16 i = 0; 
....................        
.................... unsigned char wait_hour, wait_min, wait_day; 
.................... unsigned char hold_hour, hold_min; 
....................  
.................... unsigned int16 password = 0, check_password = 0; 
.................... //unsigned int16 remain_time;      //unit is in minute! 
.................... unsigned int16 setpoint; 
.................... unsigned int16 protect; 
.................... unsigned int16 realTemp; 
.................... unsigned int16 t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0; 
.................... unsigned int16 t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0; 
.................... unsigned int16 delay_time; 
.................... unsigned int16 ster_time; 
.................... //unsigned int16 day_ster_time; 
.................... //unsigned int16 hour_ster_time; 
.................... //unsigned int16 user_day_ster_time; 
.................... //unsigned int16 user_hour_ster_time; 
.................... //unsigned int16 day_remain_time, hour_remain_time; 
.................... unsigned int16 pid_kp, pid_ki, pid_kd; 
.................... //unsigned int16 RTD_realTemp2; 
.................... //unsigned long long_ster_time, long_user_ster_time; 
.................... unsigned long remain_time; 
.................... //unsigned long user_hold_time; 
.................... //float TEMP_LOWER_FULLON_CORRECTION = 3000.0; 
....................  
.................... #define SETPOINT_MAX (25000) 
.................... #define SETPOINT_DEF (15000) 
.................... #define SETPOINT_MIN (1000) 
.................... #define PROTECT_MAX (31000) 
.................... #define PROTECT_DEF (31000) 
.................... #define PROTECT_MIN (1000) 
.................... #define FAN_SPEED_MAX (10) 
.................... #define FAN_SPEED_DEF (7) 
.................... #define FAN_SPEED_MIN (5) 
.................... #define DELAY_TIME_MAX (5999) 
.................... #define DELAY_TIME_DEF (0) 
.................... #define DELAY_TIME_MIN (0) 
.................... #define STER_TIME_MAX (5999) 
.................... #define STER_TIME_DEF (60) 
.................... #define STER_TIME_MIN (0) 
....................  
.................... #define PID_KP_MAX (100) 
.................... #define PID_KP_DEF (60) 
.................... #define PID_KP_MIN (0) 
.................... #define PID_KI_MAX (100) 
.................... #define PID_KI_DEF (55) 
.................... #define PID_KI_MIN (0) 
.................... #define PID_KD_MAX (100) 
.................... #define PID_KD_DEF (28) 
.................... #define PID_KD_MIN (0) 
....................  
.................... #define PID_KP_MAX1 (100) 
.................... #define PID_KP_DEF1 (65) 
.................... #define PID_KP_MIN1 (0) 
.................... #define PID_KI_MAX1 (100) 
.................... #define PID_KI_DEF1 (65) 
.................... #define PID_KI_MIN1 (0) 
.................... #define PID_KD_MAX1 (100) 
.................... #define PID_KD_DEF1 (38) 
.................... #define PID_KD_MIN1 (0) 
....................  
.................... #define PROG1_SETPOINT (12000) 
.................... #define PROG1_PROTECT (13000) 
.................... #define PROG1_DELAY_TIME (0) 
.................... #define PROG1_STER_TIME (90) 
.................... #define PROG2_SETPOINT (13000) 
.................... #define PROG2_PROTECT (14000) 
.................... #define PROG2_DELAY_TIME (0) 
.................... #define PROG2_STER_TIME (85) 
.................... #define PROG3_SETPOINT (14000) 
.................... #define PROG3_PROTECT (15000) 
.................... #define PROG3_DELAY_TIME (0) 
.................... #define PROG3_STER_TIME (80) 
.................... #define PROG4_SETPOINT (15000) 
.................... #define PROG4_PROTECT (16000) 
.................... #define PROG4_DELAY_TIME (0) 
.................... #define PROG4_STER_TIME (70) 
.................... #define PROG5_SETPOINT (16000) 
.................... #define PROG5_PROTECT (17000) 
.................... #define PROG5_DELAY_TIME (0) 
.................... #define PROG5_STER_TIME (60) 
.................... #define PROG6_SETPOINT (17000) 
.................... #define PROG6_PROTECT (18000) 
.................... #define PROG6_DELAY_TIME (0) 
.................... #define PROG6_STER_TIME (50) 
.................... #define PROG7_SETPOINT (18000) 
.................... #define PROG7_PROTECT (19000) 
.................... #define PROG7_DELAY_TIME (0) 
.................... #define PROG7_STER_TIME (45) 
.................... #define PROG8_SETPOINT (19000) 
.................... #define PROG8_PROTECT (20000) 
.................... #define PROG8_DELAY_TIME (0) 
.................... #define PROG8_STER_TIME (40) 
.................... #define PROG9_SETPOINT (20000) 
.................... #define PROG9_PROTECT (21000) 
.................... #define PROG9_DELAY_TIME (0) 
.................... #define PROG9_STER_TIME (35) 
.................... #define PROG10_SETPOINT (22000) 
.................... #define PROG10_PROTECT (23000) 
.................... #define PROG10_DELAY_TIME (0) 
.................... #define PROG10_STER_TIME (30) 
....................  
.................... #define BEEP_TIME (3) 
....................  
.................... #define OFFSET_TEMP_RANGE (3000) 
....................  
.................... #define MAX_TEMP_RANGE (32000) 
.................... //#define ADC_FILTER_COUNT (256) 
.................... #define ADC_FILTER_COUNT (16) 
....................  
.................... #define RTD_CONST (41876) 
....................  
.................... unsigned char  fan_speed = FAN_SPEED_MAX; 
.................... unsigned int16 triac_on_time1 = 0; 
.................... unsigned int16 triac_on_time_new1 = 0; 
.................... unsigned int16 triac_count1 = 0; 
.................... unsigned int16 triac_on_time2 = 0; 
.................... unsigned int16 triac_count2 = 0; 
....................  
.................... unsigned int16 seri = 0; 
.................... unsigned char adc_integ_count = 16; 
.................... signed int32 adc_integ_data; 
.................... signed int16 adc_data, adc_data_buff; 
.................... signed int16 env_temp; 
.................... signed int16 thermo_temp; 
.................... signed int16 temp_offset = 0; 
.................... signed int32 adc_value_ch0; 
.................... signed int32 adc_value_ch1; 
....................  
.................... float k_a, k_b, float_temp; 
....................  
.................... char fan_pos = 0; 
.................... char g_err_code = 0; 
.................... char fan_rol_count = 30; 
.................... char hour_min_flag = 1; 
.................... char flag_day_hour = 0; 
.................... char flag_Rs232 = 0; 
.................... char flag_Rs232_Ster = 0; 
.................... char flag_Rs232_Complete = 0; 
.................... char flag_Rs232_Err = 0; 
.................... char flag_Rs232_IDLE = 0; 
.................... char flag_Pre_Hold = 0; 
....................  
.................... unsigned char GLb_nCountAvrTemp = 0; 
....................  
.................... #endif // #define _GLOBALS_H_ 
....................  
....................  
.................... #include "TI_LMP90100.h" 
.................... #ifndef _TI_LMP90100_H_ 
.................... #define _TI_LMP90100_H_ 
....................  
.................... /************************************************************ 
.................... * TI LMP90100 REGISTER SET ADDRESSES 
.................... ************************************************************/ 
.................... #define TI_LMP90100_RESETCN_REG                        (0x00)             /* Reset Control */ 
....................  
.................... #define TI_LMP90100_SPI_HANDSHAKECN_REG                (0x01)             /* SPI Handshake Control */ 
.................... #define TI_LMP90100_SPI_RESET_REG                      (0x02)             /* SPI Reset Control */ 
.................... #define TI_LMP90100_SPI_STREAMCN_REG                   (0x03)             /* SPI Stream Control*/ 
....................  
.................... #define TI_LMP90100_PWRCN_REG                          (0x08)             /* Power Mode Control and Status */ 
.................... #define TI_LMP90100_DATA_ONLY_1_REG                    (0x09)             /* Data Only Read Control 1 */ 
.................... #define TI_LMP90100_DATA_ONLY_2_REG                    (0x0A)             /* Data Only Read Control 2 */ 
.................... #define TI_LMP90100_ADC_RESTART_REG                    (0x0B)             /* ADC Restart Conversion */ 
....................  
.................... #define TI_LMP90100_GPIO_DIRCN_REG                     (0x0E)             /* GPIO Direction Control */ 
.................... #define TI_LMP90100_GPIO_DAT_REG                       (0x0F)             /* GPIO Data */ 
....................  
.................... #define TI_LMP90100_BGCALCN_REG                        (0x10)             /* Background Calibration Control */ 
....................  
.................... #define TI_LMP90100_SPI_DRDYBCN_REG                    (0x11)             /* SPI Data Ready Bar Control */ 
....................  
....................  
.................... #define TI_LMP90100_ADC_AUXCN_REG                      (0x12)             /* ADC Auxillary Control */ 
.................... #define TI_LMP90100_SPI_CRC_CN_REG                     (0x13)             /* CRC Control */ 
.................... #define TI_LMP90100_SENDIAG_THLDH_REG                  (0x14)             /* Sensor Diagnostic Threshold High */ 
.................... #define TI_LMP90100_SENDIAG_THLDL_REG                  (0x15)             /* Sensor Diagnostic Threshold Low */ 
....................  
.................... #define TI_LMP90100_SCALCN_REG                         (0x17)             /* System Calibration Control */ 
.................... #define TI_LMP90100_ADC_DONE_REG                       (0x18)             /* ADC Data Available */ 
.................... #define TI_LMP90100_SENDIAG_FLAGS_REG                  (0x19)             /* Sensor Diagnostic Flags */ 
.................... #define TI_LMP90100_ADC_DOUT2_REG                      (0x1A)             /* ADC Conversion Data 2 */ 
.................... #define TI_LMP90100_ADC_DOUT1_REG                      (0x1B)             /* ADC Conversion Data 1 */ 
.................... #define TI_LMP90100_ADC_DOUT0_REG                      (0x1C)             /* ADC Conversion Data 0 */ 
.................... #define TI_LMP90100_SPI_CRC_DAT_REG                    (0x1D)             /* CRC Data */ 
....................  
.................... #define TI_LMP90100_CH_STS_REG                         (0x1E)             /* Channel Status */ 
.................... #define TI_LMP90100_CH_SCAN_NRDY                       (0x02)             /* Channel Scan Not Ready Bit */ 
....................  
.................... #define TI_LMP90100_CH_SCAN_REG                        (0x1F)             /* Channel Scan Mode */ 
.................... #define TI_LMP90100_CH0_INPUTCN_REG                    (0x20)             /* CH0 Input Control */ 
.................... #define TI_LMP90100_CH0_CONFIG_REG                     (0x21)             /* CH0 Configuration */ 
.................... #define TI_LMP90100_CH1_INPUTCN_REG                    (0x22)             /* CH1 Input Control */ 
.................... #define TI_LMP90100_CH1_CONFIG_REG                     (0x23)             /* CH1 Configuration */ 
.................... #define TI_LMP90100_CH2_INPUTCN_REG                    (0x24)             /* CH2 Input Control */ 
.................... #define TI_LMP90100_CH2_CONFIG_REG                     (0x25)             /* CH2 Configuration */ 
.................... #define TI_LMP90100_CH3_INPUTCN_REG                    (0x26)             /* CH3 Input Control */ 
.................... #define TI_LMP90100_CH3_CONFIG_REG                     (0x27)             /* CH3 Configuration */ 
.................... #define TI_LMP90100_CH4_INPUTCN_REG                    (0x28)             /* CH4 Input Control */ 
.................... #define TI_LMP90100_CH4_CONFIG_REG                     (0x29)             /* CH4 Configuration */ 
.................... #define TI_LMP90100_CH5_INPUTCN_REG                    (0x2A)             /* CH5 Input Control */ 
.................... #define TI_LMP90100_CH5_CONFIG_REG                     (0x2B)             /* CH5 Configuration */ 
.................... #define TI_LMP90100_CH6_INPUTCN_REG                    (0x2C)             /* CH6 Input Control */ 
.................... #define TI_LMP90100_CH6_CONFIG_REG                     (0x2D)             /* CH6 Configuration */ 
....................  
.................... #define TI_LMP90100_CH0_SCAL_OFFSET2_REG               (0x30)             /* CH0 System Calibration Offset Coefficient [23:16] */ 
.................... #define TI_LMP90100_CH0_SCAL_OFFSET1_REG               (0x31)             /* CH0 System Calibration Offset Coefficient [15:8] */ 
.................... #define TI_LMP90100_CH0_SCAL_OFFSET0_REG               (0x32)             /* CH0 System Calibration Offset Coefficient [7:0] */ 
.................... #define TI_LMP90100_CH0_SCAL_GAIN2_REG                 (0x33)             /* CH0 System Calibration Gain Coefficient [23:16]  */ 
.................... #define TI_LMP90100_CH0_SCAL_GAIN1_REG                 (0x34)             /* CH0 System Calibration Gain Coefficient [15:8]  */ 
.................... #define TI_LMP90100_CH0_SCAL_GAIN0_REG                 (0x35)             /* CH0 System Calibration Gain Coefficient [7:0]  */  
.................... #define TI_LMP90100_CH0_SCAL_SCALING_REG               (0x36)             /* CH0 System Calibration Scaling Coefficient */ 
.................... #define TI_LMP90100_CH0_SCAL_BITS_SELECTOR_REG         (0x37)             /* CH0 System Calibration Bits Selector */ 
....................  
.................... #define TI_LMP90100_CH1_SCAL_OFFSET2_REG               (0x38)             /* CH1 System Calibration Offset Coefficient [23:16] */ 
.................... #define TI_LMP90100_CH1_SCAL_OFFSET1_REG               (0x39)             /* CH1 System Calibration Offset Coefficient [15:8] */ 
.................... #define TI_LMP90100_CH1_SCAL_OFFSET0_REG               (0x3A)             /* CH1 System Calibration Offset Coefficient [7:0] */ 
.................... #define TI_LMP90100_CH1_SCAL_GAIN2_REG                 (0x3B)             /* CH1 System Calibration Gain Coefficient [23:16]  */ 
.................... #define TI_LMP90100_CH1_SCAL_GAIN1_REG                 (0x3C)             /* CH1 System Calibration Gain Coefficient [15:8]  */ 
.................... #define TI_LMP90100_CH1_SCAL_GAIN0_REG                 (0x3D)             /* CH1 System Calibration Gain Coefficient [7:0]  */  
.................... #define TI_LMP90100_CH1_SCAL_SCALING_REG               (0x3E)             /* CH1 System Calibration Scaling Coefficient */ 
.................... #define TI_LMP90100_CH1_SCAL_BITS_SELECTOR_REG         (0x3F)             /* CH1 System Calibration Bits Selector */ 
....................  
.................... #define TI_LMP90100_CH2_SCAL_OFFSET2_REG               (0x40)             /* CH2 System Calibration Offset Coefficient [23:16] */ 
.................... #define TI_LMP90100_CH2_SCAL_OFFSET1_REG               (0x41)             /* CH2 System Calibration Offset Coefficient [15:8] */ 
.................... #define TI_LMP90100_CH2_SCAL_OFFSET0_REG               (0x42)             /* CH2 System Calibration Offset Coefficient [7:0] */ 
.................... #define TI_LMP90100_CH2_SCAL_GAIN2_REG                 (0x43)             /* CH2 System Calibration Gain Coefficient [23:16]  */ 
.................... #define TI_LMP90100_CH2_SCAL_GAIN1_REG                 (0x44)             /* CH2 System Calibration Gain Coefficient [15:8]  */ 
.................... #define TI_LMP90100_CH2_SCAL_GAIN0_REG                 (0x45)             /* CH2 System Calibration Gain Coefficient [7:0]  */ 
.................... #define TI_LMP90100_CH2_SCAL_SCALING_REG               (0x46)             /* CH2 System Calibration Scaling Coefficient */ 
.................... #define TI_LMP90100_CH2_SCAL_BITS_SELECTOR_REG         (0x47)             /* CH2 System Calibration Bits Selector */ 
....................  
.................... #define TI_LMP90100_CH3_SCAL_OFFSET2_REG               (0x48)             /* CH3 System Calibration Offset Coefficient [23:16] */ 
.................... #define TI_LMP90100_CH3_SCAL_OFFSET1_REG               (0x49)             /* CH3 System Calibration Offset Coefficient [15:8] */ 
.................... #define TI_LMP90100_CH3_SCAL_OFFSET0_REG               (0x4A)             /* CH3 System Calibration Offset Coefficient [7:0] */ 
.................... #define TI_LMP90100_CH3_SCAL_GAIN2_REG                 (0x4B)             /* CH3 System Calibration Gain Coefficient [23:16]  */ 
.................... #define TI_LMP90100_CH3_SCAL_GAIN1_REG                 (0x4C)             /* CH3 System Calibration Gain Coefficient [15:8]  */ 
.................... #define TI_LMP90100_CH3_SCAL_GAIN0_REG                 (0x4D)             /* CH3 System Calibration Gain Coefficient [7:0]  */  
.................... #define TI_LMP90100_CH3_SCAL_SCALING_REG               (0x4E)             /* CH3 System Calibration Scaling Coefficient */ 
.................... #define TI_LMP90100_CH3_SCAL_BITS_SELECTOR_REG         (0x4F)             /* CH3 System Calibration Bits Selector */ 
....................  
.................... // Data output rate, Gain, buffer: 
.................... #define LMP90100_ODR_1SPS                            (0x00) 
.................... #define LMP90100_ODR_3SPS                            (0x10) 
.................... #define LMP90100_ODR_7SPS                            (0x20) 
.................... #define LMP90100_ODR_13SPS                           (0x30) 
.................... #define LMP90100_ODR_27SPS                           (0x40) 
.................... #define LMP90100_ODR_54SPS                           (0x50) 
.................... #define LMP90100_ODR_107SPS                            (0x60) 
.................... #define LMP90100_ODR_214SPS                            (0x70) 
....................  
.................... #define LMP90100_PGA_1                                 (0x00) 
.................... #define LMP90100_PGA_2                                 (0x02) 
.................... #define LMP90100_PGA_4                                 (0x04) 
.................... #define LMP90100_PGA_8                                 (0x06) 
.................... #define LMP90100_PGA_16                                (0x08) 
.................... #define LMP90100_PGA_32                                (0x0A) 
.................... #define LMP90100_PGA_64                                (0x0C) 
.................... #define LMP90100_PGA_128                               (0x0E) 
.................... #define LMP90100_BUF_DIS                               (0x01) 
....................  
....................  
....................  
....................  
.................... // Useful definitions 
.................... #define LMP90100_URA_END                               (0xFF) 
.................... #define LMP90100_URA_MASK                              (0x70) 
.................... #define LMP90100_LRA_MASK                              (0x0F) 
.................... #define LMP90100_READ_BIT                              (0x80) 
.................... #define LMP90100_WRITE_BIT                             (0x00) 
.................... #define LMP90100_SIZE_1B                               (0x00) 
.................... #define LMP90100_SIZE_2B                               (0x20) 
.................... #define LMP90100_SIZE_3B                               (0x40) 
.................... #define LMP90100_SIZE_STREAM                           (0x60) 
.................... #define LMP90100_CH_NUM_MASK                           (0x07) 
....................  
.................... #define LMP90100_INSTRUCTION_BYTE1_WRITE               (0x10) 
.................... #define LMP90100_DATA_FIRST_MODE_INSTRUCTION_ENABLE    (0xFA) 
.................... #define LMP90100_DATA_FIRST_MODE_INSTRUCTION_DISABLE   (0xFB) 
.................... #define LMP90100_DATA_FIRST_MODE_INSTRUCTION_READ_MODE_STATUS    (0x9F) 
.................... #define LMP90100_DATA_FIRST_MODE_STATUS_FLAG           (0x80) 
....................  
.................... enum crc_check { CRC_PASS, CRC_FAIL, CRC_NOT_USED}; 
....................  
....................  
.................... #endif                                                        // _TI_LMP90100_H_ 
....................  
....................  
....................  
.................... unsigned char URA = 0; 
....................  
....................  
.................... void AFE90100_init(void) 
.................... { 
....................    /*** Note the CCS compiler has error in the setup_spi,where the SPI_L_TO_H 
....................       or SPI_H_TO_L does not work, use a constant such as 0x4010, ref from link: 
....................       "http://www.ccsinfo.com/forum/viewtopic.php?t=20611" 
....................    ***/ 
....................    //my_spi_init(); 
.................... } 
....................  
.................... void AFE90100_WriteReg(unsigned char addr, unsigned char value) 
.................... { 
....................    unsigned char new_URA, inst; 
....................    output_low(PIN_A0);                          //Enable the AFE90100 
*
0E7E:  BCF    F89.0
....................    new_URA = (addr & LMP90100_URA_MASK)>>4; 
0E80:  MOVF   xDC,W
0E82:  ANDLW  70
0E84:  MOVWF  00
0E86:  SWAPF  00,W
0E88:  MOVWF  xDE
0E8A:  MOVLW  0F
0E8C:  ANDWF  xDE,F
....................    if (new_URA != URA) 
0E8E:  MOVF   xC8,W
0E90:  SUBWF  xDE,W
0E92:  BZ    0EB0
....................    { 
....................       inst = LMP90100_INSTRUCTION_BYTE1_WRITE;                                 // Transaction-1 
0E94:  MOVLW  10
0E96:  MOVWF  xDF
....................       spi_write(inst); 
0E98:  MOVF   FC9,W
0E9A:  MOVFF  DF,FC9
0E9E:  RRCF   FC7,W
0EA0:  BNC   0E9E
....................       URA = new_URA; 
0EA2:  MOVFF  DE,C8
....................       spi_write(URA); 
0EA6:  MOVF   FC9,W
0EA8:  MOVFF  C8,FC9
0EAC:  RRCF   FC7,W
0EAE:  BNC   0EAC
....................    } 
....................    inst = LMP90100_WRITE_BIT | LMP90100_SIZE_1B |(addr & LMP90100_LRA_MASK);    // lower register address 
0EB0:  MOVF   xDC,W
0EB2:  ANDLW  0F
0EB4:  MOVWF  xDF
....................    spi_write(inst);                                                            // Send lower register address 
0EB6:  MOVF   FC9,W
0EB8:  MOVFF  DF,FC9
0EBC:  RRCF   FC7,W
0EBE:  BNC   0EBC
....................    spi_write(value);                                                           // Send data value   
0EC0:  MOVF   FC9,W
0EC2:  MOVFF  DD,FC9
0EC6:  RRCF   FC7,W
0EC8:  BNC   0EC6
....................    output_high(PIN_A0);                          //Disable the AFE90100 
0ECA:  BSF    F89.0
0ECC:  RETURN 0
.................... } 
....................  
.................... unsigned char AFE90100_ReadReg(unsigned char addr) 
.................... { 
....................    unsigned char new_URA, inst, value; 
....................    output_low(PIN_A0);                          //Enable the AFE90100 
*
02C0:  BCF    F89.0
....................    new_URA = (addr & LMP90100_URA_MASK)>>4; 
02C2:  MOVLB  1
02C4:  MOVF   x0B,W
02C6:  ANDLW  70
02C8:  MOVWF  00
02CA:  SWAPF  00,W
02CC:  MOVWF  x0C
02CE:  MOVLW  0F
02D0:  ANDWF  x0C,F
....................    if (new_URA != URA) 
02D2:  MOVLB  0
02D4:  MOVF   xC8,W
02D6:  MOVLB  1
02D8:  SUBWF  x0C,W
02DA:  BZ    02F8
....................    { 
....................       inst = LMP90100_INSTRUCTION_BYTE1_WRITE;                                 // Transaction-1 
02DC:  MOVLW  10
02DE:  MOVWF  x0D
....................       spi_write(inst); 
02E0:  MOVF   FC9,W
02E2:  MOVFF  10D,FC9
02E6:  RRCF   FC7,W
02E8:  BNC   02E6
....................       URA = new_URA; 
02EA:  MOVFF  10C,C8
....................       spi_write(URA); 
02EE:  MOVF   FC9,W
02F0:  MOVFF  C8,FC9
02F4:  RRCF   FC7,W
02F6:  BNC   02F4
....................    } 
....................    inst = LMP90100_READ_BIT | LMP90100_SIZE_1B |(addr & LMP90100_LRA_MASK);    // lower register address 
02F8:  MOVF   x0B,W
02FA:  ANDLW  0F
02FC:  IORLW  80
02FE:  MOVWF  x0D
....................    spi_write(inst);                                                            // Send lower register address 
0300:  MOVF   FC9,W
0302:  MOVFF  10D,FC9
0306:  RRCF   FC7,W
0308:  BNC   0306
....................    value = spi_read(0x00);                                                           // Send data value   
030A:  MOVF   FC9,W
030C:  CLRF   FC9
030E:  RRCF   FC7,W
0310:  BNC   030E
0312:  MOVFF  FC9,10E
....................    output_high(PIN_A0);                          //Disable the AFE90100 
0316:  BSF    F89.0
....................    return value; 
0318:  MOVFF  10E,01
031C:  MOVLB  0
031E:  RETURN 0
.................... } 
....................  
.................... void  AFE90100_SetPGA(unsigned char ch, unsigned char pga) 
.................... { 
....................    AFE90100_WriteReg(ch, pga); 
.................... } 
....................  
.................... signed int32 AFE90100_ReadADC(void) 
.................... { 
....................   ADC_DATA_TYPE adc_data; 
....................   adc_data.bytes[3] = AFE90100_ReadReg(TI_LMP90100_ADC_DOUT2_REG); 
0320:  MOVLW  1A
0322:  MOVLB  1
0324:  MOVWF  x0B
0326:  MOVLB  0
0328:  RCALL  02C0
032A:  MOVFF  01,10A
....................   adc_data.bytes[2] = AFE90100_ReadReg(TI_LMP90100_ADC_DOUT1_REG); 
032E:  MOVLW  1B
0330:  MOVLB  1
0332:  MOVWF  x0B
0334:  MOVLB  0
0336:  RCALL  02C0
0338:  MOVFF  01,109
....................   adc_data.bytes[1] = AFE90100_ReadReg(TI_LMP90100_ADC_DOUT0_REG); 
033C:  MOVLW  1C
033E:  MOVLB  1
0340:  MOVWF  x0B
0342:  MOVLB  0
0344:  RCALL  02C0
0346:  MOVFF  01,108
....................   adc_data.bytes[0] = 0; 
034A:  MOVLB  1
034C:  CLRF   x07
....................   return adc_data.whole; 
034E:  MOVFF  107,00
0352:  MOVFF  108,01
0356:  MOVFF  109,02
035A:  MOVFF  10A,03
035E:  MOVLB  0
0360:  RETURN 0
.................... } 
....................  
.................... #endif //#define _AFE90100_H_ 
....................  
....................  
.................... #inline 
.................... void adc_init(void) 
.................... { 
....................    //Set scan mode to "Continuous scan", from CH0 to CH1; 10001000 
....................    AFE90100_WriteReg(TI_LMP90100_CH_SCAN_REG, 0x88); 
*
21A6:  MOVLW  1F
21A8:  MOVWF  xDC
21AA:  MOVLW  88
21AC:  MOVWF  xDD
21AE:  CALL   0E7E
....................    //Set CH0 to measure thermocouple (IN4-IN3); REF = REFP1-REFN1;00100011 
....................    AFE90100_WriteReg(TI_LMP90100_CH0_INPUTCN_REG, 0x23); 
21B2:  MOVLW  20
21B4:  MOVWF  xDC
21B6:  MOVLW  23
21B8:  MOVWF  xDD
21BA:  CALL   0E7E
....................    //Set CH0 sample rate to 13SPS and CH0 gain to X128.  
....................    AFE90100_WriteReg(TI_LMP90100_CH0_CONFIG_REG, LMP90100_ODR_13SPS|LMP90100_PGA_128); 
21BE:  MOVLW  21
21C0:  MOVWF  xDC
21C2:  MOVLW  3E
21C4:  MOVWF  xDD
21C6:  CALL   0E7E
....................    //Set CH1 to measure lm335 (IN5-IN3); REF = REFP1-REFN1; 00101011 
....................    AFE90100_WriteReg(TI_LMP90100_CH1_INPUTCN_REG, 0x2B); 
21CA:  MOVLW  22
21CC:  MOVWF  xDC
21CE:  MOVLW  2B
21D0:  MOVWF  xDD
21D2:  CALL   0E7E
....................    //Set CH1 sample rate to 13SPS and CH1 gain to X1. 00110000 
....................    AFE90100_WriteReg(TI_LMP90100_CH1_CONFIG_REG, LMP90100_ODR_13SPS|LMP90100_PGA_1); 
21D6:  MOVLW  23
21D8:  MOVWF  xDC
21DA:  MOVLW  30
21DC:  MOVWF  xDD
21DE:  CALL   0E7E
....................    adc_data = 0; 
21E2:  CLRF   x9E
21E4:  CLRF   x9D
....................    adc_integ_data = 0; 
21E6:  CLRF   x9C
21E8:  CLRF   x9B
21EA:  CLRF   x9A
21EC:  CLRF   x99
....................    adc_integ_count = ADC_FILTER_COUNT; 
21EE:  MOVLW  10
21F0:  MOVWF  x98
....................    float_temp = 0.0; 
21F2:  CLRF   xBA
21F4:  CLRF   xB9
21F6:  CLRF   xB8
21F8:  CLRF   xB7
....................    k_b = 0.80; 
21FA:  MOVLW  CD
21FC:  MOVWF  xB6
21FE:  MOVLW  CC
2200:  MOVWF  xB5
2202:  MOVLW  4C
2204:  MOVWF  xB4
2206:  MOVLW  7E
2208:  MOVWF  xB3
....................    k_a = 1.0-k_b; 
220A:  BSF    FD8.1
220C:  CLRF   xF7
220E:  CLRF   xF6
2210:  CLRF   xF5
2212:  MOVLW  7F
2214:  MOVWF  xF4
2216:  MOVFF  B6,FB
221A:  MOVFF  B5,FA
221E:  MOVFF  B4,F9
2222:  MOVFF  B3,F8
2226:  CALL   0ECE
222A:  MOVFF  03,B2
222E:  MOVFF  02,B1
2232:  MOVFF  01,B0
2236:  MOVFF  00,AF
.................... } 
.................... /* 
.................... T = ADC_OUT/X; 
.................... 120 degree --> RTD = 146.07 ohm 
.................... 12000(T) --> 46.07/400 * 2^31 
.................... X = 41223 
.................... ADC_DOUT = 46.07/(4*100)*2^N =  
.................... T = R/0.3839 
.................... ADC_OUT * 100 = (T*0.3839)*2^29; 
.................... T = ADC_OUT/(0.3839*2^27); 
.................... */ 
....................  
.................... int8 adc_ch = 0; 
.................... #inline 
.................... void adc_scan(void) 
*
09C4:  MOVLB  1
09C6:  CLRF   x06
.................... { 
....................    int8 adc_done = 0; 
....................    adc_done = AFE90100_ReadReg(0x18); //ADC_DONE register's address is 0x18. 
09C8:  MOVLW  18
09CA:  MOVWF  x0B
09CC:  MOVLB  0
09CE:  RCALL  02C0
09D0:  MOVFF  01,106
....................    if(adc_done != 0xFF){ 
09D4:  MOVLB  1
09D6:  INCFSZ x06,W
09D8:  BRA    09DC
09DA:  BRA    0A16
....................       adc_ch = 0x07 & AFE90100_ReadReg(0x19);//SAMPLED_CH is 3 LSB of SENDIAG_FLAG (address 0x19) 
09DC:  MOVLW  19
09DE:  MOVWF  x0B
09E0:  MOVLB  0
09E2:  RCALL  02C0
09E4:  MOVF   01,W
09E6:  ANDLW  07
09E8:  MOVWF  xC9
....................       if(adc_ch == 0) {//channel 0 
09EA:  MOVF   xC9,F
09EC:  BNZ   0A02
....................          adc_value_ch0 = AFE90100_ReadADC(); 
09EE:  RCALL  0320
09F0:  MOVFF  03,AA
09F4:  MOVFF  02,A9
09F8:  MOVFF  01,A8
09FC:  MOVFF  00,A7
....................       } else { //channel 1 
0A00:  BRA    0A14
....................          adc_value_ch1 = AFE90100_ReadADC(); 
0A02:  RCALL  0320
0A04:  MOVFF  03,AE
0A08:  MOVFF  02,AD
0A0C:  MOVFF  01,AC
0A10:  MOVFF  00,AB
0A14:  MOVLB  1
....................       } 
....................    } 
.................... } 
....................  
.................... /* 
....................    LM335: 10mV / degree 
.................... */ 
.................... /* 
....................    Type K: PGA = 128. 
....................    V_K = 19.5mV --> ADC_Out = 0x3FFFFFFF 
....................    V_K = 19.494 --> T = 473 deg; 
....................    t = ADC_Out * 47300 / 0x7FFFFFFF ~ ADC_Out / 22701 
....................    V_K = 4.096mV --> T = 100 deg;  
....................    V_K = 4.096mV --> ADC_Out = 225540847. 
....................    t = ADC_Out * 10000 / 225540847 ~ ADC_Out / 22554 
.................... */ 
....................  
.................... #define THERMO_COEFF (22701) 
....................  
.................... void get_temp(void) 
.................... { 
....................    thermo_temp = adc_value_ch0/THERMO_COEFF; 
*
5D60:  BCF    FD8.1
5D62:  MOVFF  AA,DF
5D66:  MOVFF  A9,DE
5D6A:  MOVFF  A8,DD
5D6E:  MOVFF  A7,DC
5D72:  CLRF   xE3
5D74:  CLRF   xE2
5D76:  MOVLW  58
5D78:  MOVWF  xE1
5D7A:  MOVLW  AD
5D7C:  MOVWF  xE0
5D7E:  RCALL  5C7C
5D80:  MOVFF  01,A4
5D84:  MOVFF  00,A3
....................    env_temp = adc_value_ch1/42950 - 2300; 
5D88:  BCF    FD8.1
5D8A:  MOVFF  AE,DF
5D8E:  MOVFF  AD,DE
5D92:  MOVFF  AC,DD
5D96:  MOVFF  AB,DC
5D9A:  CLRF   xE3
5D9C:  CLRF   xE2
5D9E:  MOVLW  A7
5DA0:  MOVWF  xE1
5DA2:  MOVLW  C6
5DA4:  MOVWF  xE0
5DA6:  RCALL  5C7C
5DA8:  MOVFF  03,DF
5DAC:  MOVFF  02,DE
5DB0:  MOVFF  01,DD
5DB4:  MOVFF  00,DC
5DB8:  MOVLW  FC
5DBA:  SUBWF  00,W
5DBC:  MOVWF  00
5DBE:  MOVLW  08
5DC0:  SUBWFB 01,W
5DC2:  MOVWF  01
5DC4:  MOVLW  00
5DC6:  SUBWFB 02,W
5DC8:  MOVLW  00
5DCA:  SUBWFB 03,W
5DCC:  MOVFF  01,A2
5DD0:  MOVFF  00,A1
....................    adc_data_buff = thermo_temp + env_temp; 
5DD4:  MOVF   xA1,W
5DD6:  ADDWF  xA3,W
5DD8:  MOVWF  x9F
5DDA:  MOVF   xA2,W
5DDC:  ADDWFC xA4,W
5DDE:  MOVWF  xA0
5DE0:  GOTO   5E3C (RETURN)
....................    //adc_data_buff = thermo_temp + env_temp + temp_offset; 
.................... } 
....................  
.................... void read_lm335(void) 
.................... { 
....................    //Set CH0 to measure lm335 (IN5-IN7); REF = REFP1-REFN1; 00101111 
....................    AFE90100_WriteReg(TI_LMP90100_CH0_INPUTCN_REG, 0x2F); 
....................    //Set CH0 sample rate to 13SPS and CH0 gain to X1.  
....................    AFE90100_WriteReg(TI_LMP90100_CH0_CONFIG_REG, LMP90100_ODR_13SPS|LMP90100_PGA_1); 
....................    delay_ms(100); 
....................    //10mV/deg; 2.98V @ 25 deg 
....................    env_temp = AFE90100_ReadADC()/85899 - 27300; 
.................... } 
....................  
.................... void read_thermocouple(void) 
.................... { 
....................    //Set CH0 to measure thermocouple (IN3-IN4); REF = REFP1-REFN1;00100011 
....................    AFE90100_WriteReg(TI_LMP90100_CH0_INPUTCN_REG, 0x23); 
....................    //Set CH0 sample rate to 13SPS and CH0 gain to X128.  
....................    AFE90100_WriteReg(TI_LMP90100_CH0_CONFIG_REG, LMP90100_ODR_13SPS|LMP90100_PGA_128); 
....................    delay_ms(100); 
....................    //39uV/deg; X128 --> 5mV/deg 2.98V @ 25 degree 
....................    thermo_temp = AFE90100_ReadADC()/THERMO_COEFF; 
.................... } 
....................  
.................... #endif //_ADC_H_ 
....................  
.................... #include "triac.h" 
.................... #ifndef _TRIAC_H_ 
.................... #define _TRIAC_H_ 
....................  
.................... #inline 
.................... void HeaterOn(void) 
.................... { 
....................    //output_high(PIN_C0); 
....................    //output_high(PIN_C1); 
....................    //output_high(PIN_C2); 
....................    //output_high(PIN_A4); 
....................    //output_high(PIN_A5); 
....................    //output_high(PIN_D0); 
....................    //output_high(PIN_E0); 
....................    //output_high(PIN_E1); 
....................    output_high(PIN_E2); 
.................... } 
....................  
.................... #inline 
.................... void HeaterOff(void) 
.................... { 
....................    //output_low(PIN_C0); 
....................    //output_low(PIN_C1); 
....................    //output_low(PIN_C2); 
....................    //output_low(PIN_A4); 
....................    //output_low(PIN_A5); 
....................    //output_low(PIN_D0); 
....................    //output_low(PIN_E0); 
....................    //output_low(PIN_E1); 
....................    output_low(PIN_E2); 
.................... } 
....................  
.................... #inline 
.................... void Ctrl1On(void) { 
....................    output_high(PIN_E0); 
....................    led1[0] &= 0xFE; 
.................... } 
....................  
.................... #inline 
.................... void Ctrl1Off(void) { 
....................    output_low(PIN_E0); 
*
2242:  BCF    F8D.0
....................    led1[0] |= 0x01; 
2244:  BSF    32.0
.................... } 
.................... #inline 
.................... void Ctrl2On(void) { 
....................    output_high(PIN_E1); 
*
0B3E:  BSF    F8D.1
*
0B52:  BSF    F8D.1
*
68B4:  BSF    F8D.1
....................    led1[0] &= 0xFD; 
*
0B40:  BCF    32.1
*
0B54:  BCF    32.1
*
68B6:  BCF    32.1
.................... } 
....................  
.................... #inline 
.................... void Ctrl2Off(void) { 
....................    output_low(PIN_E1); 
*
0B58:  BCF    F8D.1
*
2246:  BCF    F8D.1
*
68BC:  BCF    F8D.1
....................    led1[0] |= 0x02; 
*
0B5A:  BSF    32.1
*
2248:  BSF    32.1
*
68BE:  BSF    32.1
.................... } 
.................... #inline 
.................... void Ctrl3On(void) { 
....................    output_high(PIN_E2); 
*
0A76:  BSF    F8D.2
....................    led1[0] &= 0xFB; 
0A78:  BCF    32.2
.................... } 
....................  
.................... #inline 
.................... void Ctrl3Off(void) { 
....................    output_low(PIN_E2); 
*
0A7C:  BCF    F8D.2
*
224A:  BCF    F8D.2
....................    led1[0] |= 0x04; 
*
0A7E:  BSF    32.2
*
224C:  BSF    32.2
.................... } 
.................... #inline 
.................... void triac_init(void) 
.................... { 
....................    set_tris_e(0x00); // PortE bit 0, 1, 2 as output 
*
223A:  BCF    F96.0
223C:  BCF    F96.1
223E:  BCF    F96.2
2240:  BCF    F96.3
....................    Ctrl1Off(); 
....................    Ctrl2Off(); 
....................    Ctrl3Off(); 
.................... } 
....................  
.................... #inline 
.................... void triac_scan(void) 
.................... { 
....................    //Scanning the heating triac: 
....................    if (triac_count1 < TRIAC_CYCLE) { 
*
0A16:  MOVFF  91,107
0A1A:  MOVFF  90,106
0A1E:  MOVLB  0
0A20:  RCALL  0362
0A22:  MOVFF  03,109
0A26:  MOVFF  02,108
0A2A:  MOVFF  01,107
0A2E:  MOVFF  00,106
0A32:  MOVLB  1
0A34:  CLRF   x0D
0A36:  MOVLW  C0
0A38:  MOVWF  x0C
0A3A:  MOVLW  0A
0A3C:  MOVWF  x0B
0A3E:  MOVLW  88
0A40:  MOVWF  x0A
0A42:  MOVLB  0
0A44:  RCALL  0398
0A46:  BNC   0A50
....................       triac_count1++; 
0A48:  INCF   x90,F
0A4A:  BTFSC  FD8.2
0A4C:  INCF   x91,F
....................    } else { 
0A4E:  BRA    0A5C
....................       triac_count1 = 0;  
0A50:  CLRF   x91
0A52:  CLRF   x90
....................       triac_on_time1 = triac_on_time_new1; 
0A54:  MOVFF  8F,8D
0A58:  MOVFF  8E,8C
....................    } 
....................    if ((triac_count1 < triac_on_time1) && ((g_state == ST_RUN_HEATING_TIME) || (g_state == ST_RUN_HOLDING_TIME ))) { 
0A5C:  MOVF   x91,W
0A5E:  SUBWF  x8D,W
0A60:  BNC   0A7C
0A62:  BNZ   0A6A
0A64:  MOVF   x8C,W
0A66:  SUBWF  x90,W
0A68:  BC    0A7C
0A6A:  MOVF   38,W
0A6C:  SUBLW  1A
0A6E:  BZ    0A76
0A70:  MOVF   38,W
0A72:  SUBLW  1B
0A74:  BNZ   0A7C
....................       Ctrl3On(); 
....................       //Ctrl1On(); 
....................    } else { 
*
0A7A:  BRA    0A80
....................       Ctrl3Off(); 
....................       //Ctrl1Off(); 
....................    } 
....................    //Scanning the fan triac:0 
....................    if (triac_count2 < TRIAC_CYCLE) { 
*
0A80:  MOVFF  95,107
0A84:  MOVFF  94,106
0A88:  RCALL  0362
0A8A:  MOVFF  03,109
0A8E:  MOVFF  02,108
0A92:  MOVFF  01,107
0A96:  MOVFF  00,106
0A9A:  MOVLB  1
0A9C:  CLRF   x0D
0A9E:  MOVLW  C0
0AA0:  MOVWF  x0C
0AA2:  MOVLW  0A
0AA4:  MOVWF  x0B
0AA6:  MOVLW  88
0AA8:  MOVWF  x0A
0AAA:  MOVLB  0
0AAC:  RCALL  0398
0AAE:  BNC   0AB8
....................       triac_count2++; 
0AB0:  INCF   x94,F
0AB2:  BTFSC  FD8.2
0AB4:  INCF   x95,F
....................    } else { 
0AB6:  BRA    0B38
....................       triac_count2 = 0;  
0AB8:  CLRF   x95
0ABA:  CLRF   x94
....................       triac_on_time2 = (int16)(fan_speed*TRIAC_CYCLE/FAN_SPEED_MAX); 
0ABC:  MOVLB  1
0ABE:  CLRF   x07
0AC0:  MOVFF  8B,106
0AC4:  MOVLB  0
0AC6:  RCALL  0362
0AC8:  MOVFF  03,109
0ACC:  MOVFF  02,108
0AD0:  MOVFF  01,107
0AD4:  MOVFF  00,106
0AD8:  MOVLB  1
0ADA:  CLRF   x0D
0ADC:  MOVLW  C0
0ADE:  MOVWF  x0C
0AE0:  MOVLW  0A
0AE2:  MOVWF  x0B
0AE4:  MOVLW  88
0AE6:  MOVWF  x0A
0AE8:  MOVLB  0
0AEA:  RCALL  0412
0AEC:  MOVFF  03,109
0AF0:  MOVFF  02,108
0AF4:  MOVFF  01,107
0AF8:  MOVFF  00,106
0AFC:  MOVFF  03,10D
0B00:  MOVFF  02,10C
0B04:  MOVFF  01,10B
0B08:  MOVFF  00,10A
0B0C:  MOVLB  1
0B0E:  CLRF   x11
0B10:  CLRF   x10
0B12:  MOVLW  20
0B14:  MOVWF  x0F
0B16:  MOVLW  82
0B18:  MOVWF  x0E
0B1A:  MOVLB  0
0B1C:  RCALL  0508
0B1E:  MOVFF  03,109
0B22:  MOVFF  02,108
0B26:  MOVFF  01,107
0B2A:  MOVFF  00,106
0B2E:  RCALL  0666
0B30:  MOVFF  02,93
0B34:  MOVFF  01,92
....................    } 
....................    if(fan_speed == FAN_SPEED_MAX) { 
0B38:  MOVF   x8B,W
0B3A:  SUBLW  0A
0B3C:  BNZ   0B44
....................       Ctrl2On(); 
....................    } 
*
0B42:  BRA    0B5C
....................    else { 
....................       if (triac_count2 < triac_on_time2) { 
0B44:  MOVF   x95,W
0B46:  SUBWF  x93,W
0B48:  BNC   0B58
0B4A:  BNZ   0B52
0B4C:  MOVF   x92,W
0B4E:  SUBWF  x94,W
0B50:  BC    0B58
....................       Ctrl2On(); 
....................       } else { 
*
0B56:  BRA    0B5C
....................          Ctrl2Off(); 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif // _TRIAC_H_ 
....................  
.................... #include "rtcc.h" 
.................... #ifndef _RTCC_H_ 
.................... #define _RTCC_H_ 
....................  
.................... #include "globals.h" 
.................... #ifndef _GLOBALS_H_ 
.................... #define _GLOBALS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... typedef union _ADC_DATA_TYPE 
.................... { 
....................    signed int32 whole; 
....................    unsigned char bytes[4]; 
.................... }ADC_DATA_TYPE; 
....................  
.................... typedef enum { 
....................    SIGN_SENSOR_BROKEN, 
....................    SIGN_TEMP_OVERLOAD, 
....................    SIGN_SET_PID_KP, 
....................    SIGN_SET_PID_KI, 
....................    SIGN_SET_PID_KD, 
....................    SIGN_PROCESS_END, 
....................    SIGN_CN, 
....................    SIGN_T2, 
....................    SIGN_T3, 
....................    SIGN_T4, 
....................    SIGN_T5, 
....................    SIGN_T6, 
....................    SIGN_T7, 
....................    SIGN_ALL, 
....................    SIGN_BLANK, 
.................... } SIGN_CODE; 
....................  
.................... typedef enum { 
....................    STATE_KEY_IDLE, 
....................    STATE_KEY_PRESSED, 
....................    STATE_KEY_HOLD, 
.................... } KEY_STATE_; 
....................  
.................... typedef enum _STATE { 
....................    ST_INVALID, 
....................    ST_IDLE, 
....................    ST_SET_PROGRAM, 
....................    ST_SET_DAY_OF_WEEK, 
....................    ST_SET_HOUR, 
....................    ST_SET_MINUTE, 
....................    ST_SET_TIME_STER_DRY, 
....................    ST_SET_SETPOINT, 
....................    ST_SET_PROTECT, 
....................    ST_SET_TIME_DELAY, 
....................    ST_SET_WAIT_TIME, 
....................    ST_SET_HOLD_TIME, 
....................    ST_DIS_TIME_DAY_HOUR, 
....................    ST_DIS_TIME_HOUR_MIN, 
....................    ST_SET_TIME_DAY_HOUR, 
....................    ST_SET_TIME_HOUR_MIN, 
....................    ST_SET_TIMER, 
....................    ST_SET_PASS, 
....................    ST_SAVE_PASS, 
....................    ST_CHECK_PASS, 
....................    ST_SET_SERI, 
....................    ST_SET_PID_KP, 
....................    ST_SET_PID_KI, 
....................    ST_SET_PID_KD, 
....................    ST_SET_OFFSET, 
....................    ST_RUN_WAITING_TIME, 
....................    ST_RUN_HEATING_TIME, 
....................    ST_RUN_HOLDING_TIME, 
....................    ST_RUN_COOLING_TIME, 
....................    ST_COMPLETED, 
....................    ST_ERR, 
....................    TOTAL_NUMBER_OF_STATE, 
.................... } STATE; 
....................  
.................... typedef enum _SET { 
....................    SET_NONE, 
....................    SET_PROGRAM_USER, 
....................    SET_TIME_REAL_TIME_CLOCK, 
....................    SET_TIME_CLOCK, 
....................    SET_DONE, 
.................... } SET; 
....................  
.................... typedef enum _SET_TIME { 
....................    SET_TIME_DAY_HOUR, 
....................    SET_TIME_HOUR_MIN, 
....................    SET_TIME_DONE, 
....................  
.................... } SET_TIME; 
....................  
.................... typedef enum _WEEKDAY { 
....................    NULLDAY, 
....................    SUNDAY, 
....................    MONDAY, 
....................    TUESDAY, 
....................    WEDNESDAY, 
....................    THURSDAY, 
....................    FRIDAY, 
....................    SATURDAY, 
....................    NONEDAY, 
.................... } WEEKDAY; 
....................  
.................... typedef enum _PROCESS_PHASE { 
....................    WAITING_PHASE, 
....................    HEAT_RISING_PHASE, 
....................    HEAT_HOLDING_PHASE, 
....................    HEAT_FALLING_PHASE, 
....................    IDLE_PHASE, 
.................... } PROCESS_PHASE; 
....................  
.................... typedef enum _OVEN_MODE { 
....................    NONE, 
....................    PROGRAM1, 
....................    PROGRAM2, 
....................    PROGRAM3, 
....................    PROGRAM4, 
....................    PROGRAM5, 
....................    PROGRAM6, 
....................    PROGRAM7, 
....................    PROGRAM8, 
....................    PROGRAM9, 
....................    PROGRAM10, 
....................    USER_MODE, 
.................... } OVEN_MODE; 
....................  
.................... typedef enum _FLAG_MODE { 
....................    MODE_STAND, 
....................    MODE_SET_1, 
....................    MODE_SET_2, 
....................    MODE_SET_3, 
....................    MODE_SET_4, 
....................    MODE_SET_5, 
....................    MODE_SET_6, 
....................    MODE_SET_7, 
....................    MODE_SET_8, 
....................    MODE_SET_9, 
....................    MODE_SET_10, 
.................... } FLAG_MODE; 
....................  
.................... #define TRIAC_CYCLE 555.0 
.................... #define TEMP_COEFF 0.652085      // 
.................... unsigned char led7[6][4]; 
.................... unsigned char led1[5]; 
.................... unsigned char temp_accum_count = 16; 
.................... STATE g_state; 
.................... STATE old_state; 
.................... OVEN_MODE g_mode = PROGRAM1; 
.................... SET g_set = SET_NONE; 
.................... //SET_TIME g_set_time; 
.................... //FLAG_MODE g_active_mode = MODE_STAND; 
....................  
.................... unsigned int16 timed_count_ms = 187;   //toggle every 1000 ms; 
.................... unsigned char pid_countdown = 0; 
.................... unsigned int16 spk_on_count; 
.................... int16    tmp_int16; 
.................... int8     key_state; 
.................... int8     key_flag = 0; 
.................... unsigned char key_code = 0; 
.................... unsigned char tmp = 0; 
.................... unsigned int8 touch_state1, touch_state2; 
.................... int16 key_hold_count, key_repeat_count; 
.................... #define KEY_HOLD_THRESHOLD (400) 
.................... #define KEY_REPEAT_TIME (10) 
....................  
.................... unsigned char sec, min, hour, day; 
.................... unsigned char last_min; 
....................  
.................... int16 user_setpoint = 15000; 
.................... int16 user_protect = 16000; 
.................... int16 user_delay_time = 15; 
.................... int16 user_ster_time = 90; 
.................... int16 i = 0; 
....................        
.................... unsigned char wait_hour, wait_min, wait_day; 
.................... unsigned char hold_hour, hold_min; 
....................  
.................... unsigned int16 password = 0, check_password = 0; 
.................... //unsigned int16 remain_time;      //unit is in minute! 
.................... unsigned int16 setpoint; 
.................... unsigned int16 protect; 
.................... unsigned int16 realTemp; 
.................... unsigned int16 t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0; 
.................... unsigned int16 t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0; 
.................... unsigned int16 delay_time; 
.................... unsigned int16 ster_time; 
.................... //unsigned int16 day_ster_time; 
.................... //unsigned int16 hour_ster_time; 
.................... //unsigned int16 user_day_ster_time; 
.................... //unsigned int16 user_hour_ster_time; 
.................... //unsigned int16 day_remain_time, hour_remain_time; 
.................... unsigned int16 pid_kp, pid_ki, pid_kd; 
.................... //unsigned int16 RTD_realTemp2; 
.................... //unsigned long long_ster_time, long_user_ster_time; 
.................... unsigned long remain_time; 
.................... //unsigned long user_hold_time; 
.................... //float TEMP_LOWER_FULLON_CORRECTION = 3000.0; 
....................  
.................... #define SETPOINT_MAX (25000) 
.................... #define SETPOINT_DEF (15000) 
.................... #define SETPOINT_MIN (1000) 
.................... #define PROTECT_MAX (31000) 
.................... #define PROTECT_DEF (31000) 
.................... #define PROTECT_MIN (1000) 
.................... #define FAN_SPEED_MAX (10) 
.................... #define FAN_SPEED_DEF (7) 
.................... #define FAN_SPEED_MIN (5) 
.................... #define DELAY_TIME_MAX (5999) 
.................... #define DELAY_TIME_DEF (0) 
.................... #define DELAY_TIME_MIN (0) 
.................... #define STER_TIME_MAX (5999) 
.................... #define STER_TIME_DEF (60) 
.................... #define STER_TIME_MIN (0) 
....................  
.................... #define PID_KP_MAX (100) 
.................... #define PID_KP_DEF (60) 
.................... #define PID_KP_MIN (0) 
.................... #define PID_KI_MAX (100) 
.................... #define PID_KI_DEF (55) 
.................... #define PID_KI_MIN (0) 
.................... #define PID_KD_MAX (100) 
.................... #define PID_KD_DEF (28) 
.................... #define PID_KD_MIN (0) 
....................  
.................... #define PID_KP_MAX1 (100) 
.................... #define PID_KP_DEF1 (65) 
.................... #define PID_KP_MIN1 (0) 
.................... #define PID_KI_MAX1 (100) 
.................... #define PID_KI_DEF1 (65) 
.................... #define PID_KI_MIN1 (0) 
.................... #define PID_KD_MAX1 (100) 
.................... #define PID_KD_DEF1 (38) 
.................... #define PID_KD_MIN1 (0) 
....................  
.................... #define PROG1_SETPOINT (12000) 
.................... #define PROG1_PROTECT (13000) 
.................... #define PROG1_DELAY_TIME (0) 
.................... #define PROG1_STER_TIME (90) 
.................... #define PROG2_SETPOINT (13000) 
.................... #define PROG2_PROTECT (14000) 
.................... #define PROG2_DELAY_TIME (0) 
.................... #define PROG2_STER_TIME (85) 
.................... #define PROG3_SETPOINT (14000) 
.................... #define PROG3_PROTECT (15000) 
.................... #define PROG3_DELAY_TIME (0) 
.................... #define PROG3_STER_TIME (80) 
.................... #define PROG4_SETPOINT (15000) 
.................... #define PROG4_PROTECT (16000) 
.................... #define PROG4_DELAY_TIME (0) 
.................... #define PROG4_STER_TIME (70) 
.................... #define PROG5_SETPOINT (16000) 
.................... #define PROG5_PROTECT (17000) 
.................... #define PROG5_DELAY_TIME (0) 
.................... #define PROG5_STER_TIME (60) 
.................... #define PROG6_SETPOINT (17000) 
.................... #define PROG6_PROTECT (18000) 
.................... #define PROG6_DELAY_TIME (0) 
.................... #define PROG6_STER_TIME (50) 
.................... #define PROG7_SETPOINT (18000) 
.................... #define PROG7_PROTECT (19000) 
.................... #define PROG7_DELAY_TIME (0) 
.................... #define PROG7_STER_TIME (45) 
.................... #define PROG8_SETPOINT (19000) 
.................... #define PROG8_PROTECT (20000) 
.................... #define PROG8_DELAY_TIME (0) 
.................... #define PROG8_STER_TIME (40) 
.................... #define PROG9_SETPOINT (20000) 
.................... #define PROG9_PROTECT (21000) 
.................... #define PROG9_DELAY_TIME (0) 
.................... #define PROG9_STER_TIME (35) 
.................... #define PROG10_SETPOINT (22000) 
.................... #define PROG10_PROTECT (23000) 
.................... #define PROG10_DELAY_TIME (0) 
.................... #define PROG10_STER_TIME (30) 
....................  
.................... #define BEEP_TIME (3) 
....................  
.................... #define OFFSET_TEMP_RANGE (3000) 
....................  
.................... #define MAX_TEMP_RANGE (32000) 
.................... //#define ADC_FILTER_COUNT (256) 
.................... #define ADC_FILTER_COUNT (16) 
....................  
.................... #define RTD_CONST (41876) 
....................  
.................... unsigned char  fan_speed = FAN_SPEED_MAX; 
.................... unsigned int16 triac_on_time1 = 0; 
.................... unsigned int16 triac_on_time_new1 = 0; 
.................... unsigned int16 triac_count1 = 0; 
.................... unsigned int16 triac_on_time2 = 0; 
.................... unsigned int16 triac_count2 = 0; 
....................  
.................... unsigned int16 seri = 0; 
.................... unsigned char adc_integ_count = 16; 
.................... signed int32 adc_integ_data; 
.................... signed int16 adc_data, adc_data_buff; 
.................... signed int16 env_temp; 
.................... signed int16 thermo_temp; 
.................... signed int16 temp_offset = 0; 
.................... signed int32 adc_value_ch0; 
.................... signed int32 adc_value_ch1; 
....................  
.................... float k_a, k_b, float_temp; 
....................  
.................... char fan_pos = 0; 
.................... char g_err_code = 0; 
.................... char fan_rol_count = 30; 
.................... char hour_min_flag = 1; 
.................... char flag_day_hour = 0; 
.................... char flag_Rs232 = 0; 
.................... char flag_Rs232_Ster = 0; 
.................... char flag_Rs232_Complete = 0; 
.................... char flag_Rs232_Err = 0; 
.................... char flag_Rs232_IDLE = 0; 
.................... char flag_Pre_Hold = 0; 
....................  
.................... unsigned char GLb_nCountAvrTemp = 0; 
....................  
.................... #endif // #define _GLOBALS_H_ 
....................  
....................  
.................... #int_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................    if (spk_on_count > 0) { 
*
0858:  MOVF   3F,F
085A:  BNZ   0860
085C:  MOVF   40,F
085E:  BZ    086C
....................       spk_on_count--; 
0860:  MOVF   3F,W
0862:  BTFSC  FD8.2
0864:  DECF   40,F
0866:  DECF   3F,F
....................       SpeakerOn(); 
0868:  BRA    00AE
....................    } else { 
086A:  BRA    086E
....................       SpeakerOff(); 
086C:  RCALL  00B4
....................    } 
....................    if (fan_rol_count > 0) 
086E:  MOVF   xBD,F
0870:  BZ    0874
....................    { 
....................       fan_rol_count--; 
0872:  DECF   xBD,F
....................    } 
....................    if (temp_accum_count > 0){ 
0874:  MOVF   37,F
0876:  BZ    087A
....................       temp_accum_count--; 
0878:  DECF   37,F
....................    } 
....................    if (timed_count_ms > 0) { 
087A:  MOVF   3C,F
087C:  BNZ   0882
087E:  MOVF   3D,F
0880:  BZ    08A0
....................       timed_count_ms--; 
0882:  MOVF   3C,W
0884:  BTFSC  FD8.2
0886:  DECF   3D,F
0888:  DECF   3C,F
....................       if(125 == timed_count_ms) { 
088A:  MOVF   3C,W
088C:  SUBLW  7D
088E:  BNZ   089E
0890:  MOVF   3D,F
0892:  BNZ   089E
....................          led7[0][1] |= 0x20; 
0894:  BSF    1B.5
....................          if (g_state != ST_COMPLETED) 
0896:  MOVF   38,W
0898:  SUBLW  1D
089A:  BZ    089E
....................             led7[2][1] |= 0x20; 
089C:  BSF    23.5
....................       } 
....................    } else { 
089E:  BRA    08B0
....................       timed_count_ms = 250; 
08A0:  CLRF   3D
08A2:  MOVLW  FA
08A4:  MOVWF  3C
....................       if (pid_countdown > 0){ 
08A6:  MOVF   3E,F
08A8:  BZ    08AC
....................          pid_countdown--; 
08AA:  DECF   3E,F
....................       } 
....................       led7[0][1] &= 0xDF; 
08AC:  BCF    1B.5
....................       led7[2][1] &= 0xDF; 
08AE:  BCF    23.5
....................    } 
....................     
....................    key_scan(); 
....................    adc_scan(); 
....................    triac_scan(); 
....................    Led_Scan(); 
*
0B5C:  BRA    06EA
....................  
0B5E:  BCF    FF2.2
0B60:  GOTO   0060
.................... } 
....................  
.................... void RTCC_init(void) 
.................... { 
....................    setup_wdt(WDT_OFF); 
*
11FA:  BCF    FD1.0
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit); //2.7 ms cycle 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit); //5.4 ms cycle 
11FC:  MOVLW  C5
11FE:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
1200:  CLRF   FCD
....................    //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
....................    setup_timer_2(T2_DISABLED,0,1); 
1202:  MOVLW  00
1204:  MOVWF  FCA
1206:  MOVLW  00
1208:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
120A:  CLRF   FB1
....................    setup_comparator(NC_NC_NC_NC); 
120C:  MOVLW  07
120E:  MOVWF  FB4
1210:  MOVF   F92,W
1212:  MOVWF  F92
1214:  MOVLW  1A
1216:  MOVWF  00
1218:  DECFSZ 00,F
121A:  BRA    1218
121C:  NOP   
121E:  MOVF   FB4,W
1220:  BCF    FA1.6
....................    setup_vref(FALSE); 
1222:  CLRF   FB5
....................    setup_psp(PSP_DISABLED); 
1224:  BCF    F96.4
....................    enable_interrupts(INT_RTCC); 
1226:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); 
1228:  MOVLW  C0
122A:  IORWF  FF2,F
122C:  GOTO   2252 (RETURN)
.................... } 
....................  
.................... #endif   //#define _RTCC_H_ 
....................  
....................  
.................... #include "cap1188.h" 
.................... #ifndef _CAP1188_H_ 
.................... #define _CAP1188_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #use fast_io(C) 
....................  
.................... #define CAP_RESET    PIN_C0 
.................... #define CAP_CS1      PIN_D4 
.................... #define CAP_CS2      PIN_D5 
.................... #define CAP_CLK      PIN_C3 
.................... #define CAP_MOSI     PIN_C4 
.................... #define CAP_MISO     PIN_C5 
....................  
.................... #inline 
.................... void cap1188_reset(void) 
.................... { 
....................    output_low(CAP_CS1); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    // 
....................    output_low(CAP_CS2); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... /* 
.................... void cap1188_clr_int(void) 
.................... { 
....................     
.................... } 
....................  
.................... void cap1188_reset_interface(void) 
.................... {    
....................    output_low(CAP_CS1); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    output_low(CAP_CS2); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... void cap1188_set_address_ptr1(int8 adr) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_set_address_ptr2(int8 adr) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... */ 
.................... void cap1188_write_data1(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_write_data2(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... int8 cap1188_read_data1(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
....................    return data; 
.................... } 
....................  
.................... int8 cap1188_read_data2(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
....................    return data; 
.................... } 
.................... /* 
.................... void cap1188_disable_int(void) 
.................... { 
....................    cap1188_write_data1(0x27, 0x00); 
....................    cap1188_write_data2(0x27,0x00); 
.................... } 
....................  
.................... void cap1188_disable_ret(void) 
.................... { 
....................    cap1188_write_data1(0x28, 0x00); 
....................    cap1188_write_data2(0x28, 0x00); 
.................... } 
.................... */ 
.................... void cap1188_init(void) 
.................... { 
....................    delay_ms(100); 
....................    cap1188_reset(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... /*void cap1188_clr_int1(void) 
.................... { 
....................    cap1188_write_data1(0, 0); 
.................... } 
....................  
.................... void cap1188_clr_int2(void) 
.................... { 
....................    cap1188_write_data2(0, 0); 
.................... }*/ 
....................  
.................... #endif   // #define _CAP1188_H_ 
....................  
....................  
.................... #include "process_touchs.h" 
.................... #ifndef _PROCESS_KEYS_H_ 
.................... #define _PROCESS_KEYS_H_ 
....................  
.................... #include "leds.h" 
.................... #ifndef _LEDS_H_ 
.................... #define _LEDS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... #include "globals.h" 
.................... #include "ds1307.h" 
.................... #include "cap1188.h" 
....................  
.................... /* 
....................       4                 7 6 5 4 3 2 1 0 
....................     -----               0 1 0 1 1 1 1 1   0x5F --> 0 
....................    |     |              0 0 0 0 1 0 0 1   0x09 --> 1 
....................  6 |  7  |3             1 0 0 1 1 1 1 0   0x9E --> 2 
....................     -----               1 0 0 1 1 0 1 1   0x9B --> 3 
....................    |     |              1 1 0 0 1 0 0 1   0xC9 --> 4 
....................  2 |     |0             1 1 0 1 0 0 1 1   0xD3 --> 5 
....................     ----- o 5           1 1 0 1 0 1 1 1   0xD7 --> 6 
....................       1                 0 0 0 1 1 0 0 1   0x19 --> 7 
....................                         1 1 0 1 1 1 1 1   0xDF --> 8 
....................                         1 1 0 1 1 0 1 1   0xDB --> 9 
....................                         1 1 0 1 0 1 1 0   0xD6 --> E 
....................                         1 1 0 1 1 1 0 0   0xDC --> P 
....................                         0 1 0 0 0 1 0 0   0x44 --> I 
....................                         1 0 0 0 1 1 1 1   0x8F --> d 
....................                         1 0 0 0 0 1 0 1   0x85 --> n 
....................                         1 1 0 0 1 1 0 1    
.................... */ 
....................  
.................... static unsigned char index; 
....................  
.................... unsigned char Get7Seg(unsigned char key) { 
....................    switch (key) { 
....................       case 0: 
....................          return 0x5F; 
....................       case 1: 
....................          return 0x09; 
....................       case 2: 
....................          return 0x9E; 
....................       case 3: 
....................          return 0x9B; 
....................       case 4: 
....................          return 0xC9; 
....................       case 5: 
....................          return 0xD3; 
....................       case 6: 
....................          return 0xD7; 
....................       case 7: 
....................          return 0x19; 
....................       case 8: 
....................          return 0xDF; 
....................       case 9: 
....................          return 0xDB; 
....................       default: 
....................          return 0x00;   //blank; 
....................    } 
.................... } 
....................  
.................... unsigned char AddPoint(unsigned char key) { 
....................    return key | 0x20; 
.................... } 
....................  
.................... void led_init(void) { 
....................    //Led7[0][0] = Get7Seg(0); Led7[0][1] = Get7Seg(1); Led7[0][2] = Get7Seg(2); Led7[0][3] = Get7Seg(3); 
....................    //Led7[1][0] = Get7Seg(3); Led7[1][1] = Get7Seg(4); Led7[1][2] = Get7Seg(5); Led7[1][3] = Get7Seg(6); 
....................    //Led7[2][0] = Get7Seg(6); Led7[2][1] = Get7Seg(7); Led7[2][2] = Get7Seg(8); Led7[2][3] = Get7Seg(9); 
....................    //Led1[0] = 0xA5; Led1[1] = 0xA5; Led1[2] = 0xA5; 
....................    // Setup realtime clock: 
....................    hour = read_ds1307(2); 
....................    sec = read_ds1307(0); 
....................    if (sec & 0x80) {   // If clock is disabled 
....................       hour = read_ds1307(2); 
....................       hour &= 0xBF;     // Turn on 24 hour mode 
....................       write_ds1307(2, hour); 
....................       write_ds1307(0,sec & 0x7F); // enable oscillator(bit 7 =0) 
....................    } 
.................... } 
....................  
.................... void sclk_out(void) { 
....................    output_low(PIN_A3); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_A3); 
.................... } 
....................  
.................... void strb_out1(void) { 
....................    output_low(PIN_D1); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D1); 
.................... } 
....................  
.................... void strb_out2(void) { 
....................    output_low(PIN_D3); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D3); 
.................... } 
....................  
.................... void Byte_Out_All(int8 data1, int8 data2) { 
....................    char i; 
....................    for(i=0; i<8; i++){ 
....................       output_bit(PIN_D0,shift_left(&data1,1,0)); 
....................       output_bit(PIN_D2,shift_left(&data2,1,0)); 
....................       sclk_out(); 
....................    } 
.................... } 
....................  
.................... void Led_Scan(void){ 
....................    led1[0] &= 0x87; 
....................    switch(index) { 
....................       case 0: 
....................          index = 1; 
....................          led1[0] |= 0x20; 
....................          Byte_Out_All(led7[2][1], led1[0]); 
....................          Byte_Out_All(led7[1][1], led1[1]); 
....................          Byte_Out_All(led7[0][1], led1[2]); 
....................          break; 
....................       case 1: 
....................          index = 2; 
....................          led1[0] |= 0x10; 
....................          Byte_Out_All(led7[2][2], led1[0]); 
....................          Byte_Out_All(led7[1][2], 0xFF); 
....................          Byte_Out_All(led7[0][2], 0xFF); 
....................          break; 
....................       case 2: 
....................          index = 3; 
....................          led1[0] |= 0x08; 
....................          Byte_Out_All(led7[2][3], led1[0]); 
....................          Byte_Out_All(led7[1][3], 0xFF); 
....................          Byte_Out_All(led7[0][3], 0xFF); 
....................          break; 
....................       case 3: 
....................          index = 4; 
....................          led1[0] |= 0x40; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 4: 
....................          index = 5; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 5: 
....................          index = 6; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 6: 
....................          index = 7; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       default: 
....................          index = 0; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          //led1[0] |= 0x40; 
....................          break; 
....................    } 
....................    strb_out1(); 
....................    strb_out2(); 
.................... } 
....................  
.................... void SpeakerOn(void) { 
....................    Led1[0] &= 0x7F; 
.................... } 
....................  
.................... void SpeakerOff(void) { 
....................    spk_on_count = 0; 
....................    Led1[0] |= 0x80; 
.................... } 
....................  
.................... void LedClockOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
.................... } 
....................  
.................... void LedClockOff(void) { 
....................    Led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedSetTempOn(void) 
.................... { 
....................    led1[1] &= 0xFE; 
.................... } 
....................  
.................... void LedSetTempOff(void) { 
....................    Led1[1] |= 0x01; 
.................... } 
....................  
.................... void LedProtectTempOn(void) 
.................... { 
....................    led1[1] &= 0xFD; 
.................... } 
....................  
.................... void LedProtectTempOff(void) { 
....................    Led1[1] |= 0x02; 
.................... } 
....................  
.................... void LedTimeDelayOn(void) 
.................... { 
....................    led1[1] &= 0xFB; 
.................... } 
....................  
.................... void LedTimeDelayOff(void) { 
....................    Led1[1] |= 0x04; 
.................... } 
....................  
.................... void LedTimeSterOn(void) 
.................... { 
....................    led1[1] &= 0xF7; 
.................... } 
....................  
.................... void LedTimeSterOff(void) { 
....................    Led1[1] |= 0x08; 
.................... } 
....................  
.................... //============================================================================== 
....................  
.................... void LedTimeOn(void) 
.................... { 
....................    led1[4] &= 0x7F; 
.................... } 
....................  
.................... void LedTimeOff(void) 
.................... { 
....................    led1[4] |= 0x80; 
.................... } 
....................  
.................... void LedHeaterOn(void) 
.................... { 
....................    led1[3] &= 0xDF; 
.................... } 
....................  
.................... void LedHeaterOff(void) 
.................... { 
....................    led1[3] |= 0x20; 
.................... } 
....................  
.................... void LedAlarmOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
.................... } 
....................  
.................... void LedAlarmOff(void) 
.................... { 
....................    led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedIconOn(void) 
.................... { 
....................    led1[2] &= 0xFD; 
.................... } 
....................  
.................... void LedMaxOn(void) 
.................... { 
....................    led1[2] &= 0xFB; 
.................... } 
.................... void LedMaxOff(void) 
.................... { 
....................    led1[2] |= 0x04; 
.................... } 
....................  
.................... void LedTempOn(void) 
.................... { 
....................    led1[3] &= 0xBF; 
.................... } 
....................  
.................... void LedTempOff(void) 
.................... { 
....................    led1[3] |= 0x40; 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
.................... /*void Led_1CDEF8_Off(void) { 
....................    //Led1 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
....................    //LedCDEF8 off: 
....................    tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x0E; 
....................    cap1188_write_data2(0x74, tmp); 
.................... }*/ 
.................... void Led_Prog_Off(void) { 
....................    //Led 1,2,3,4,5,6,7,8 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x00; 
....................    cap1188_write_data1(0x74, tmp); 
....................    //Led 9,10 off: 
....................    tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xC8; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
....................  
.................... void Led_0_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x01; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_0_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_1_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x02; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
....................  
.................... void Led_1_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_2_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x04; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_2_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_3_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x08; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_3_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_4_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x10; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_4_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xEF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_5_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x20; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_5_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_6_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x40; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_6_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_7_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x80; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_7_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_8_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x01; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_8_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_Dot_On(void)   //void Led_9_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x02; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_Dot_Off(void)  //void Led_9_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_A_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x04; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_A_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x08; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_C_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x10; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_C_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xEF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_D_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x20; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_D_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_E_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x40; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_E_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_F_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x80; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_F_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
....................  
.................... void Beep(unsigned int16 duration) 
.................... { 
....................    spk_on_count = duration; 
.................... } 
.................... /* 
.................... void ClrLed7(unsigned char mon) 
.................... { 
....................    Led7[mon][0] = 0x00;  //clear led 
....................    Led7[mon][1] = 0x00; 
....................    Led7[mon][2] = 0x00; 
....................    Led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... void SetDate(WEEKDAY date) { 
....................    unsigned char tmp; 
....................    tmp = led1[2]; 
....................    if ((SUNDAY <= date)&&(date <= SATURDAY)) { 
....................       tmp |= 0xFE;  // Turn off all leds for date indicator 
....................       switch(date) 
....................       { 
....................          case SUNDAY: 
....................             tmp &= 0xFD; 
....................             break; 
....................          case MONDAY: 
....................             tmp &= 0xFB; 
....................             break; 
....................          case TUESDAY: 
....................             tmp &= 0xF7; 
....................             break; 
....................          case WEDNESDAY: 
....................             tmp &= 0xEF; 
....................             break; 
....................          case THURSDAY: 
....................             tmp &= 0xDF; 
....................             break; 
....................          case FRIDAY: 
....................             tmp &= 0xBF; 
....................             break; 
....................          case SATURDAY: 
....................             tmp &= 0x7F; 
....................             break; 
....................       } 
....................       led1[2] = tmp; 
....................    } else { 
....................       led1[2] |= 0xFE; 
....................    } 
.................... } 
.................... /* 
.................... void PutDay(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
....................    SetDate((WEEKDAY)(day)); 
.................... } 
.................... */ 
.................... void PutDateTime(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
....................    SetDate((WEEKDAY)(day)); 
....................    hour = read_ds1307(2);   // hour 
....................    led7[0][0] = Get7Seg(hour/0x10); 
....................    led7[0][1] = Get7Seg(hour&0x0F); 
....................    min = read_ds1307(1);   // min 
....................    led7[0][2] = Get7Seg(min/0x10); 
....................    led7[0][3] = Get7Seg(min&0x0F); 
.................... } 
.................... /* 
.................... void PutTime(unsigned char mon, unsigned char hour, unsigned char min) 
.................... { 
....................    led7[mon][0] = Get7Seg(hour/0x10); 
....................    led7[mon][1] = AddPoint(Get7Seg(hour&0x0F)); 
....................    led7[mon][2] = Get7Seg(min/0x10); 
....................    led7[mon][3] = Get7Seg(min&0x0F); 
.................... } 
.................... */ 
.................... void PutTime_DayHour(unsigned char mon, unsigned int16 time1, unsigned int16 time2) 
.................... { 
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(time1/10); 
....................       led7[mon][1] = AddPoint(Get7Seg(time1%10)); 
....................       led7[mon][2] = Get7Seg(time2/10); 
....................       led7[mon][3] = AddPoint(Get7Seg(time2%10)); 
.................... } 
....................  
.................... void PutTime_One(unsigned char mon, int16 time) 
.................... { 
....................    int8 hour, min; 
....................    hour = time / 60; 
....................    min = time % 60; 
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(hour/10); 
....................       led7[mon][1] = AddPoint(Get7Seg(hour%10)); 
....................       led7[mon][2] = Get7Seg(min/10); 
....................       led7[mon][3] = Get7Seg(min%10); 
.................... } 
.................... /* 
.................... void PutTime_One_Blank(unsigned char mon) 
.................... { 
....................    led7[mon][0] = 0x00; 
....................    led7[mon][1] = 0x00; 
....................    led7[mon][2] = 0x00; 
....................    led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... /* 
.................... void PutTemp(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    if (temp >= 10000) { 
....................       led7[mon][0] = Get7Seg(temp / 10000); 
....................       led7[mon][1] = Get7Seg((temp%10000) / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((temp%100) / 10); 
....................    } else { 
....................       led7[mon][0] = Get7Seg(temp / 1000); 
....................       led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][2] = Get7Seg((temp%100) / 10); 
....................       led7[mon][3] = Get7Seg(temp % 10);    
....................    } 
.................... } 
.................... */ 
.................... void PutTempSign(unsigned char mon, signed int16 temp) 
.................... { 
....................    if (temp >= 0) { 
....................       if (temp >= 10000) { 
....................          led7[mon][0] = Get7Seg(temp / 10000); 
....................          led7[mon][1] = Get7Seg((temp%10000) / 1000); 
....................          led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................          led7[mon][3] = Get7Seg((temp%100) / 10); 
....................       } else { 
....................          led7[mon][0] = Get7Seg(temp / 1000); 
....................          led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................          led7[mon][2] = Get7Seg((temp%100) / 10); 
....................          //led7[mon][3] = Get7Seg(temp % 10);   
....................          led7[mon][3] = Get7Seg(0);    
....................       } 
....................    } else { 
....................       led7[mon][0] = 0x80; 
....................       led7[mon][1] = Get7Seg(-temp / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((-temp%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((-temp%100) / 10); 
....................    } 
.................... } 
....................  
.................... void PutOffset(unsigned char mon, signed int16 offset) 
.................... { 
....................    if (offset >= 0) { 
....................       led7[mon][0] = Get7Seg(offset / 10000); 
....................       led7[mon][1] = Get7Seg((offset%10000) / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((offset%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((offset%100) / 10); 
....................    } else { 
....................       led7[mon][0] = 0x80; 
....................       led7[mon][1] = Get7Seg(-offset / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((-offset%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((-offset%100) / 10); 
....................    } 
.................... } 
....................  
.................... void PutPid(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    tmp %= 10000; 
....................    led7[mon][0] = Get7Seg(0); 
....................    led7[mon][1] = Get7Seg(temp / 100); 
....................    led7[mon][2] = Get7Seg((temp%100) / 10); 
....................    led7[mon][3] = Get7Seg(temp % 10);    
.................... } 
....................  
.................... void PutSign(unsigned char mon, Sign_CODE sign) 
.................... { 
....................    switch (sign) 
....................    { 
....................       case SIGN_SENSOR_BROKEN: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = Get7Seg(1); 
....................          g_err_code = 1; 
....................          break; 
....................       case SIGN_TEMP_OVERLOAD: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = Get7Seg(2); 
....................          g_err_code = 2; 
....................          break; 
....................       case SIGN_SET_PID_KP: 
....................          led7[mon][0] = 0xDC; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_SET_PID_KI: 
....................          led7[mon][0] = 0x44; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_SET_PID_KD: 
....................          led7[mon][0] = 0x8F; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_PROCESS_END: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0xAF; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x85; 
....................          break; 
....................       case SIGN_T2: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(2); //'2' 
....................          break; 
....................        case SIGN_T3: 
....................          led7[mon][0] = 0x00;       
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(3); //'3' 
....................          break; 
....................        case SIGN_T4: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(4); //'4' 
....................          break; 
....................        case SIGN_T5: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(5); //'5' 
....................          break; 
....................       case SIGN_T6: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(6); //'6' 
....................          break; 
....................        case SIGN_T7: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(7); //'7' 
....................          break; 
....................        case SIGN_CN: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x56;      //'C' 
....................          led7[mon][3] = 0x85;      //'N' 
....................          break; 
....................        case SIGN_ALL: 
....................          led7[mon][0] = 0x00;       
....................          led7[mon][1] = 0xDD;     //'A'   
....................          led7[mon][2] = 0x46;     //'L'   
....................          led7[mon][3] = 0x46;     //'L' 
....................          break; 
....................       case SIGN_BLANK: 
....................          led7[mon][0] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          break; 
....................    } 
....................     
.................... } 
....................  
.................... void SetPhaseIndicator(PROCESS_PHASE phase) 
.................... { 
....................    unsigned char tmp; 
....................    tmp = led1[3]; 
....................    if ((WAITING_PHASE <= phase)&&(phase <= IDLE_PHASE)) { 
....................       tmp |= 0x1F;  // Turn off all leds for phase indicator 
....................       switch(phase) 
....................       { 
....................          case WAITING_PHASE: 
....................             tmp &= 0xFE; 
....................             break; 
....................          case HEAT_RISING_PHASE: 
....................             tmp &= 0xFD; 
....................             break; 
....................          case HEAT_HOLDING_PHASE: 
....................             tmp &= 0xFB; 
....................             break; 
....................          case HEAT_FALLING_PHASE: 
....................             tmp &= 0xF7; 
....................             break; 
....................          case IDLE_PHASE: 
....................             tmp &= 0xEF; 
....................             PutSign(1, SIGN_PROCESS_END); 
....................             break; 
....................       } 
....................       led1[3] = tmp; 
....................    } 
.................... } 
....................  
.................... void SetStateIndicator(STATE state) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[0]; 
....................    tmp2 = led1[1]; 
....................    tmp1 |= 0x03;  //  
....................    tmp2 |= 0xE0; 
....................    if ((ST_IDLE < state)&&(state < TOTAL_NUMBER_OF_STATE)) { 
....................       switch(state) 
....................       { 
....................          case ST_SET_TIMER: 
....................          case ST_SET_WAIT_TIME: 
....................             tmp2 &= 0xBF; 
....................             break; 
....................          case ST_SET_PID_KP: 
....................          case ST_SET_HOLD_TIME: 
....................             tmp2 &= 0x7F; 
....................             break; 
....................          case ST_SET_PID_KI: 
....................          case ST_SET_SETPOINT: 
....................             tmp1 &= 0xFE; 
....................             break; 
....................          case ST_SET_PID_KD: 
....................          case ST_SET_PROTECT: 
....................             tmp1 &= 0xFD; 
....................             break; 
....................       } 
....................       led1[0] = tmp1; 
....................       led1[1] = tmp2; 
....................    } 
.................... } 
....................  
.................... void LedFanOn1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF; 
.................... } 
.................... void LedFanOn2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xDF; 
.................... } 
.................... void LedFanOn3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xBF; 
.................... } 
.................... void LedFanOn4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x7F; 
.................... } 
....................  
.................... void LedFanLow(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF; 
.................... } 
....................  
.................... void LedFanMedium(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF; 
.................... } 
....................  
.................... void LedFanHigh(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x8F; 
.................... } 
....................  
....................  
.................... void LedFanOnAll(void) 
.................... { 
....................    led1[1] &= 0x0F; 
.................... } 
....................  
.................... void LedFanOffAll(void) 
.................... { 
....................    led1[1] |= 0xF0; 
.................... } 
....................  
.................... void LedFan1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF;  //1110 
.................... } 
.................... void LedFan2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF;  //1100 
.................... } 
.................... void LedFan3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xDF;  //1101 
.................... } 
.................... void LedFan4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x9F;  //1001 
.................... } 
.................... void LedFan5(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xBF;  //1011 
.................... } 
.................... void LedFan6(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x3F;  //0011 
.................... } 
.................... void LedFan7(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x7F;  //0111 
.................... } 
.................... void LedFan8(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x6F;  //0110 
.................... } 
....................  
.................... void SetFanSimulator1(void) 
.................... { 
....................    if (fan_rol_count == 0) 
....................    { 
....................       switch(fan_pos) 
....................       { 
....................          case 0: 
....................             LedFan1(); 
....................             fan_pos = 1; 
....................             break; 
....................          case 1: 
....................             LedFan2(); 
....................             fan_pos = 2; 
....................             break; 
....................          case 2: 
....................             LedFan3(); 
....................             fan_pos = 3; 
....................             break; 
....................          case 3: 
....................             LedFan4(); 
....................             fan_pos = 4; 
....................             break; 
....................          case 4: 
....................             LedFan5(); 
....................             fan_pos = 5; 
....................             break; 
....................          case 5: 
....................             LedFan6(); 
....................             fan_pos = 6; 
....................             break; 
....................          case 6: 
....................             LedFan7(); 
....................             fan_pos = 7; 
....................             break; 
....................          default: 
....................             LedFan8(); 
....................             fan_pos = 0; 
....................             break; 
....................       } 
....................       fan_rol_count = 6-fan_speed; 
....................    } 
.................... } 
....................  
.................... void SetFanSimulator(void) 
.................... { 
....................    if (fan_rol_count == 0) 
....................    { 
....................       switch(fan_pos) 
....................       { 
....................          case 0: 
....................             LedFanOn1(); 
....................             fan_pos = 1; 
....................             break; 
....................          case 1: 
....................             LedFanOn2(); 
....................             fan_pos = 2; 
....................             break; 
....................          case 2: 
....................             LedFanOn3(); 
....................             fan_pos = 3; 
....................             break; 
....................          default: 
....................             LedFanOn4(); 
....................             fan_pos = 0; 
....................             break; 
....................       } 
....................       fan_rol_count = 25-fan_speed*2; 
....................    } 
.................... } 
....................  
.................... void SetFanIndicator(unsigned char level) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[1] | 0x1F; 
....................    tmp2 = led1[2] | 0xF8; 
....................    if (level > 0) { 
....................       tmp2 &= 0xF7; 
....................       if (level > 1) { 
....................          tmp2 &= 0xEF; 
....................          if (level > 2) { 
....................             tmp2 &= 0xDF; 
....................             if (level > 3) { 
....................                tmp2 &= 0xBF; 
....................                if (level > 4) { 
....................                   tmp2 &= 0x7F; 
....................                   if (level > 5) { 
....................                      tmp1 &= 0xFE; 
....................                      if (level > 6) { 
....................                         tmp1 &= 0xFD; 
....................                         if (level > 7) { 
....................                            tmp1 &= 0xFB; 
....................                            if (level > 8) { 
....................                               tmp1 &= 0xF7; 
....................                               if (level > 9) { 
....................                                  tmp1 &= 0xEF; 
....................                               }  //9 
....................                            }  //8 
....................                         }  //7 
....................                      }  //6 
....................                   }  //5 
....................                }  //4 
....................             }  //3 
....................          }  //2 
....................       }  //1 
....................    }  //0 
....................    led1[1] = tmp1; 
....................    led1[2] = tmp2; 
.................... } 
....................  
....................  
.................... #endif //#define _LEDS_H_ 
....................  
.................... #include "keys.h" 
.................... #ifndef _KEYS_H_ 
.................... #define _KEYS_H_ 
....................  
.................... #include "globals.h" 
.................... #include "cap1188.h" 
....................  
.................... unsigned char Get_Key_Code(void); 
.................... unsigned char kthit(void); 
....................  
.................... #inline 
.................... void key_init(void) 
.................... { 
....................    cap1188_init(); 
....................    //Only press generate interrupt, release doesn't: 
....................    //cap1188_write_data1(0x44, 0x41); 
....................    //cap1188_write_data2(0x44, 0x41); 
....................    //Press and hold does not generate key repeatedly; only the Up/Down keys are 
....................    // configured for repeatable: 
....................    //cap1188_write_data1(0x28, 0xF0); 
....................    //cap1188_write_data2(0x28, 0x00); 
....................    //Automatic Recalibration: 
....................    cap1188_write_data1(0x20, 0x28); 
....................    cap1188_write_data2(0x20, 0x28); 
....................    //Automatic Recalibration after press and hold for 11200ms: 
....................    //cap1188_write_data1(0x22, 0xF4); 
....................    //cap1188_write_data2(0x22, 0xF4); 
....................    //Touch is linked to LED for Touch 2,3,4,5,6,7 
....................    //cap1188_write_data1(0x72, 0xFC); 
....................    //cap1188_write_data2(0x72, 0x0E); 
....................    //Touch is not linked to any LED 
....................    //cap1188_write_data1(0x72, 0x00); 
....................    //cap1188_write_data2(0x72, 0x00); 
....................    //Touch is not linked to 'CLEAR'(B), 'DOWN'(E), 'UP'(F) 
....................    cap1188_write_data1(0x72, 0x00); 
....................    cap1188_write_data2(0x72, 0xC8); 
....................    //Touch Led duty cycle reduced to 7%-0% 
....................    cap1188_write_data1(0x93, 0x00); 
....................    cap1188_write_data2(0x93, 0x00); 
....................    //Set sensitivity to X64 
....................    //cap1188_write_data1(0x1F, 0x1F); 
....................    //cap1188_write_data2(0x1F, 0x1F); 
....................    key_flag = 0; 
....................    key_state = STATE_KEY_IDLE; 
....................    key_hold_count = 0; 
....................    key_repeat_count = 0; 
....................    key_code = 0xFF; 
....................     
.................... } 
....................  
.................... #inline 
.................... void key_scan(void) { 
....................    cap1188_write_data1(0, 0); 
....................    cap1188_write_data2(0, 0); 
....................    touch_state1 = cap1188_read_data1(3); 
....................    touch_state2 = cap1188_read_data2(3); 
....................    switch(key_state) { 
....................       case STATE_KEY_IDLE: 
....................          if (touch_state1 | touch_state2) { 
....................             key_state = STATE_KEY_PRESSED; 
....................             key_code = Get_Key_Code(); 
....................             key_hold_count = 0; 
....................          } 
....................          break; 
....................       case STATE_KEY_PRESSED: 
....................          if (touch_state1 | touch_state2) { 
....................             key_hold_count += 1; 
....................             if (key_hold_count > KEY_HOLD_THRESHOLD) { 
....................                key_state = STATE_KEY_HOLD; 
....................             } 
....................          } else { 
....................             key_flag = 1; 
....................             key_state = STATE_KEY_IDLE; 
....................             key_hold_count = 0; 
....................             key_repeat_count = 0; 
....................          } 
....................          break; 
....................       case STATE_KEY_HOLD: 
....................          if (touch_state1 | touch_state2) { 
....................             key_repeat_count += 1; 
....................             if (key_repeat_count > KEY_REPEAT_TIME) { 
....................                switch (key_code) { 
....................                  /* case '7': 
....................                   case '6': 
....................                   case '5': 
....................                   case '4': 
....................                      key_flag = 1; 
....................                      key_repeat_count = 0; 
....................                      break;*/ 
....................                   //case '0': 
....................                      //key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //break; 
....................                   case '0': 
....................                      key_flag = 1; 
....................                      key_code = 'b'; 
....................                      break; 
....................                   case '1': 
....................                      key_flag = 1; 
....................                      key_code = 'e'; 
....................                      break; 
....................                   case '2': 
....................                      key_flag = 1; 
....................                      key_code = 'f'; 
....................                      break; 
....................                   case 'B': 
....................                      key_flag = 1; 
....................                      key_code = 'h'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'A': 
....................                      key_flag = 1; 
....................                      key_code = 'a'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'C': 
....................                     // key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'D': 
....................                      key_flag = 1; 
....................                      key_code = 'd'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'E': 
....................                      //key_flag = 1; 
....................                      //key_code = 'e'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'F': 
....................                      //key_flag = 1; 
....................                      //key_code = 'f'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                } 
....................             } 
....................          } else { 
....................             //key_flag = 1; 
....................             key_state = STATE_KEY_IDLE; 
....................             key_hold_count = 0; 
....................             key_repeat_count = 0; 
....................          } 
....................          break; 
....................    } 
.................... } 
....................  
.................... unsigned char kthit(void) 
.................... { 
....................    touch_state1 = 0x01 & cap1188_read_data1(0); 
....................    if (touch_state1) { 
....................       touch_state1 = cap1188_read_data1(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data1(0, 0); 
....................       return key_code; 
....................    } 
....................    touch_state2 = 0x01 & cap1188_read_data2(0); 
....................    if (touch_state2) { 
....................       touch_state2 = cap1188_read_data2(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data2(0, 0); 
....................       return key_code; 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... unsigned char Get_Key_Code(void) 
.................... { 
....................    if(touch_state1) { 
....................       switch(touch_state1) 
....................       { 
....................          case 0x01: 
....................             return '0';   // 0 
....................          case 0x02: 
....................             return '1';   // 1 
....................          case 0x04: 
....................             return '2';   // 2 
....................          case 0x08: 
....................             return '3';   // 3 
....................          case 0x10: 
....................             return '4';   // 4 
....................          case 0x20: 
....................             return '5';   // 5 
....................          case 0x40: 
....................             return '6';   // 6 
....................          case 0x80: 
....................             return '7';   // 7 
....................          default: 
....................             return 128; 
....................       } 
....................    } else { 
....................       switch(touch_state2) 
....................       { 
....................          case 0x01: 
....................             return '8';   // 8 
....................          case 0x02: 
....................             return '9';   // 9 
....................          case 0x04: 
....................             return 'A';   // A 
....................          case 0x08: 
....................             return 'B';   // B 
....................          case 0x10: 
....................             return 'C';   // C 
....................          case 0x20: 
....................             return 'D';   // D 
....................          case 0x40: 
....................             return 'E';   // E 
....................          case 0x80: 
....................             return 'F';   // F 
....................          default: 
....................             return 128; 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif //#define _KEYS_H_ 
....................  
....................  
.................... //#include "adc.h" 
.................... //#include "triac.h" 
.................... #include "rtcc.h" 
.................... #ifndef _RTCC_H_ 
.................... #define _RTCC_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #int_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................    if (spk_on_count > 0) { 
....................       spk_on_count--; 
....................       SpeakerOn(); 
....................    } else { 
....................       SpeakerOff(); 
....................    } 
....................    if (fan_rol_count > 0) 
....................    { 
....................       fan_rol_count--; 
....................    } 
....................    if (temp_accum_count > 0){ 
....................       temp_accum_count--; 
....................    } 
....................    if (timed_count_ms > 0) { 
....................       timed_count_ms--; 
....................       if(125 == timed_count_ms) { 
....................          led7[0][1] |= 0x20; 
....................          if (g_state != ST_COMPLETED) 
....................             led7[2][1] |= 0x20; 
....................       } 
....................    } else { 
....................       timed_count_ms = 250; 
....................       if (pid_countdown > 0){ 
....................          pid_countdown--; 
....................       } 
....................       led7[0][1] &= 0xDF; 
....................       led7[2][1] &= 0xDF; 
....................    } 
....................     
....................    key_scan(); 
....................    adc_scan(); 
....................    triac_scan(); 
....................    Led_Scan(); 
....................  
.................... } 
....................  
.................... void RTCC_init(void) 
.................... { 
....................    setup_wdt(WDT_OFF); 
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit); //2.7 ms cycle 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit); //5.4 ms cycle 
....................    setup_timer_1(T1_DISABLED); 
....................    //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
....................    setup_timer_2(T2_DISABLED,0,1); 
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
....................    setup_comparator(NC_NC_NC_NC); 
....................    setup_vref(FALSE); 
....................    setup_psp(PSP_DISABLED); 
....................    enable_interrupts(INT_RTCC); 
....................    enable_interrupts(GLOBAL); 
.................... } 
....................  
.................... #endif   //#define _RTCC_H_ 
....................  
....................  
.................... #include "cap1188.h" 
.................... #ifndef _CAP1188_H_ 
.................... #define _CAP1188_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #use fast_io(C) 
....................  
.................... #define CAP_RESET    PIN_C0 
.................... #define CAP_CS1      PIN_D4 
.................... #define CAP_CS2      PIN_D5 
.................... #define CAP_CLK      PIN_C3 
.................... #define CAP_MOSI     PIN_C4 
.................... #define CAP_MISO     PIN_C5 
....................  
.................... #inline 
.................... void cap1188_reset(void) 
.................... { 
....................    output_low(CAP_CS1); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    // 
....................    output_low(CAP_CS2); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... /* 
.................... void cap1188_clr_int(void) 
.................... { 
....................     
.................... } 
....................  
.................... void cap1188_reset_interface(void) 
.................... {    
....................    output_low(CAP_CS1); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    output_low(CAP_CS2); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... void cap1188_set_address_ptr1(int8 adr) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_set_address_ptr2(int8 adr) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... */ 
.................... void cap1188_write_data1(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_write_data2(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... int8 cap1188_read_data1(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
....................    return data; 
.................... } 
....................  
.................... int8 cap1188_read_data2(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
....................    return data; 
.................... } 
.................... /* 
.................... void cap1188_disable_int(void) 
.................... { 
....................    cap1188_write_data1(0x27, 0x00); 
....................    cap1188_write_data2(0x27,0x00); 
.................... } 
....................  
.................... void cap1188_disable_ret(void) 
.................... { 
....................    cap1188_write_data1(0x28, 0x00); 
....................    cap1188_write_data2(0x28, 0x00); 
.................... } 
.................... */ 
.................... void cap1188_init(void) 
.................... { 
....................    delay_ms(100); 
....................    cap1188_reset(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... /*void cap1188_clr_int1(void) 
.................... { 
....................    cap1188_write_data1(0, 0); 
.................... } 
....................  
.................... void cap1188_clr_int2(void) 
.................... { 
....................    cap1188_write_data2(0, 0); 
.................... }*/ 
....................  
.................... #endif   // #define _CAP1188_H_ 
....................  
....................  
.................... //unsigned char setpoint_H, setpoint_L, protect_H, protect_L; 
.................... //int8 a,b,e,f,g,h,k; 
.................... static char n = 0; 
....................  
.................... void Process_Touch(void); 
....................  
.................... void Process_Touch_0(void); 
.................... void Process_Touch_1(void); 
.................... void Process_Touch_2(void); 
.................... void Process_Touch_3(void); 
.................... void Process_Touch_4(void); 
.................... void Process_Touch_5(void); 
.................... void Process_Touch_6(void); 
.................... void Process_Touch_7(void); 
.................... void Process_Touch_8(void); 
.................... void Process_Touch_9(void); 
.................... void Process_Touch_A(void); 
.................... void Process_Touch_B(void); 
.................... void Process_Touch_C(void); 
.................... void Process_Touch_D(void); 
.................... void Process_Touch_E(void); 
.................... void Process_Touch_F(void); 
.................... void Process_Touch_Down(void); 
.................... void Process_Touch_Up(void); 
.................... void Process_Touch_a_Small(void); 
.................... void Process_Touch_b_Small(void); 
.................... //void Process_Touch_c_Small(void); 
.................... void Process_Touch_d_Small(void); 
.................... void Process_Touch_e_Small(void); 
.................... void Process_Touch_f_Small(void); 
.................... void Process_Touch_h_Small(void); 
....................  
.................... void Process_Setup(void); 
....................  
.................... void Process_Touch(void) 
.................... { 
....................    if(key_flag) { 
*
3AD0:  MOVF   44,F
3AD2:  BZ    3B88
....................       beep(BEEP_TIME); 
3AD4:  CLRF   xDD
3AD6:  MOVLW  03
3AD8:  MOVWF  xDC
3ADA:  CALL   22EA
....................       switch(key_code) 
3ADE:  MOVLW  30
3AE0:  SUBWF  45,W
3AE2:  ADDLW  C7
3AE4:  BC    3B86
3AE6:  ADDLW  39
3AE8:  GOTO   3BCE
....................       { 
....................          case '0': 
....................             Process_Touch_0(); 
3AEC:  CALL   1B44
....................             Process_Setup(); 
3AF0:  CALL   2336
....................             break; 
3AF4:  BRA    3B86
....................          case '1': 
....................             Process_Touch_1(); 
3AF6:  CALL   1BB6
....................             Process_Setup(); 
3AFA:  CALL   2336
....................             break; 
3AFE:  BRA    3B86
....................          case '2': 
....................             Process_Touch_2(); 
3B00:  CALL   1C28
....................             Process_Setup(); 
3B04:  CALL   2336
....................             break; 
3B08:  BRA    3B86
....................          case '3': 
....................             Process_Touch_3(); 
3B0A:  CALL   1C9A
....................             Process_Setup(); 
3B0E:  CALL   2336
....................             break; 
3B12:  BRA    3B86
....................          case '4': 
....................             Process_Touch_4(); 
3B14:  CALL   1D0C
....................             Process_Setup(); 
3B18:  CALL   2336
....................             break; 
3B1C:  BRA    3B86
....................          case '5': 
....................             Process_Touch_5(); 
3B1E:  CALL   1D7E
....................             Process_Setup(); 
3B22:  CALL   2336
....................             break; 
3B26:  BRA    3B86
....................          case '6': 
....................             Process_Touch_6(); 
3B28:  CALL   1DF0
....................             Process_Setup(); 
3B2C:  CALL   2336
....................             break; 
3B30:  BRA    3B86
....................          case '7': 
....................             Process_Touch_7(); 
3B32:  CALL   1E62
....................             Process_Setup(); 
3B36:  CALL   2336
....................             break; 
3B3A:  BRA    3B86
....................          case '8': 
....................             Process_Touch_8(); 
3B3C:  CALL   1ED4
....................             Process_Setup(); 
3B40:  CALL   2336
....................             break; 
3B44:  BRA    3B86
....................          case '9': 
....................             Process_Touch_9(); 
3B46:  GOTO   276C
....................             break; 
3B4A:  BRA    3B86
....................          case 'A': 
....................             Process_Touch_A(); 
3B4C:  CALL   1F46
....................             Process_Setup(); 
3B50:  CALL   2336
....................             break; 
3B54:  BRA    3B86
....................          case 'B': 
....................             Process_Touch_B(); 
3B56:  GOTO   27C0
....................             break; 
3B5A:  BRA    3B86
....................          case 'C': 
....................             Process_Touch_C(); 
3B5C:  GOTO   28E8
....................             break; 
3B60:  BRA    3B86
....................          case 'D': 
....................             Process_Touch_D(); 
3B62:  GOTO   2C1A
....................             break; 
3B66:  BRA    3B86
....................          case 'E': 
....................             Process_Touch_Down(); 
3B68:  BRA    3530
....................             break; 
3B6A:  BRA    3B86
....................          case 'F': 
....................             Process_Touch_Up(); 
3B6C:  BRA    3726
....................             break; 
3B6E:  BRA    3B86
....................          case 'a': 
....................             Process_Touch_a_Small(); 
3B70:  BRA    3922
....................             break; 
3B72:  BRA    3B86
....................          case 'b': 
....................             Process_Touch_b_Small(); 
3B74:  BRA    395C
....................             break; 
3B76:  BRA    3B86
....................          /*case 'c': 
....................             Process_Touch_c_Small(); 
....................             break;*/ 
....................          case 'd': 
....................             Process_Touch_d_Small(); 
3B78:  BRA    39FC
....................             break; 
3B7A:  BRA    3B86
....................          case 'e': 
....................             Process_Touch_e_Small(); 
3B7C:  BRA    3A30
....................             break; 
3B7E:  BRA    3B86
....................          case 'f': 
....................             Process_Touch_f_Small(); 
3B80:  BRA    3A70
....................             break; 
3B82:  BRA    3B86
....................          case 'h': 
....................             Process_Touch_h_Small(); 
3B84:  BRA    3A9C
....................             break; 
....................       } 
....................       key_flag = 0; 
3B86:  CLRF   44
....................    } 
....................    if ((24 > wait_hour) && (wait_min < 60)) { 
3B88:  MOVF   5C,W
3B8A:  SUBLW  17
3B8C:  BNC   3BBA
3B8E:  MOVF   5D,W
3B90:  SUBLW  3B
3B92:  BNC   3BBA
....................             user_delay_time = (int16)wait_hour * 60 + wait_min; 
3B94:  CLRF   xDD
3B96:  MOVFF  5C,DC
3B9A:  MOVFF  DD,E1
3B9E:  MOVFF  5C,E0
3BA2:  CLRF   xE3
3BA4:  MOVLW  3C
3BA6:  MOVWF  xE2
3BA8:  CALL   15D0
3BAC:  MOVF   5D,W
3BAE:  ADDWF  01,W
3BB0:  MOVWF  56
3BB2:  MOVLW  00
3BB4:  ADDWFC 02,W
3BB6:  MOVWF  57
....................       } 
3BB8:  BRA    3BC2
....................       else { 
....................             user_delay_time = 0; 
3BBA:  CLRF   57
3BBC:  CLRF   56
....................             wait_hour = 0; 
3BBE:  CLRF   5C
....................             wait_min = 0; 
3BC0:  CLRF   5D
....................       } 
....................             delay_time = user_delay_time; 
3BC2:  MOVFF  57,80
3BC6:  MOVFF  56,7F
3BCA:  GOTO   689C (RETURN)
.................... } 
....................  
.................... void Process_Touch_0(void) 
.................... { 
....................    i  = 1; 
*
1B44:  CLRF   5B
1B46:  MOVLW  01
1B48:  MOVWF  5A
....................    switch (g_state) { 
1B4A:  MOVF   38,W
1B4C:  XORLW  01
1B4E:  BZ    1B56
1B50:  XORLW  07
1B52:  BZ    1B56
1B54:  BRA    1B78
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1B56:  RCALL  1962
....................          Led_0_On(); 
1B58:  RCALL  19DA
....................          g_mode = PROGRAM1; 
1B5A:  MOVLW  01
1B5C:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x50); 
....................          if (g_active_mode != MODE_SET_1) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1B5E:  RCALL  1A16
....................          setpoint = user_setpoint; 
1B60:  MOVFF  53,66
1B64:  MOVFF  52,65
....................          protect = user_protect; 
1B68:  MOVFF  55,68
1B6C:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1B70:  MOVFF  59,82
1B74:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_1; 
....................          }*/ 
....................          break; 
....................    } 
1B78:  RETURN 0
.................... } 
.................... void Process_Touch_1(void) 
.................... { 
....................    i  = 2; 
*
1BB6:  CLRF   5B
1BB8:  MOVLW  02
1BBA:  MOVWF  5A
....................    switch (g_state) { 
1BBC:  MOVF   38,W
1BBE:  XORLW  01
1BC0:  BZ    1BC8
1BC2:  XORLW  07
1BC4:  BZ    1BC8
1BC6:  BRA    1BEA
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1BC8:  RCALL  1962
....................          Led_1_On(); 
1BCA:  RCALL  1B7A
....................          g_mode = PROGRAM2; 
1BCC:  MOVLW  02
1BCE:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x51); 
....................          if (g_active_mode != MODE_SET_2) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1BD0:  RCALL  1A16
....................          setpoint = user_setpoint; 
1BD2:  MOVFF  53,66
1BD6:  MOVFF  52,65
....................          protect = user_protect; 
1BDA:  MOVFF  55,68
1BDE:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1BE2:  MOVFF  59,82
1BE6:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_2; 
....................          }*/ 
....................          break; 
....................    } 
1BEA:  RETURN 0
.................... } 
.................... void Process_Touch_2(void) 
.................... { 
....................    i  = 3; 
*
1C28:  CLRF   5B
1C2A:  MOVLW  03
1C2C:  MOVWF  5A
....................    switch (g_state) { 
1C2E:  MOVF   38,W
1C30:  XORLW  01
1C32:  BZ    1C3A
1C34:  XORLW  07
1C36:  BZ    1C3A
1C38:  BRA    1C5C
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1C3A:  RCALL  1962
....................          Led_2_On(); 
1C3C:  RCALL  1BEC
....................          g_mode = PROGRAM3; 
1C3E:  MOVLW  03
1C40:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x52); 
....................          if (g_active_mode != MODE_SET_3) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1C42:  RCALL  1A16
....................          setpoint = user_setpoint; 
1C44:  MOVFF  53,66
1C48:  MOVFF  52,65
....................          protect = user_protect; 
1C4C:  MOVFF  55,68
1C50:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1C54:  MOVFF  59,82
1C58:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_3; 
....................          }*/ 
....................          break; 
....................    } 
1C5C:  RETURN 0
.................... } 
.................... void Process_Touch_3(void) 
.................... { 
....................    i  = 4; 
*
1C9A:  CLRF   5B
1C9C:  MOVLW  04
1C9E:  MOVWF  5A
....................    switch (g_state) { 
1CA0:  MOVF   38,W
1CA2:  XORLW  01
1CA4:  BZ    1CAC
1CA6:  XORLW  07
1CA8:  BZ    1CAC
1CAA:  BRA    1CCE
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1CAC:  RCALL  1962
....................          Led_3_On(); 
1CAE:  RCALL  1C5E
....................          g_mode = PROGRAM4; 
1CB0:  MOVLW  04
1CB2:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x53); 
....................          if (g_active_mode != MODE_SET_4) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1CB4:  RCALL  1A16
....................          setpoint = user_setpoint; 
1CB6:  MOVFF  53,66
1CBA:  MOVFF  52,65
....................          protect = user_protect; 
1CBE:  MOVFF  55,68
1CC2:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1CC6:  MOVFF  59,82
1CCA:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_4; 
....................          }*/ 
....................          break; 
....................    } 
1CCE:  RETURN 0
.................... } 
.................... void Process_Touch_4(void) 
.................... { 
....................    i  = 5; 
*
1D0C:  CLRF   5B
1D0E:  MOVLW  05
1D10:  MOVWF  5A
....................    switch (g_state) { 
1D12:  MOVF   38,W
1D14:  XORLW  01
1D16:  BZ    1D1E
1D18:  XORLW  07
1D1A:  BZ    1D1E
1D1C:  BRA    1D40
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1D1E:  RCALL  1962
....................          Led_4_On(); 
1D20:  RCALL  1CD0
....................          g_mode = PROGRAM5; 
1D22:  MOVLW  05
1D24:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x54); 
....................          if (g_active_mode != MODE_SET_5) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1D26:  RCALL  1A16
....................          setpoint = user_setpoint; 
1D28:  MOVFF  53,66
1D2C:  MOVFF  52,65
....................          protect = user_protect; 
1D30:  MOVFF  55,68
1D34:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1D38:  MOVFF  59,82
1D3C:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_5; 
....................          }*/ 
....................          break; 
....................    } 
1D40:  RETURN 0
.................... } 
.................... void Process_Touch_5(void) 
.................... { 
....................    i  = 6; 
*
1D7E:  CLRF   5B
1D80:  MOVLW  06
1D82:  MOVWF  5A
....................    switch (g_state) { 
1D84:  MOVF   38,W
1D86:  XORLW  01
1D88:  BZ    1D90
1D8A:  XORLW  07
1D8C:  BZ    1D90
1D8E:  BRA    1DB2
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1D90:  RCALL  1962
....................          Led_5_On(); 
1D92:  RCALL  1D42
....................          g_mode = PROGRAM6; 
1D94:  MOVLW  06
1D96:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x55); 
....................          if (g_active_mode != MODE_SET_6) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1D98:  RCALL  1A16
....................          setpoint = user_setpoint; 
1D9A:  MOVFF  53,66
1D9E:  MOVFF  52,65
....................          protect = user_protect; 
1DA2:  MOVFF  55,68
1DA6:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1DAA:  MOVFF  59,82
1DAE:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_6; 
....................          }*/ 
....................          break; 
....................    } 
1DB2:  RETURN 0
.................... } 
.................... void Process_Touch_6(void) 
.................... { 
....................    i  = 7; 
*
1DF0:  CLRF   5B
1DF2:  MOVLW  07
1DF4:  MOVWF  5A
....................    switch (g_state) { 
1DF6:  MOVF   38,W
1DF8:  XORLW  01
1DFA:  BZ    1E02
1DFC:  XORLW  07
1DFE:  BZ    1E02
1E00:  BRA    1E24
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1E02:  RCALL  1962
....................          Led_6_On(); 
1E04:  RCALL  1DB4
....................          g_mode = PROGRAM7; 
1E06:  MOVLW  07
1E08:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x56); 
....................          if (g_active_mode != MODE_SET_7) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1E0A:  RCALL  1A16
....................          setpoint = user_setpoint; 
1E0C:  MOVFF  53,66
1E10:  MOVFF  52,65
....................          protect = user_protect; 
1E14:  MOVFF  55,68
1E18:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1E1C:  MOVFF  59,82
1E20:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_7; 
....................          }*/ 
....................          break; 
....................    } 
1E24:  RETURN 0
.................... } 
.................... void Process_Touch_7(void) 
.................... { 
....................    i  = 8; 
*
1E62:  CLRF   5B
1E64:  MOVLW  08
1E66:  MOVWF  5A
....................    switch (g_state) { 
1E68:  MOVF   38,W
1E6A:  XORLW  01
1E6C:  BZ    1E74
1E6E:  XORLW  07
1E70:  BZ    1E74
1E72:  BRA    1E96
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1E74:  RCALL  1962
....................          Led_7_On(); 
1E76:  RCALL  1E26
....................          g_mode = PROGRAM8; 
1E78:  MOVLW  08
1E7A:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x57); 
....................          if (g_active_mode != MODE_SET_8) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1E7C:  RCALL  1A16
....................          setpoint = user_setpoint; 
1E7E:  MOVFF  53,66
1E82:  MOVFF  52,65
....................          protect = user_protect; 
1E86:  MOVFF  55,68
1E8A:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1E8E:  MOVFF  59,82
1E92:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_8; 
....................          }*/ 
....................          break; 
....................    } 
1E96:  RETURN 0
.................... } 
.................... void Process_Touch_8(void) 
.................... { 
....................    i  = 9; 
*
1ED4:  CLRF   5B
1ED6:  MOVLW  09
1ED8:  MOVWF  5A
....................    switch (g_state) { 
1EDA:  MOVF   38,W
1EDC:  XORLW  01
1EDE:  BZ    1EE6
1EE0:  XORLW  07
1EE2:  BZ    1EE6
1EE4:  BRA    1F08
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1EE6:  RCALL  1962
....................          Led_8_On(); 
1EE8:  RCALL  1E98
....................          g_mode = PROGRAM9; 
1EEA:  MOVLW  09
1EEC:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x58); 
....................          if (g_active_mode != MODE_SET_9) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1EEE:  RCALL  1A16
....................          setpoint = user_setpoint; 
1EF0:  MOVFF  53,66
1EF4:  MOVFF  52,65
....................          protect = user_protect; 
1EF8:  MOVFF  55,68
1EFC:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1F00:  MOVFF  59,82
1F04:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_9; 
....................          }*/ 
....................          break; 
....................    } 
1F08:  RETURN 0
.................... } 
.................... void Process_Touch_A(void) 
.................... { 
....................    i  = 0; 
*
1F46:  CLRF   5B
1F48:  CLRF   5A
....................    switch (g_state) { 
1F4A:  MOVF   38,W
1F4C:  XORLW  01
1F4E:  BZ    1F56
1F50:  XORLW  07
1F52:  BZ    1F56
1F54:  BRA    1F78
....................       case ST_IDLE: 
....................       case ST_SET_TIME_STER_DRY: 
....................          Led_Prog_Off(); 
1F56:  RCALL  1962
....................          Led_A_On(); 
1F58:  RCALL  1F0A
....................          g_mode = PROGRAM10; 
1F5A:  MOVLW  0A
1F5C:  MOVWF  3A
....................          /*g_active_mode = read_eeprom(0x59); 
....................          if (g_active_mode != MODE_SET_10) { 
....................             g_active_mode = MODE_STAND; 
....................          }*/ 
....................          Load_Data_Program_EEPROM(); 
1F5E:  RCALL  1A16
....................          setpoint = user_setpoint; 
1F60:  MOVFF  53,66
1F64:  MOVFF  52,65
....................          protect = user_protect; 
1F68:  MOVFF  55,68
1F6C:  MOVFF  54,67
....................          ster_time = user_ster_time; 
1F70:  MOVFF  59,82
1F74:  MOVFF  58,81
....................          /*if (g_state == ST_SET_TIME_STER_DRY) { 
....................             g_state = ST_SET_SETPOINT; 
....................             g_active_mode = MODE_SET_10; 
....................          }*/ 
....................          break; 
....................    } 
1F78:  RETURN 0
.................... } 
.................... void Process_Touch_D(void) // Set 
.................... { 
....................    if (g_state == ST_IDLE || (g_state == ST_SET_PROGRAM && g_set == SET_PROGRAM_USER)) { 
*
2C1A:  DECFSZ 38,W
2C1C:  BRA    2C20
2C1E:  BRA    2C2A
2C20:  MOVF   38,W
2C22:  SUBLW  02
2C24:  BNZ   2C46
2C26:  DECFSZ 3B,W
2C28:  BRA    2C46
....................       Load_Data_User(); 
2C2A:  CALL   1FB6
....................       setpoint = user_setpoint; 
2C2E:  MOVFF  53,66
2C32:  MOVFF  52,65
....................       protect = user_protect; 
2C36:  MOVFF  55,68
2C3A:  MOVFF  54,67
....................       ster_time = user_ster_time; 
2C3E:  MOVFF  59,82
2C42:  MOVFF  58,81
....................    } 
....................    switch (g_state) { 
2C46:  MOVLW  01
2C48:  SUBWF  38,W
2C4A:  ADDLW  EC
2C4C:  BTFSC  FD8.0
2C4E:  BRA    2D16
2C50:  ADDLW  14
2C52:  GOTO   2D1A
....................       case ST_IDLE: 
....................          Led_Prog_Off(); 
2C56:  CALL   1962
....................          Led_D_On(); 
2C5A:  CALL   1F7A
....................          g_mode = USER_MODE; 
2C5E:  MOVLW  0B
2C60:  MOVWF  3A
....................          break; 
2C62:  BRA    2D16
....................       case ST_SET_PROGRAM: 
....................          switch(g_set) { 
2C64:  MOVF   3B,W
2C66:  XORLW  01
2C68:  BZ    2C74
2C6A:  XORLW  03
2C6C:  BZ    2C86
2C6E:  XORLW  01
2C70:  BZ    2C8C
2C72:  BRA    2C90
....................             case SET_PROGRAM_USER: 
....................                g_mode = USER_MODE; 
2C74:  MOVLW  0B
2C76:  MOVWF  3A
....................                Led_Prog_Off(); 
2C78:  CALL   1962
....................                Led_D_On(); 
2C7C:  CALL   1F7A
....................                g_state = ST_SET_SETPOINT; 
2C80:  MOVLW  07
2C82:  MOVWF  38
....................                break; 
2C84:  BRA    2C90
....................             case SET_TIME_REAL_TIME_CLOCK: 
....................                g_state = ST_SET_DAY_OF_WEEK; 
2C86:  MOVLW  03
2C88:  MOVWF  38
....................                break; 
2C8A:  BRA    2C90
....................             case SET_TIME_CLOCK: 
....................                g_state = ST_SET_TIME_DELAY; 
2C8C:  MOVLW  09
2C8E:  MOVWF  38
....................                break; 
....................          } 
....................          break; 
2C90:  BRA    2D16
....................       case ST_SET_DAY_OF_WEEK: 
....................          g_state = ST_SET_HOUR; 
2C92:  MOVLW  04
2C94:  MOVWF  38
....................          break; 
2C96:  BRA    2D16
....................       case ST_SET_HOUR: 
....................          g_state = ST_SET_MINUTE; 
2C98:  MOVLW  05
2C9A:  MOVWF  38
....................          break; 
2C9C:  BRA    2D16
....................       case ST_SET_TIME_DELAY: 
....................          g_state = ST_SET_WAIT_TIME; 
2C9E:  MOVLW  0A
2CA0:  MOVWF  38
....................          hour_min_flag = 1; 
2CA2:  MOVLW  01
2CA4:  MOVWF  xBE
....................          Led_Dot_On(); 
2CA6:  RCALL  26F4
....................          break; 
2CA8:  BRA    2D16
....................       case ST_SET_MINUTE: 
....................          Led_Dot_Off(); 
2CAA:  RCALL  2730
....................          g_state = ST_SET_PROGRAM; 
2CAC:  MOVLW  02
2CAE:  MOVWF  38
....................          break; 
2CB0:  BRA    2D16
....................       case ST_SET_WAIT_TIME: 
....................          Store_WaitTime(); 
2CB2:  BRA    29E4
....................          g_state = ST_SET_PROGRAM; 
2CB4:  MOVLW  02
2CB6:  MOVWF  38
....................          break; 
2CB8:  BRA    2D16
....................          case ST_SET_HOLD_TIME: 
....................             hold_hour = user_ster_time/60; 
2CBA:  MOVFF  59,E6
2CBE:  MOVFF  58,E5
2CC2:  CLRF   xE8
2CC4:  MOVLW  3C
2CC6:  MOVWF  xE7
2CC8:  CALL   22F4
2CCC:  MOVFF  01,5F
....................             hold_min = user_ster_time%60; 
2CD0:  MOVFF  59,E6
2CD4:  MOVFF  58,E5
2CD8:  CLRF   xE8
2CDA:  MOVLW  3C
2CDC:  MOVWF  xE7
2CDE:  CALL   22F4
2CE2:  MOVFF  00,60
....................             g_state = ST_SET_PROGRAM; 
2CE6:  MOVLW  02
2CE8:  MOVWF  38
....................             Check_Data_Previous(); 
2CEA:  BRA    2A28
....................             Store_Setpoint(); 
2CEC:  BRA    2A78
....................             Store_Protect(); 
2CEE:  BRA    2AD8
....................             Store_HoldTime(); 
2CF0:  BRA    2B38
....................             break; 
2CF2:  BRA    2D16
....................       /*case ST_DIS_TIME_DAY_HOUR: 
....................          g_state = ST_SET_TIME_DAY_HOUR; 
....................          flag_day_hour = 0; 
....................          user_ster_time = ster_time = 0; 
....................          break; 
....................       case ST_DIS_TIME_HOUR_MIN: 
....................          g_state = ST_SET_TIME_HOUR_MIN; 
....................          flag_day_hour = 1; 
....................          user_day_ster_time = day_ster_time = 0; 
....................          user_hour_ster_time = hour_ster_time = 0; 
....................          break; 
....................       case ST_SET_TIME_DAY_HOUR: 
....................       case ST_SET_TIME_HOUR_MIN: 
....................          g_state = ST_SET_PROGRAM; 
....................          Check_Data_Previous(); 
....................          Store_Setpoint(); 
....................          Store_Protect(); 
....................          Store_DayTime(); 
....................          Store_HourTime(); 
....................          Store_HoldTime(); 
....................          write_eeprom(0x50, flag_day_hour); 
....................          user_hold_time = user_day_ster_time*24*60 + user_hour_ster_time*60; 
....................          break;*/ 
....................       case ST_SET_PASS: 
....................       case ST_SAVE_PASS: 
....................          if (password == check_password) { 
2CF4:  MOVF   63,W
2CF6:  SUBWF  61,W
2CF8:  BNZ   2D0A
2CFA:  MOVF   64,W
2CFC:  SUBWF  62,W
2CFE:  BNZ   2D0A
....................             //g_state = ST_SET_TIME_STER_DRY; 
....................             g_state = ST_SET_SERI; 
2D00:  MOVLW  14
2D02:  MOVWF  38
....................             password = 0; 
2D04:  CLRF   62
2D06:  CLRF   61
....................          } 
2D08:  BRA    2D0E
....................          else password = 0; 
2D0A:  CLRF   62
2D0C:  CLRF   61
....................          break; 
2D0E:  BRA    2D16
....................       case ST_SET_SERI: 
....................          Store_SERI(); 
2D10:  BRA    2BBA
....................          //flag_ID = 0; 
....................          g_state = ST_IDLE; 
2D12:  MOVLW  01
2D14:  MOVWF  38
....................          break; 
....................    } 
2D16:  GOTO   3B86 (RETURN)
.................... } 
.................... void Process_Touch_9(void) // . 
.................... { 
....................    switch (g_state) { 
*
276C:  MOVLW  0A
276E:  SUBWF  38,W
2770:  ADDLW  FA
2772:  BC    2796
2774:  ADDLW  06
2776:  GOTO   279A
....................       case ST_SET_WAIT_TIME: 
....................       case ST_SET_HOLD_TIME: 
....................       case ST_SET_TIME_DAY_HOUR: 
....................       case ST_SET_TIME_HOUR_MIN: 
....................          if(0 == hour_min_flag) { 
277A:  MOVF   xBE,F
277C:  BNZ   2786
....................             hour_min_flag = 1; 
277E:  MOVLW  01
2780:  MOVWF  xBE
....................             Led_Dot_On(); 
2782:  RCALL  26F4
....................          } else { 
2784:  BRA    2796
....................             hour_min_flag = 0; 
2786:  CLRF   xBE
....................             if(ster_time == 0) { 
2788:  MOVF   x81,F
278A:  BNZ   2794
278C:  MOVF   x82,F
278E:  BNZ   2794
....................                n = 1; 
2790:  MOVLW  01
2792:  MOVWF  xCA
....................             } 
....................             Led_Dot_Off(); 
2794:  RCALL  2730
....................          } 
....................          break; 
....................    } 
2796:  GOTO   3B86 (RETURN)
.................... } 
.................... void Process_Touch_B(void) //Clear 
.................... { 
....................    switch (g_state) { 
*
27C0:  MOVLW  07
27C2:  SUBWF  38,W
27C4:  ADDLW  F2
27C6:  BC    2822
27C8:  ADDLW  0E
27CA:  GOTO   2826
....................       case ST_SET_SETPOINT: 
....................          setpoint = 0; 
27CE:  CLRF   66
27D0:  CLRF   65
....................          user_setpoint = setpoint; 
27D2:  MOVFF  66,53
27D6:  MOVFF  65,52
....................          break; 
27DA:  BRA    2822
....................       case ST_SET_PROTECT: 
....................          protect = 0; 
27DC:  CLRF   68
27DE:  CLRF   67
....................          user_protect = protect; 
27E0:  MOVFF  68,55
27E4:  MOVFF  67,54
....................          break; 
27E8:  BRA    2822
....................       case ST_SET_WAIT_TIME: 
....................          delay_time = 0; 
27EA:  CLRF   x80
27EC:  CLRF   7F
....................          wait_hour = 0; 
27EE:  CLRF   5C
....................          wait_min = 0; 
27F0:  CLRF   5D
....................          user_delay_time = delay_time; 
27F2:  MOVFF  80,57
27F6:  MOVFF  7F,56
....................          hour_min_flag = 1; 
27FA:  MOVLW  01
27FC:  MOVWF  xBE
....................          Led_Dot_On(); 
27FE:  RCALL  26F4
....................          break; 
2800:  BRA    2822
....................       case ST_SET_HOLD_TIME: 
....................       //case ST_SET_TIME_DAY_HOUR: 
....................       //case ST_SET_TIME_HOUR_MIN: 
....................          ster_time = 0; 
2802:  CLRF   x82
2804:  CLRF   x81
....................          user_ster_time = ster_time; 
2806:  MOVFF  82,59
280A:  MOVFF  81,58
....................          /*day_ster_time = 0; 
....................          user_day_ster_time = day_ster_time; 
....................          day_remain_time = user_day_ster_time; 
....................          hour_ster_time = 0; 
....................          user_hour_ster_time = hour_ster_time; 
....................          hour_remain_time = user_hour_ster_time;*/ 
....................          hour_min_flag = 1; 
280E:  MOVLW  01
2810:  MOVWF  xBE
....................          n = 0; 
2812:  CLRF   xCA
....................          Led_Dot_On(); 
2814:  RCALL  26F4
....................          break; 
2816:  BRA    2822
....................       case ST_SET_PASS: 
....................          password = 0; 
2818:  CLRF   62
281A:  CLRF   61
....................          break; 
281C:  BRA    2822
....................       case ST_SET_SERI: 
....................          seri = 0; 
281E:  CLRF   x97
2820:  CLRF   x96
....................          break; 
....................    } 
2822:  GOTO   3B86 (RETURN)
.................... } 
.................... void Process_Touch_C(void) //Start/Stop 
.................... { 
....................    if (g_state <= ST_SET_OFFSET) { 
*
28E8:  MOVF   38,W
28EA:  SUBLW  18
28EC:  BNC   2920
....................       g_state = ST_RUN_WAITING_TIME; 
28EE:  MOVLW  19
28F0:  MOVWF  38
....................       old_state = g_state; 
28F2:  MOVFF  38,39
....................       Led_C_On(); 
28F6:  BRA    285C
....................       Store_Mode(); 
28F8:  BRA    289A
....................       Load_PID(); 
28FA:  CALL   1768
....................       remain_time = delay_time; 
28FE:  MOVFF  80,8A
2902:  MOVFF  7F,89
....................       last_min = read_ds1307(1); 
2906:  MOVLW  01
2908:  MOVWF  xDE
290A:  CALL   13E6
290E:  MOVFF  01,51
....................       flag_Rs232 = 1; 
2912:  MOVLW  01
2914:  MOVWF  xC0
....................       flag_Rs232_Ster = 1; 
2916:  MOVWF  xC1
....................       flag_Rs232_Complete = 1; 
2918:  MOVWF  xC2
....................       flag_Rs232_Err = 1; 
291A:  MOVWF  xC3
....................       flag_Pre_Hold = 0; 
291C:  CLRF   xC5
....................       /*switch (g_mode) { 
....................          case PROGRAM1: 
....................             write_eeprom(0x50, g_active_mode); 
....................          break; 
....................          case PROGRAM2: 
....................             write_eeprom(0x51, g_active_mode); 
....................          break; 
....................          case PROGRAM3: 
....................             write_eeprom(0x52, g_active_mode); 
....................          break; 
....................          case PROGRAM4: 
....................             write_eeprom(0x53, g_active_mode); 
....................          break; 
....................          case PROGRAM5: 
....................             write_eeprom(0x54, g_active_mode); 
....................          break; 
....................          case PROGRAM6: 
....................             write_eeprom(0x55, g_active_mode); 
....................          break; 
....................          case PROGRAM7: 
....................             write_eeprom(0x56, g_active_mode); 
....................          break; 
....................          case PROGRAM8: 
....................             write_eeprom(0x57, g_active_mode); 
....................          break; 
....................          case PROGRAM9: 
....................             write_eeprom(0x58, g_active_mode); 
....................          break; 
....................          case PROGRAM10: 
....................             write_eeprom(0x59, g_active_mode); 
....................          break; 
....................       }*/ 
....................    } else { 
291E:  BRA    29E0
....................       g_state = ST_IDLE; 
2920:  MOVLW  01
2922:  MOVWF  38
....................       Led_C_Off(); 
2924:  BRA    28AA
....................       g_mode = read_DS1307(0x08); 
2926:  MOVLW  08
2928:  MOVWF  xDE
292A:  CALL   13E6
292E:  MOVFF  01,3A
....................       flag_Rs232 = 0; 
2932:  CLRF   xC0
....................       flag_Rs232_Ster = 0; 
2934:  CLRF   xC1
....................       flag_Rs232_Complete = 0; 
2936:  CLRF   xC2
....................       flag_Rs232_Err = 0; 
2938:  CLRF   xC3
....................       flag_Pre_Hold = 0; 
293A:  CLRF   xC5
....................       if(old_state != ST_IDLE && old_state != ST_COMPLETED && old_state != ST_ERR) { 
293C:  DECFSZ 39,W
293E:  BRA    2942
2940:  BRA    2954
2942:  MOVF   39,W
2944:  SUBLW  1D
2946:  BZ    2954
2948:  MOVF   39,W
294A:  SUBLW  1E
294C:  BZ    2954
....................          flag_Rs232_IDLE = 1; 
294E:  MOVLW  01
2950:  MOVWF  xC4
....................          old_state = ST_IDLE; 
2952:  MOVWF  39
....................       } 
....................       switch(g_mode) { 
2954:  MOVF   3A,W
2956:  XORLW  01
2958:  BZ    2980
295A:  XORLW  03
295C:  BZ    2986
295E:  XORLW  01
2960:  BZ    298C
2962:  XORLW  07
2964:  BZ    2992
2966:  XORLW  01
2968:  BZ    2998
296A:  XORLW  03
296C:  BZ    299E
296E:  XORLW  01
2970:  BZ    29A4
2972:  XORLW  0F
2974:  BZ    29AA
2976:  XORLW  01
2978:  BZ    29B0
297A:  XORLW  03
297C:  BZ    29B6
297E:  BRA    29BC
....................          case PROGRAM1: 
....................             Process_Touch_0(); 
2980:  CALL   1B44
....................             break; 
2984:  BRA    29E0
....................          case PROGRAM2: 
....................             Process_Touch_1(); 
2986:  CALL   1BB6
....................             break; 
298A:  BRA    29E0
....................          case PROGRAM3: 
....................             Process_Touch_2(); 
298C:  CALL   1C28
....................             break; 
2990:  BRA    29E0
....................          case PROGRAM4: 
....................             Process_Touch_3(); 
2992:  CALL   1C9A
....................             break; 
2996:  BRA    29E0
....................          case PROGRAM5: 
....................             Process_Touch_4(); 
2998:  CALL   1D0C
....................             break; 
299C:  BRA    29E0
....................          case PROGRAM6: 
....................             Process_Touch_5(); 
299E:  CALL   1D7E
....................             break; 
29A2:  BRA    29E0
....................          case PROGRAM7: 
....................             Process_Touch_6(); 
29A4:  CALL   1DF0
....................             break; 
29A8:  BRA    29E0
....................          case PROGRAM8: 
....................             Process_Touch_7(); 
29AA:  CALL   1E62
....................             break; 
29AE:  BRA    29E0
....................          case PROGRAM9: 
....................             Process_Touch_8(); 
29B0:  CALL   1ED4
....................             break; 
29B4:  BRA    29E0
....................          case PROGRAM10: 
....................             Process_Touch_A(); 
29B6:  CALL   1F46
....................             break; 
29BA:  BRA    29E0
....................          default: 
....................             Led_D_On(); 
29BC:  CALL   1F7A
....................             delay_time = user_delay_time; 
29C0:  MOVFF  57,80
29C4:  MOVFF  56,7F
....................             ster_time = user_ster_time; 
29C8:  MOVFF  59,82
29CC:  MOVFF  58,81
....................             /*if(flag_day_hour == 0) { 
....................                user_hold_time = (user_day_ster_time)*24*60 + user_hour_ster_time*60; 
....................                day_remain_time = user_day_ster_time; 
....................                hour_remain_time = user_hour_ster_time; 
....................             } 
....................             if(flag_day_hour == 1) { 
....................                user_hold_time = (unsigned int16)(user_ster_time); 
....................             }*/ 
....................             setpoint = user_setpoint; 
29D0:  MOVFF  53,66
29D4:  MOVFF  52,65
....................             protect = user_protect; 
29D8:  MOVFF  55,68
29DC:  MOVFF  54,67
....................             break; 
....................       } 
....................    } 
29E0:  GOTO   3B86 (RETURN)
.................... } 
....................  
.................... void Process_Touch_Down(void) //Down 
.................... { 
....................    int8 d1, d0; 
....................    switch(g_state) { 
*
3530:  MOVF   38,W
3532:  XORLW  02
3534:  BZ    3568
3536:  XORLW  05
3538:  BZ    3580
353A:  XORLW  0F
353C:  BZ    3586
353E:  XORLW  1D
3540:  BZ    3594
3542:  XORLW  03
3544:  BZ    35B8
3546:  XORLW  01
3548:  BZ    35DC
354A:  XORLW  0F
354C:  BZ    3600
354E:  XORLW  1B
3550:  BTFSC  FD8.2
3552:  BRA    362E
3554:  XORLW  07
3556:  BTFSC  FD8.2
3558:  BRA    364C
355A:  XORLW  01
355C:  BTFSC  FD8.2
355E:  BRA    368E
3560:  XORLW  0C
3562:  BTFSC  FD8.2
3564:  BRA    36D0
3566:  BRA    36EA
....................       case ST_SET_PROGRAM: 
....................          switch (g_set) { 
3568:  MOVF   3B,W
356A:  XORLW  03
356C:  BZ    3574
356E:  XORLW  01
3570:  BZ    357A
3572:  BRA    357E
....................             case SET_TIME_CLOCK: 
....................                g_set = SET_TIME_REAL_TIME_CLOCK; 
3574:  MOVLW  02
3576:  MOVWF  3B
....................                break; 
3578:  BRA    357E
....................             case SET_TIME_REAL_TIME_CLOCK: 
....................                g_set = SET_PROGRAM_USER; 
357A:  MOVLW  01
357C:  MOVWF  3B
....................                break; 
....................          } 
....................          break; 
357E:  BRA    36FA
....................       case ST_SET_SETPOINT: 
....................          g_state = ST_SET_PROTECT; 
3580:  MOVLW  08
3582:  MOVWF  38
....................          break; 
3584:  BRA    36FA
....................       case ST_SET_PROTECT: 
....................          g_state = ST_SET_HOLD_TIME; 
3586:  MOVLW  0B
3588:  MOVWF  38
....................          //g_state = ST_DIS_TIME_DAY_HOUR; 
....................          hour_min_flag = 1; 
358A:  MOVLW  01
358C:  MOVWF  xBE
....................          Led_Dot_On(); 
358E:  CALL   26F4
....................          break; 
3592:  BRA    36FA
....................       /*case ST_DIS_TIME_DAY_HOUR: 
....................          g_state = ST_DIS_TIME_HOUR_MIN; 
....................          break;*/ 
....................       /*case ST_SET_HOLD_TIME: 
....................          switch (g_mode) { 
....................             case USER_MODE: 
....................                Store_WaitTime(); 
....................                Store_HoldTime(); 
....................                Store_Setpoint(); 
....................                Store_Protect(); 
....................                break; 
....................             /*case PROGRAM1: 
....................                a = 0x09; 
....................                b = 0x0A; 
....................                e = 0x0D; 
....................                f = 0x0E; 
....................                g = 0x12; 
....................                h = 0x13; 
....................                k = 0x50; 
....................                break; 
....................             case PROGRAM2: 
....................                a = 0x16; 
....................                b = 0x17; 
....................                e = 0x1A; 
....................                f = 0x1F; 
....................                g = 0x22; 
....................                h = 0x23; 
....................                k = 0x51; 
....................                break; 
....................             case PROGRAM3: 
....................                a = 0x07; 
....................                b = 0x08; 
....................                e = 0x30; 
....................                f = 0x31; 
....................                g = 0x32; 
....................                h = 0x33; 
....................                k = 0x52; 
....................                break; 
....................             case PROGRAM4: 
....................                a = 0x0B; 
....................                b = 0x0C; 
....................                e = 0x34; 
....................                f = 0x35; 
....................                g = 0x36; 
....................                h = 0x37;  
....................                k = 0x53; 
....................                break; 
....................             case PROGRAM5: 
....................                a = 0x10; 
....................                b = 0x11; 
....................                e = 0x38; 
....................                f = 0x39; 
....................                g = 0x3A; 
....................                h = 0x3B; 
....................                k = 0x54; 
....................                break; 
....................             case PROGRAM6: 
....................                a = 0x14; 
....................                b = 0x15; 
....................                e = 0x3C; 
....................                f = 0x3D; 
....................                g = 0x3E; 
....................                h = 0x3F;  
....................                k = 0x55; 
....................                break; 
....................             case PROGRAM7: 
....................                a = 0x18; 
....................                b = 0x19; 
....................                e = 0x40; 
....................                f = 0x41; 
....................                g = 0x42; 
....................                h = 0x43;  
....................                k = 0x56; 
....................                break; 
....................             case PROGRAM8: 
....................                a = 0x20; 
....................                b = 0x21; 
....................                e = 0x44; 
....................                f = 0x45; 
....................                g = 0x46; 
....................                h = 0x47;  
....................                k = 0x57; 
....................                break; 
....................             case PROGRAM9: 
....................                a = 0x24; 
....................                b = 0x25; 
....................                e = 0x48; 
....................                f = 0x49; 
....................                g = 0x4A; 
....................                h = 0x4B;  
....................                k = 0x58; 
....................                break; 
....................             case PROGRAM10: 
....................                a = 0x28; 
....................                b = 0x29; 
....................                e = 0x4C; 
....................                f = 0x4D; 
....................                g = 0x4E; 
....................                h = 0x4F;  
....................                k = 0x59; 
....................                break; 
....................          } 
....................          if (g_mode >= PROGRAM1 && g_mode <= PROGRAM10) { 
....................             write_eeprom(a, hold_hour); 
....................             write_eeprom(b, hold_min); 
....................             write_eeprom(e, setpoint_H); 
....................             write_eeprom(f, setpoint_L); 
....................             write_eeprom(g, protect_H); 
....................             write_eeprom(h, protect_L); 
....................             write_eeprom(k, g_active_mode); 
....................          } 
....................          if (g_mode == USER_MODE) { 
....................             g_state = ST_SET_PROGRAM; 
....................          } 
....................          //else g_state = ST_SET_TIME_STER_DRY; 
....................          setpoint = user_setpoint; 
....................          protect = user_protect; 
....................          ster_time = user_ster_time; 
....................          break;*/ 
....................       case ST_SET_PID_KP: 
....................          if (pid_kp > 0) { 
3594:  MOVF   x83,F
3596:  BNZ   359C
3598:  MOVF   x84,F
359A:  BZ    35B6
....................             pid_kp -= 1; 
359C:  MOVLW  01
359E:  SUBWF  x83,F
35A0:  MOVLW  00
35A2:  SUBWFB x84,F
....................             PutPid(1, pid_kp); 
35A4:  MOVLW  01
35A6:  MOVWF  xDE
35A8:  MOVFF  84,E0
35AC:  MOVFF  83,DF
35B0:  CALL   2D5C
....................             Store_Kp(); 
35B4:  RCALL  2EBE
....................          } 
....................          break; 
35B6:  BRA    36FA
....................       case ST_SET_PID_KI: 
....................          if (pid_ki > 0) { 
35B8:  MOVF   x85,F
35BA:  BNZ   35C0
35BC:  MOVF   x86,F
35BE:  BZ    35DA
....................             pid_ki -= 1; 
35C0:  MOVLW  01
35C2:  SUBWF  x85,F
35C4:  MOVLW  00
35C6:  SUBWFB x86,F
....................             PutPid(1, pid_ki); 
35C8:  MOVLW  01
35CA:  MOVWF  xDE
35CC:  MOVFF  86,E0
35D0:  MOVFF  85,DF
35D4:  CALL   2D5C
....................             Store_Ki(); 
35D8:  RCALL  2F80
....................          } 
....................          break; 
35DA:  BRA    36FA
....................       case ST_SET_PID_KD: 
....................          if (pid_kd > 0) { 
35DC:  MOVF   x87,F
35DE:  BNZ   35E4
35E0:  MOVF   x88,F
35E2:  BZ    35FE
....................             pid_kd -= 1; 
35E4:  MOVLW  01
35E6:  SUBWF  x87,F
35E8:  MOVLW  00
35EA:  SUBWFB x88,F
....................             PutPid(1, pid_kd); 
35EC:  MOVLW  01
35EE:  MOVWF  xDE
35F0:  MOVFF  88,E0
35F4:  MOVFF  87,DF
35F8:  CALL   2D5C
....................             Store_Kd(); 
35FC:  RCALL  3042
....................          } 
....................          break; 
35FE:  BRA    36FA
....................       case ST_SET_OFFSET: 
....................          if (temp_offset > -OFFSET_TEMP_RANGE) { 
3600:  BTFSS  xA6.7
3602:  BRA    3614
3604:  MOVF   xA6,W
3606:  SUBLW  F3
3608:  BC    362C
360A:  XORLW  FF
360C:  BNZ   3614
360E:  MOVF   xA5,W
3610:  SUBLW  48
3612:  BC    362C
....................             temp_offset -= 10; 
3614:  MOVLW  0A
3616:  SUBWF  xA5,F
3618:  MOVLW  00
361A:  SUBWFB xA6,F
....................             PutOffset(1, temp_offset); 
361C:  MOVLW  01
361E:  MOVWF  xDE
3620:  MOVFF  A6,E0
3624:  MOVFF  A5,DF
3628:  RCALL  3180
....................             Store_Offset(); 
362A:  RCALL  34A4
....................          } 
....................          break; 
362C:  BRA    36FA
....................       case ST_SET_DAY_OF_WEEK: 
....................          if(day > SUNDAY) 
362E:  MOVF   50,W
3630:  SUBLW  01
3632:  BC    363A
....................             day -= 1; 
3634:  MOVLW  01
3636:  SUBWF  50,F
3638:  BRA    363E
....................          else 
....................             day = SATURDAY; 
363A:  MOVLW  07
363C:  MOVWF  50
....................          write_ds1307(3, day); 
363E:  MOVLW  03
3640:  MOVWF  xDE
3642:  MOVFF  50,DF
3646:  CALL   129C
....................          break; 
364A:  BRA    36FA
....................       case ST_SET_HOUR: 
....................          d1 = hour / 16; 
364C:  SWAPF  4F,W
364E:  MOVWF  xDC
3650:  MOVLW  0F
3652:  ANDWF  xDC,F
....................          d0 = hour & 0x0F; 
3654:  MOVF   4F,W
3656:  ANDLW  0F
3658:  MOVWF  xDD
....................          if (d0 > 0) 
365A:  MOVF   xDD,F
365C:  BZ    3664
....................             d0 -= 1; 
365E:  MOVLW  01
3660:  SUBWF  xDD,F
3662:  BRA    3676
....................          else { 
....................             if (d1 > 0) { 
3664:  MOVF   xDC,F
3666:  BZ    3672
....................                   d0 = 9; 
3668:  MOVLW  09
366A:  MOVWF  xDD
....................                   d1 -= 1; 
366C:  MOVLW  01
366E:  SUBWF  xDC,F
....................             }    
3670:  BRA    3676
....................             else { 
....................                   d0 = 0; 
3672:  CLRF   xDD
....................                   d1 = 0; 
3674:  CLRF   xDC
....................             } 
....................          } 
....................          hour = d1 * 16 + d0; 
3676:  MOVF   xDC,W
3678:  MULLW  10
367A:  MOVF   FF3,W
367C:  ADDWF  xDD,W
367E:  MOVWF  4F
....................          write_ds1307(2, hour); 
3680:  MOVLW  02
3682:  MOVWF  xDE
3684:  MOVFF  4F,DF
3688:  CALL   129C
....................          break; 
368C:  BRA    36FA
....................       case ST_SET_MINUTE: 
....................          d1 = min / 16; 
368E:  SWAPF  4E,W
3690:  MOVWF  xDC
3692:  MOVLW  0F
3694:  ANDWF  xDC,F
....................          d0 = min & 0x0F; 
3696:  MOVF   4E,W
3698:  ANDLW  0F
369A:  MOVWF  xDD
....................          if (d0 > 0) 
369C:  MOVF   xDD,F
369E:  BZ    36A6
....................             d0 -= 1; 
36A0:  MOVLW  01
36A2:  SUBWF  xDD,F
36A4:  BRA    36B8
....................          else { 
....................             d0 = 9; 
36A6:  MOVLW  09
36A8:  MOVWF  xDD
....................             if (d1 > 0) 
36AA:  MOVF   xDC,F
36AC:  BZ    36B4
....................                d1 -= 1; 
36AE:  MOVLW  01
36B0:  SUBWF  xDC,F
36B2:  BRA    36B8
....................             else 
....................                d1 = 5; 
36B4:  MOVLW  05
36B6:  MOVWF  xDC
....................          } 
....................          min = d1 * 16 + d0; 
36B8:  MOVF   xDC,W
36BA:  MULLW  10
36BC:  MOVF   FF3,W
36BE:  ADDWF  xDD,W
36C0:  MOVWF  4E
....................          write_ds1307(1, min); 
36C2:  MOVLW  01
36C4:  MOVWF  xDE
36C6:  MOVFF  4E,DF
36CA:  CALL   129C
....................          break; 
36CE:  BRA    36FA
....................       case ST_SET_TIME_DELAY: 
....................          if(wait_day > 0) 
36D0:  MOVF   5E,F
36D2:  BZ    36DA
....................             wait_day -= 1; 
36D4:  MOVLW  01
36D6:  SUBWF  5E,F
36D8:  BRA    36DC
....................          else { 
....................             wait_day = 0; 
36DA:  CLRF   5E
....................          } 
....................          write_DS1307(0x1D,wait_day); 
36DC:  MOVLW  1D
36DE:  MOVWF  xDE
36E0:  MOVFF  5E,DF
36E4:  CALL   129C
....................          break; 
36E8:  BRA    36FA
....................       default: 
....................       if(g_set == SET_NONE) 
36EA:  MOVF   3B,F
36EC:  BNZ   36FA
....................       { 
....................          if (fan_speed >= (FAN_SPEED_MIN+1)) { 
36EE:  MOVF   x8B,W
36F0:  SUBLW  05
36F2:  BC    36FA
....................             fan_speed -= 1; 
36F4:  MOVLW  01
36F6:  SUBWF  x8B,F
....................             Store_FanSpeed(); 
36F8:  RCALL  3502
....................          } 
....................       } 
....................          break; 
....................     } 
36FA:  GOTO   3B86 (RETURN)
.................... } 
.................... void Process_Touch_Up(void) //Up 
.................... { 
....................    int8 d1, d0; 
....................    switch(g_state){ 
*
3726:  MOVF   38,W
3728:  XORLW  02
372A:  BZ    375E
372C:  XORLW  0A
372E:  BZ    3776
3730:  XORLW  03
3732:  BZ    377C
3734:  XORLW  1E
3736:  BZ    3786
3738:  XORLW  03
373A:  BZ    37AE
373C:  XORLW  01
373E:  BZ    37D6
3740:  XORLW  0F
3742:  BZ    37FC
3744:  XORLW  1B
3746:  BTFSC  FD8.2
3748:  BRA    3828
374A:  XORLW  07
374C:  BTFSC  FD8.2
374E:  BRA    3846
3750:  XORLW  01
3752:  BTFSC  FD8.2
3754:  BRA    389C
3756:  XORLW  0C
3758:  BTFSC  FD8.2
375A:  BRA    38F2
375C:  BRA    390E
....................       case ST_SET_PROGRAM: 
....................          switch (g_set) { 
375E:  MOVF   3B,W
3760:  XORLW  01
3762:  BZ    376A
3764:  XORLW  03
3766:  BZ    3770
3768:  BRA    3774
....................             case SET_PROGRAM_USER: 
....................                g_set = SET_TIME_REAL_TIME_CLOCK; 
376A:  MOVLW  02
376C:  MOVWF  3B
....................                break; 
376E:  BRA    3774
....................             case SET_TIME_REAL_TIME_CLOCK: 
....................                g_set = SET_TIME_CLOCK; 
3770:  MOVLW  03
3772:  MOVWF  3B
....................                break; 
....................          } 
....................          break; 
3774:  BRA    391E
....................       /*case ST_SET_SETPOINT: 
....................          hold_hour = user_ster_time/60; 
....................          hold_min = user_ster_time%60; 
....................  
....................          setpoint_H = user_setpoint >> 8; 
....................          setpoint_L = user_setpoint & 0xFF; 
....................          protect_H = user_protect >> 8; 
....................          protect_L = user_protect & 0xFF; 
....................  
....................          Check_Data_Previous(); 
....................          switch (g_mode) { 
....................             case USER_MODE: 
....................                Store_WaitTime(); 
....................                Store_HoldTime(); 
....................                Store_Setpoint(); 
....................                Store_Protect(); 
....................                break; 
....................             /*case PROGRAM1: 
....................                a = 0x09; 
....................                b = 0x0A; 
....................                e = 0x0D; 
....................                f = 0x0E; 
....................                g = 0x12; 
....................                h = 0x13; 
....................                k = 0x50; 
....................                break; 
....................             case PROGRAM2: 
....................                a = 0x16; 
....................                b = 0x17; 
....................                e = 0x1A; 
....................                f = 0x1F; 
....................                g = 0x22; 
....................                h = 0x23; 
....................                k = 0x51; 
....................                break; 
....................             case PROGRAM3: 
....................                a = 0x07; 
....................                b = 0x08; 
....................                e = 0x30; 
....................                f = 0x31; 
....................                g = 0x32; 
....................                h = 0x33; 
....................                k = 0x52; 
....................                break; 
....................             case PROGRAM4: 
....................                a = 0x0B; 
....................                b = 0x0C; 
....................                e = 0x34; 
....................                f = 0x35; 
....................                g = 0x36; 
....................                h = 0x37;  
....................                k = 0x53; 
....................                break; 
....................             case PROGRAM5: 
....................                a = 0x10; 
....................                b = 0x11; 
....................                e = 0x38; 
....................                f = 0x39; 
....................                g = 0x3A; 
....................                h = 0x3B; 
....................                k = 0x54; 
....................                break; 
....................             case PROGRAM6: 
....................                a = 0x14; 
....................                b = 0x15; 
....................                e = 0x3C; 
....................                f = 0x3D; 
....................                g = 0x3E; 
....................                h = 0x3F;  
....................                k = 0x55; 
....................                break; 
....................             case PROGRAM7: 
....................                a = 0x18; 
....................                b = 0x19; 
....................                e = 0x40; 
....................                f = 0x41; 
....................                g = 0x42; 
....................                h = 0x43;  
....................                k = 0x56; 
....................                break; 
....................             case PROGRAM8: 
....................                a = 0x20; 
....................                b = 0x21; 
....................                e = 0x44; 
....................                f = 0x45; 
....................                g = 0x46; 
....................                h = 0x47;  
....................                k = 0x58; 
....................                break; 
....................             case PROGRAM9: 
....................                a = 0x24; 
....................                b = 0x25; 
....................                e = 0x48; 
....................                f = 0x49; 
....................                g = 0x4A; 
....................                h = 0x4B;  
....................                k = 0x58; 
....................                break; 
....................             case PROGRAM10: 
....................                a = 0x28; 
....................                b = 0x29; 
....................                e = 0x4C; 
....................                f = 0x4D; 
....................                g = 0x4E; 
....................                h = 0x4F;  
....................                k = 0x59; 
....................                break; 
....................          } 
....................          /*if (g_mode >= PROGRAM1 && g_mode <= PROGRAM10) { 
....................             write_eeprom(a, hold_hour); 
....................             write_eeprom(b, hold_min); 
....................             write_eeprom(e, setpoint_H); 
....................             write_eeprom(f, setpoint_L); 
....................             write_eeprom(g, protect_H); 
....................             write_eeprom(h, protect_L); 
....................             write_eeprom(k, g_active_mode); 
....................          } 
....................          if (g_mode == USER_MODE) { 
....................             g_state = ST_SET_PROGRAM; 
....................          } 
....................          //else g_state = ST_SET_TIME_STER_DRY; 
....................          setpoint = user_setpoint; 
....................          protect = user_protect; 
....................          ster_time = user_ster_time; 
....................          break;*/ 
....................       case ST_SET_PROTECT: 
....................          g_state = ST_SET_SETPOINT; 
3776:  MOVLW  07
3778:  MOVWF  38
....................          break; 
377A:  BRA    391E
....................       /*case ST_DIS_TIME_DAY_HOUR: 
....................          g_state = ST_DIS_TIME_HOUR_MIN; 
....................          Led_Dot_Off(); 
....................          break; 
....................       case ST_DIS_TIME_HOUR_MIN: 
....................          g_state = ST_DIS_TIME_DAY_HOUR; 
....................          break;*/ 
....................       case ST_SET_HOLD_TIME: 
....................          g_state = ST_SET_PROTECT; 
377C:  MOVLW  08
377E:  MOVWF  38
....................          Led_Dot_Off(); 
3780:  CALL   2730
....................          break; 
3784:  BRA    391E
....................       case ST_SET_PID_KP: 
....................          if (pid_kp < (100)) { 
3786:  MOVF   x84,F
3788:  BNZ   37AC
378A:  MOVF   x83,W
378C:  SUBLW  63
378E:  BNC   37AC
....................             pid_kp += 1; 
3790:  MOVLW  01
3792:  ADDWF  x83,F
3794:  MOVLW  00
3796:  ADDWFC x84,F
....................             PutPid(1, pid_kp); 
3798:  MOVLW  01
379A:  MOVWF  xDE
379C:  MOVFF  84,E0
37A0:  MOVFF  83,DF
37A4:  CALL   2D5C
....................             Store_Kp(); 
37A8:  CALL   2EBE
....................          } 
....................          break; 
37AC:  BRA    391E
....................       case ST_SET_PID_KI: 
....................          if (pid_ki < (100)) { 
37AE:  MOVF   x86,F
37B0:  BNZ   37D4
37B2:  MOVF   x85,W
37B4:  SUBLW  63
37B6:  BNC   37D4
....................             pid_ki += 1; 
37B8:  MOVLW  01
37BA:  ADDWF  x85,F
37BC:  MOVLW  00
37BE:  ADDWFC x86,F
....................             PutPid(1, pid_ki); 
37C0:  MOVLW  01
37C2:  MOVWF  xDE
37C4:  MOVFF  86,E0
37C8:  MOVFF  85,DF
37CC:  CALL   2D5C
....................             Store_Ki(); 
37D0:  CALL   2F80
....................          } 
....................          break; 
37D4:  BRA    391E
....................       case ST_SET_PID_KD: 
....................          if (pid_kd < (100)) { 
37D6:  MOVF   x88,F
37D8:  BNZ   37FA
37DA:  MOVF   x87,W
37DC:  SUBLW  63
37DE:  BNC   37FA
....................             pid_kd += 1; 
37E0:  MOVLW  01
37E2:  ADDWF  x87,F
37E4:  MOVLW  00
37E6:  ADDWFC x88,F
....................             PutPid(1, pid_kd); 
37E8:  MOVLW  01
37EA:  MOVWF  xDE
37EC:  MOVFF  88,E0
37F0:  MOVFF  87,DF
37F4:  CALL   2D5C
....................             Store_Kd(); 
37F8:  RCALL  3042
....................          } 
....................          break; 
37FA:  BRA    391E
....................       case ST_SET_OFFSET: 
....................          if (temp_offset < OFFSET_TEMP_RANGE) { 
37FC:  BTFSC  xA6.7
37FE:  BRA    380E
3800:  MOVF   xA6,W
3802:  SUBLW  0B
3804:  BNC   3826
3806:  BNZ   380E
3808:  MOVF   xA5,W
380A:  SUBLW  B7
380C:  BNC   3826
....................             temp_offset += 10; 
380E:  MOVLW  0A
3810:  ADDWF  xA5,F
3812:  MOVLW  00
3814:  ADDWFC xA6,F
....................             PutOffset(1, temp_offset); 
3816:  MOVLW  01
3818:  MOVWF  xDE
381A:  MOVFF  A6,E0
381E:  MOVFF  A5,DF
3822:  RCALL  3180
....................             Store_Offset(); 
3824:  RCALL  34A4
....................          } 
....................          break; 
3826:  BRA    391E
....................       case ST_SET_DAY_OF_WEEK: 
....................          if(day < SATURDAY) 
3828:  MOVF   50,W
382A:  SUBLW  06
382C:  BNC   3834
....................             day += 1; 
382E:  MOVLW  01
3830:  ADDWF  50,F
3832:  BRA    3838
....................          else 
....................             day = SUNDAY; 
3834:  MOVLW  01
3836:  MOVWF  50
....................          write_ds1307(3, day); 
3838:  MOVLW  03
383A:  MOVWF  xDE
383C:  MOVFF  50,DF
3840:  CALL   129C
....................          break; 
3844:  BRA    391E
....................       case ST_SET_HOUR: 
....................          d1 = hour / 16; 
3846:  SWAPF  4F,W
3848:  MOVWF  xDC
384A:  MOVLW  0F
384C:  ANDWF  xDC,F
....................          d0 = hour & 0x0F; 
384E:  MOVF   4F,W
3850:  ANDLW  0F
3852:  MOVWF  xDD
....................          if((d1*10+d0) < 24) { 
3854:  MOVF   xDC,W
3856:  MULLW  0A
3858:  MOVF   FF3,W
385A:  ADDWF  xDD,W
385C:  SUBLW  17
385E:  BNC   388C
....................             d0 += 1; 
3860:  MOVLW  01
3862:  ADDWF  xDD,F
....................             d1 += d0/10; 
3864:  MOVFF  DD,E5
3868:  MOVLW  0A
386A:  MOVWF  xE6
386C:  RCALL  36FE
386E:  MOVF   01,W
3870:  ADDWF  xDC,F
....................             d0 %= 10; 
3872:  MOVFF  DD,E5
3876:  MOVLW  0A
3878:  MOVWF  xE6
387A:  RCALL  36FE
387C:  MOVFF  00,DD
....................             hour = d1*16 + d0; 
3880:  MOVF   xDC,W
3882:  MULLW  10
3884:  MOVF   FF3,W
3886:  ADDWF  xDD,W
3888:  MOVWF  4F
....................          } else { 
388A:  BRA    388E
....................             hour = 0; 
388C:  CLRF   4F
....................          } 
....................          write_ds1307(2, hour); 
388E:  MOVLW  02
3890:  MOVWF  xDE
3892:  MOVFF  4F,DF
3896:  CALL   129C
....................          break; 
389A:  BRA    391E
....................       case ST_SET_MINUTE: 
....................          d1 = min / 16; 
389C:  SWAPF  4E,W
389E:  MOVWF  xDC
38A0:  MOVLW  0F
38A2:  ANDWF  xDC,F
....................          d0 = min & 0x0F; 
38A4:  MOVF   4E,W
38A6:  ANDLW  0F
38A8:  MOVWF  xDD
....................          if((d1*10+d0) < 59) { 
38AA:  MOVF   xDC,W
38AC:  MULLW  0A
38AE:  MOVF   FF3,W
38B0:  ADDWF  xDD,W
38B2:  SUBLW  3A
38B4:  BNC   38E2
....................             d0 += 1; 
38B6:  MOVLW  01
38B8:  ADDWF  xDD,F
....................             d1 += d0/10; 
38BA:  MOVFF  DD,E5
38BE:  MOVLW  0A
38C0:  MOVWF  xE6
38C2:  RCALL  36FE
38C4:  MOVF   01,W
38C6:  ADDWF  xDC,F
....................             d0 %= 10; 
38C8:  MOVFF  DD,E5
38CC:  MOVLW  0A
38CE:  MOVWF  xE6
38D0:  RCALL  36FE
38D2:  MOVFF  00,DD
....................             min = d1*16 + d0; 
38D6:  MOVF   xDC,W
38D8:  MULLW  10
38DA:  MOVF   FF3,W
38DC:  ADDWF  xDD,W
38DE:  MOVWF  4E
....................          } else { 
38E0:  BRA    38E4
....................             min = 0; 
38E2:  CLRF   4E
....................          } 
....................          write_ds1307(1, min); 
38E4:  MOVLW  01
38E6:  MOVWF  xDE
38E8:  MOVFF  4E,DF
38EC:  CALL   129C
....................          break; 
38F0:  BRA    391E
....................       case ST_SET_TIME_DELAY: 
....................          if(wait_day < 7) 
38F2:  MOVF   5E,W
38F4:  SUBLW  06
38F6:  BNC   38FE
....................             wait_day += 1; 
38F8:  MOVLW  01
38FA:  ADDWF  5E,F
38FC:  BRA    3900
....................          else { 
....................                wait_day = 0; 
38FE:  CLRF   5E
....................          } 
....................          write_DS1307(0x1D,wait_day); 
3900:  MOVLW  1D
3902:  MOVWF  xDE
3904:  MOVFF  5E,DF
3908:  CALL   129C
....................          break; 
390C:  BRA    391E
....................       default: 
....................       if(g_set == SET_NONE) 
390E:  MOVF   3B,F
3910:  BNZ   391E
....................       { 
....................          if (fan_speed <= (FAN_SPEED_MAX-1)) { 
3912:  MOVF   x8B,W
3914:  SUBLW  09
3916:  BNC   391E
....................             fan_speed += 1; 
3918:  MOVLW  01
391A:  ADDWF  x8B,F
....................             Store_FanSpeed(); 
391C:  RCALL  3502
....................          } 
....................       } 
....................          break; 
....................    } 
391E:  GOTO   3B86 (RETURN)
.................... } 
....................  
.................... //------------------------------------------------------------------------------------------------------------- 
.................... void Process_Touch_d_small() 
.................... { 
....................    switch(g_state) { 
*
39FC:  MOVF   38,W
39FE:  XORLW  01
3A00:  BZ    3A0C
3A02:  XORLW  03
3A04:  BZ    3A16
3A06:  XORLW  13
3A08:  BZ    3A1E
3A0A:  BRA    3A2C
....................       case ST_IDLE: 
....................          g_state = ST_SET_PROGRAM; 
3A0C:  MOVLW  02
3A0E:  MOVWF  38
....................          g_set = SET_PROGRAM_USER; 
3A10:  MOVLW  01
3A12:  MOVWF  3B
....................          break; 
3A14:  BRA    3A2C
....................       case ST_SET_PROGRAM: 
....................          g_state = ST_IDLE; 
3A16:  MOVLW  01
3A18:  MOVWF  38
....................          g_set = SET_NONE; 
3A1A:  CLRF   3B
....................          break; 
3A1C:  BRA    3A2C
....................       case ST_SET_PASS: 
....................          check_password = password; 
3A1E:  MOVFF  62,64
3A22:  MOVFF  61,63
....................          Store_Password(); 
3A26:  BRA    399C
....................          password = 0; 
3A28:  CLRF   62
3A2A:  CLRF   61
....................          break; 
....................    } 
3A2C:  GOTO   3B86 (RETURN)
.................... } 
....................  
.................... void Process_Touch_a_small() 
.................... { 
....................    if (g_state == ST_IDLE) { 
*
3922:  DECFSZ 38,W
3924:  BRA    3944
....................       beep(BEEP_TIME); 
3926:  CLRF   xDD
3928:  MOVLW  03
392A:  MOVWF  xDC
392C:  CALL   22EA
....................       g_state = ST_SET_OFFSET; 
3930:  MOVLW  18
3932:  MOVWF  38
....................       PutOffset(1, temp_offset); 
3934:  MOVLW  01
3936:  MOVWF  xDE
3938:  MOVFF  A6,E0
393C:  MOVFF  A5,DF
3940:  RCALL  3180
....................    } else if (g_state == ST_SET_OFFSET){ 
3942:  BRA    3958
3944:  MOVF   38,W
3946:  SUBLW  18
3948:  BNZ   3958
....................       beep(BEEP_TIME); 
394A:  CLRF   xDD
394C:  MOVLW  03
394E:  MOVWF  xDC
3950:  CALL   22EA
....................       g_state = ST_IDLE; 
3954:  MOVLW  01
3956:  MOVWF  38
....................    } 
3958:  GOTO   3B86 (RETURN)
.................... } 
....................  
.................... void Process_Touch_b_small() //Key 1 
.................... { 
....................    if (g_state == ST_IDLE) { 
395C:  DECFSZ 38,W
395E:  BRA    3984
....................       Load_PID(); 
3960:  CALL   1768
....................       beep(BEEP_TIME); 
3964:  CLRF   xDD
3966:  MOVLW  03
3968:  MOVWF  xDC
396A:  CALL   22EA
....................       g_state = ST_SET_PID_KD; 
396E:  MOVLW  17
3970:  MOVWF  38
....................       PutPid(1, pid_kd); 
3972:  MOVLW  01
3974:  MOVWF  xDE
3976:  MOVFF  88,E0
397A:  MOVFF  87,DF
397E:  CALL   2D5C
....................    } else if (g_state == ST_SET_PID_KD){ 
3982:  BRA    3998
3984:  MOVF   38,W
3986:  SUBLW  17
3988:  BNZ   3998
....................       beep(BEEP_TIME); 
398A:  CLRF   xDD
398C:  MOVLW  03
398E:  MOVWF  xDC
3990:  CALL   22EA
....................       g_state = ST_IDLE; 
3994:  MOVLW  01
3996:  MOVWF  38
....................    } 
3998:  GOTO   3B86 (RETURN)
.................... } 
....................  
.................... void Process_Touch_e_small() //Key 2 
.................... { 
....................    if (g_state == ST_IDLE) { 
*
3A30:  DECFSZ 38,W
3A32:  BRA    3A58
....................       beep(BEEP_TIME); 
3A34:  CLRF   xDD
3A36:  MOVLW  03
3A38:  MOVWF  xDC
3A3A:  CALL   22EA
....................       Load_PID(); 
3A3E:  CALL   1768
....................       g_state = ST_SET_PID_KI; 
3A42:  MOVLW  16
3A44:  MOVWF  38
....................       PutPid(1, pid_ki); 
3A46:  MOVLW  01
3A48:  MOVWF  xDE
3A4A:  MOVFF  86,E0
3A4E:  MOVFF  85,DF
3A52:  CALL   2D5C
....................    } else if (g_state == ST_SET_PID_KI){ 
3A56:  BRA    3A6C
3A58:  MOVF   38,W
3A5A:  SUBLW  16
3A5C:  BNZ   3A6C
....................       beep(BEEP_TIME); 
3A5E:  CLRF   xDD
3A60:  MOVLW  03
3A62:  MOVWF  xDC
3A64:  CALL   22EA
....................       g_state = ST_IDLE; 
3A68:  MOVLW  01
3A6A:  MOVWF  38
....................    } 
3A6C:  GOTO   3B86 (RETURN)
.................... } 
....................  
.................... void Process_Touch_f_small() {  //Key 3 
....................    if (g_state == ST_IDLE) { 
3A70:  DECFSZ 38,W
3A72:  BRA    3A8E
....................       Load_PID(); 
3A74:  CALL   1768
....................       g_state = ST_SET_PID_KP; 
3A78:  MOVLW  15
3A7A:  MOVWF  38
....................       PutPid(1, pid_kp); 
3A7C:  MOVLW  01
3A7E:  MOVWF  xDE
3A80:  MOVFF  84,E0
3A84:  MOVFF  83,DF
3A88:  CALL   2D5C
....................    } else if (g_state == ST_SET_PID_KP) { 
3A8C:  BRA    3A98
3A8E:  MOVF   38,W
3A90:  SUBLW  15
3A92:  BNZ   3A98
....................       g_state = ST_IDLE; 
3A94:  MOVLW  01
3A96:  MOVWF  38
....................    } 
3A98:  GOTO   3B86 (RETURN)
.................... } 
....................  
.................... void Process_Touch_h_Small() { 
....................    beep(BEEP_TIME); 
3A9C:  CLRF   xDD
3A9E:  MOVLW  03
3AA0:  MOVWF  xDC
3AA2:  CALL   22EA
....................    switch (g_state) { 
3AA6:  MOVF   38,W
3AA8:  XORLW  01
3AAA:  BZ    3ABA
3AAC:  XORLW  10
3AAE:  BZ    3AC4
3AB0:  XORLW  03
3AB2:  BZ    3AC4
3AB4:  XORLW  06
3AB6:  BZ    3AC4
3AB8:  BRA    3ACC
....................       case ST_IDLE: 
....................          Led_Prog_Off(); 
3ABA:  CALL   1962
....................          g_state = ST_SET_PASS; 
3ABE:  MOVLW  11
3AC0:  MOVWF  38
....................          break; 
3AC2:  BRA    3ACC
....................       case ST_SET_PASS: 
....................       case ST_SAVE_PASS: 
....................       case ST_SET_SERI: 
....................       //case ST_SET_TIME_STER_DRY: 
....................          password = 0; 
3AC4:  CLRF   62
3AC6:  CLRF   61
....................          g_state = ST_IDLE; 
3AC8:  MOVLW  01
3ACA:  MOVWF  38
....................          break; 
....................    } 
3ACC:  GOTO   3B86 (RETURN)
.................... } 
.................... // Setup for programs 
.................... void Process_Setup(void) { 
....................    switch (g_state) { 
*
2336:  MOVLW  07
2338:  SUBWF  38,W
233A:  ADDLW  F2
233C:  BTFSC  FD8.0
233E:  BRA    26BC
2340:  ADDLW  0E
2342:  GOTO   26BE
....................       case ST_SET_SETPOINT: 
....................          if (setpoint <= 2500) 
2346:  MOVF   66,W
2348:  SUBLW  09
234A:  BNC   238C
234C:  BNZ   2354
234E:  MOVF   65,W
2350:  SUBLW  C4
2352:  BNC   238C
....................          setpoint = setpoint*10+100*i; 
2354:  MOVFF  66,E1
2358:  MOVFF  65,E0
235C:  CLRF   xE3
235E:  MOVLW  0A
2360:  MOVWF  xE2
2362:  CALL   15D0
2366:  MOVFF  02,DD
236A:  MOVFF  01,DC
236E:  CLRF   xE1
2370:  MOVLW  64
2372:  MOVWF  xE0
2374:  MOVFF  5B,E3
2378:  MOVFF  5A,E2
237C:  CALL   15D0
2380:  MOVF   01,W
2382:  ADDWF  xDC,W
2384:  MOVWF  65
2386:  MOVF   02,W
2388:  ADDWFC xDD,W
238A:  MOVWF  66
....................          user_setpoint = setpoint; 
238C:  MOVFF  66,53
2390:  MOVFF  65,52
....................          break; 
2394:  BRA    26BC
....................       case ST_SET_PROTECT: 
....................          if (protect <= 3100) 
2396:  MOVF   68,W
2398:  SUBLW  0C
239A:  BNC   23DC
239C:  BNZ   23A4
239E:  MOVF   67,W
23A0:  SUBLW  1C
23A2:  BNC   23DC
....................             protect = protect*10+100*i; 
23A4:  MOVFF  68,E1
23A8:  MOVFF  67,E0
23AC:  CLRF   xE3
23AE:  MOVLW  0A
23B0:  MOVWF  xE2
23B2:  CALL   15D0
23B6:  MOVFF  02,DD
23BA:  MOVFF  01,DC
23BE:  CLRF   xE1
23C0:  MOVLW  64
23C2:  MOVWF  xE0
23C4:  MOVFF  5B,E3
23C8:  MOVFF  5A,E2
23CC:  CALL   15D0
23D0:  MOVF   01,W
23D2:  ADDWF  xDC,W
23D4:  MOVWF  67
23D6:  MOVF   02,W
23D8:  ADDWFC xDD,W
23DA:  MOVWF  68
....................             user_protect = protect; 
23DC:  MOVFF  68,55
23E0:  MOVFF  67,54
....................          break; 
23E4:  BRA    26BC
....................       case ST_SET_WAIT_TIME: 
....................          if(1 == hour_min_flag) { 
23E6:  DECFSZ xBE,W
23E8:  BRA    23FC
....................             if(wait_hour < 24) 
23EA:  MOVF   5C,W
23EC:  SUBLW  17
23EE:  BNC   23FA
....................                wait_hour = wait_hour*10 + i; 
23F0:  MOVF   5C,W
23F2:  MULLW  0A
23F4:  MOVF   FF3,W
23F6:  ADDWF  5A,W
23F8:  MOVWF  5C
....................          } else { 
23FA:  BRA    240C
....................             if(wait_min < 60) 
23FC:  MOVF   5D,W
23FE:  SUBLW  3B
2400:  BNC   240C
....................                wait_min = wait_min*10 + i; 
2402:  MOVF   5D,W
2404:  MULLW  0A
2406:  MOVF   FF3,W
2408:  ADDWF  5A,W
240A:  MOVWF  5D
....................          } 
....................          user_delay_time = (int16)wait_hour * 60 + wait_min; 
240C:  CLRF   xDD
240E:  MOVFF  5C,DC
2412:  MOVFF  DD,E1
2416:  MOVFF  5C,E0
241A:  CLRF   xE3
241C:  MOVLW  3C
241E:  MOVWF  xE2
2420:  CALL   15D0
2424:  MOVF   5D,W
2426:  ADDWF  01,W
2428:  MOVWF  56
242A:  MOVLW  00
242C:  ADDWFC 02,W
242E:  MOVWF  57
....................          break; 
2430:  BRA    26BC
....................       /*case ST_SET_TIME_DAY_HOUR: 
....................          if(0 == hour_min_flag) { 
....................             if(hour_ster_time < 24) { 
....................                   hour_ster_time = hour_ster_time * 10 + i; 
....................                } 
....................             if(hour_ster_time >= 24) { 
....................                user_hour_ster_time = hour_ster_time = 0; 
....................             } 
....................             else user_hour_ster_time = hour_ster_time; 
....................             hour_remain_time = user_hour_ster_time; 
....................          } 
....................          if(1 == hour_min_flag) { 
....................             if(day_ster_time < 100) { 
....................                day_ster_time = day_ster_time * 10 + i; 
....................             } 
....................             if(day_ster_time >= 100) { 
....................                user_day_ster_time = day_ster_time = 0; 
....................             } 
....................             else user_day_ster_time = day_ster_time; 
....................             day_remain_time = user_day_ster_time; 
....................          } 
....................          break; 
....................       case ST_SET_TIME_HOUR_MIN: 
....................          if (1 == n) { 
....................             if (0 == hour_min_flag && ster_time < 60) { 
....................                if((ster_time%60) < 100) { 
....................                   ster_time = (ster_time/60)*60 + (ster_time%60)*10+i; 
....................                } 
....................             } 
....................             else { 
....................                ster_time = ster_time*10 + i; 
....................             } 
....................             if (ster_time < 6000) { 
....................                user_ster_time = ster_time; 
....................             } 
....................             else user_ster_time = ster_time = 0; 
....................          } 
....................          else { 
....................             if(1 == hour_min_flag) { 
....................                if(ster_time < 600) 
....................                   ster_time = (ster_time/60)*600+60*i; 
....................             } else { 
....................                if((ster_time%60) < 10) 
....................                   ster_time = (ster_time/60)*60 + (ster_time%60)*10 + i; 
....................             } 
....................             if (ster_time < 6000) { 
....................                user_ster_time = ster_time; 
....................             } 
....................             else user_ster_time = ster_time = 0; 
....................          } 
....................          break;*/ 
....................       case ST_SET_HOLD_TIME: 
....................          if (1 == n) { 
2432:  DECFSZ xCA,W
2434:  BRA    251C
....................             if (0 == hour_min_flag && ster_time < 60) { 
2436:  MOVF   xBE,F
2438:  BNZ   24D8
243A:  MOVF   x82,F
243C:  BNZ   24D8
243E:  MOVF   x81,W
2440:  SUBLW  3B
2442:  BNC   24D8
....................                if((ster_time%60) < 100) { 
2444:  MOVFF  82,E6
2448:  MOVFF  81,E5
244C:  CLRF   xE8
244E:  MOVLW  3C
2450:  MOVWF  xE7
2452:  RCALL  22F4
2454:  MOVFF  00,DC
2458:  MOVFF  03,DD
245C:  MOVF   xDD,F
245E:  BNZ   24D6
2460:  MOVF   xDC,W
2462:  SUBLW  63
2464:  BNC   24D6
....................                   ster_time = (ster_time/60)*60 + (ster_time%60)*10+i; 
2466:  MOVFF  82,E6
246A:  MOVFF  81,E5
246E:  CLRF   xE8
2470:  MOVLW  3C
2472:  MOVWF  xE7
2474:  RCALL  22F4
2476:  MOVFF  02,DD
247A:  MOVFF  01,DC
247E:  MOVFF  02,E1
2482:  MOVFF  01,E0
2486:  CLRF   xE3
2488:  MOVLW  3C
248A:  MOVWF  xE2
248C:  CALL   15D0
2490:  MOVFF  02,DD
2494:  MOVFF  01,DC
2498:  MOVFF  82,E6
249C:  MOVFF  81,E5
24A0:  CLRF   xE8
24A2:  MOVLW  3C
24A4:  MOVWF  xE7
24A6:  RCALL  22F4
24A8:  MOVFF  00,DE
24AC:  MOVFF  03,DF
24B0:  MOVFF  03,E1
24B4:  MOVFF  00,E0
24B8:  CLRF   xE3
24BA:  MOVLW  0A
24BC:  MOVWF  xE2
24BE:  CALL   15D0
24C2:  MOVF   01,W
24C4:  ADDWF  xDC,F
24C6:  MOVF   02,W
24C8:  ADDWFC xDD,F
24CA:  MOVF   5A,W
24CC:  ADDWF  xDC,W
24CE:  MOVWF  x81
24D0:  MOVF   5B,W
24D2:  ADDWFC xDD,W
24D4:  MOVWF  x82
....................                } 
....................             } 
24D6:  BRA    24F6
....................             else { 
....................                ster_time = ster_time*10 + i; 
24D8:  MOVFF  82,E1
24DC:  MOVFF  81,E0
24E0:  CLRF   xE3
24E2:  MOVLW  0A
24E4:  MOVWF  xE2
24E6:  CALL   15D0
24EA:  MOVF   5A,W
24EC:  ADDWF  01,W
24EE:  MOVWF  x81
24F0:  MOVF   5B,W
24F2:  ADDWFC 02,W
24F4:  MOVWF  x82
....................             } 
....................             if (ster_time < 6000) { 
24F6:  MOVF   x82,W
24F8:  SUBLW  17
24FA:  BNC   250E
24FC:  BNZ   2504
24FE:  MOVF   x81,W
2500:  SUBLW  6F
2502:  BNC   250E
....................                user_ster_time = ster_time; 
2504:  MOVFF  82,59
2508:  MOVFF  81,58
....................             } 
250C:  BRA    251A
....................             else user_ster_time = ster_time = 0; 
250E:  CLRF   x82
2510:  CLRF   x81
2512:  MOVFF  82,59
2516:  MOVFF  81,58
....................          } 
251A:  BRA    2638
....................          else { 
....................             if(1 == hour_min_flag) { 
251C:  DECFSZ xBE,W
251E:  BRA    2582
....................                if(ster_time < 600) 
2520:  MOVF   x82,W
2522:  SUBLW  02
2524:  BNC   2580
2526:  BNZ   252E
2528:  MOVF   x81,W
252A:  SUBLW  57
252C:  BNC   2580
....................                   ster_time = (ster_time/60)*600+60*i; 
252E:  MOVFF  82,E6
2532:  MOVFF  81,E5
2536:  CLRF   xE8
2538:  MOVLW  3C
253A:  MOVWF  xE7
253C:  RCALL  22F4
253E:  MOVFF  02,DD
2542:  MOVFF  01,DC
2546:  MOVFF  02,E1
254A:  MOVFF  01,E0
254E:  MOVLW  02
2550:  MOVWF  xE3
2552:  MOVLW  58
2554:  MOVWF  xE2
2556:  CALL   15D0
255A:  MOVFF  02,DD
255E:  MOVFF  01,DC
2562:  CLRF   xE1
2564:  MOVLW  3C
2566:  MOVWF  xE0
2568:  MOVFF  5B,E3
256C:  MOVFF  5A,E2
2570:  CALL   15D0
2574:  MOVF   01,W
2576:  ADDWF  xDC,W
2578:  MOVWF  x81
257A:  MOVF   02,W
257C:  ADDWFC xDD,W
257E:  MOVWF  x82
....................             } else { 
2580:  BRA    2614
....................                if((ster_time%60) < 10) 
2582:  MOVFF  82,E6
2586:  MOVFF  81,E5
258A:  CLRF   xE8
258C:  MOVLW  3C
258E:  MOVWF  xE7
2590:  RCALL  22F4
2592:  MOVFF  00,DC
2596:  MOVFF  03,DD
259A:  MOVF   xDD,F
259C:  BNZ   2614
259E:  MOVF   xDC,W
25A0:  SUBLW  09
25A2:  BNC   2614
....................                   ster_time = (ster_time/60)*60 + (ster_time%60)*10 + i; 
25A4:  MOVFF  82,E6
25A8:  MOVFF  81,E5
25AC:  CLRF   xE8
25AE:  MOVLW  3C
25B0:  MOVWF  xE7
25B2:  RCALL  22F4
25B4:  MOVFF  02,DD
25B8:  MOVFF  01,DC
25BC:  MOVFF  02,E1
25C0:  MOVFF  01,E0
25C4:  CLRF   xE3
25C6:  MOVLW  3C
25C8:  MOVWF  xE2
25CA:  CALL   15D0
25CE:  MOVFF  02,DD
25D2:  MOVFF  01,DC
25D6:  MOVFF  82,E6
25DA:  MOVFF  81,E5
25DE:  CLRF   xE8
25E0:  MOVLW  3C
25E2:  MOVWF  xE7
25E4:  RCALL  22F4
25E6:  MOVFF  00,DE
25EA:  MOVFF  03,DF
25EE:  MOVFF  03,E1
25F2:  MOVFF  00,E0
25F6:  CLRF   xE3
25F8:  MOVLW  0A
25FA:  MOVWF  xE2
25FC:  CALL   15D0
2600:  MOVF   01,W
2602:  ADDWF  xDC,F
2604:  MOVF   02,W
2606:  ADDWFC xDD,F
2608:  MOVF   5A,W
260A:  ADDWF  xDC,W
260C:  MOVWF  x81
260E:  MOVF   5B,W
2610:  ADDWFC xDD,W
2612:  MOVWF  x82
....................             } 
....................             if (ster_time < 6000) { 
2614:  MOVF   x82,W
2616:  SUBLW  17
2618:  BNC   262C
261A:  BNZ   2622
261C:  MOVF   x81,W
261E:  SUBLW  6F
2620:  BNC   262C
....................                user_ster_time = ster_time; 
2622:  MOVFF  82,59
2626:  MOVFF  81,58
....................             } 
262A:  BRA    2638
....................             else user_ster_time = ster_time = 0; 
262C:  CLRF   x82
262E:  CLRF   x81
2630:  MOVFF  82,59
2634:  MOVFF  81,58
....................          } 
....................          break; 
2638:  BRA    26BC
....................       case ST_SET_PASS: 
....................          if (password <= 9999) { 
263A:  MOVF   62,W
263C:  SUBLW  27
263E:  BNC   2666
2640:  BNZ   2648
2642:  MOVF   61,W
2644:  SUBLW  0F
2646:  BNC   2666
....................             password = password*10 + i; 
2648:  MOVFF  62,E1
264C:  MOVFF  61,E0
2650:  CLRF   xE3
2652:  MOVLW  0A
2654:  MOVWF  xE2
2656:  CALL   15D0
265A:  MOVF   5A,W
265C:  ADDWF  01,W
265E:  MOVWF  61
2660:  MOVF   5B,W
2662:  ADDWFC 02,W
2664:  MOVWF  62
....................          } 
....................          if (password > 9999) { 
2666:  MOVF   62,W
2668:  SUBLW  26
266A:  BC    267A
266C:  XORLW  FF
266E:  BNZ   2676
2670:  MOVF   61,W
2672:  SUBLW  0F
2674:  BC    267A
....................             password = 0; 
2676:  CLRF   62
2678:  CLRF   61
....................          } 
....................          break; 
267A:  BRA    26BC
....................       case ST_SET_SERI: 
....................          if (seri <= 9999) { 
267C:  MOVF   x97,W
267E:  SUBLW  27
2680:  BNC   26A8
2682:  BNZ   268A
2684:  MOVF   x96,W
2686:  SUBLW  0F
2688:  BNC   26A8
....................             seri = seri*10 + i; 
268A:  MOVFF  97,E1
268E:  MOVFF  96,E0
2692:  CLRF   xE3
2694:  MOVLW  0A
2696:  MOVWF  xE2
2698:  CALL   15D0
269C:  MOVF   5A,W
269E:  ADDWF  01,W
26A0:  MOVWF  x96
26A2:  MOVF   5B,W
26A4:  ADDWFC 02,W
26A6:  MOVWF  x97
....................          } 
....................          if (seri > 9999) { 
26A8:  MOVF   x97,W
26AA:  SUBLW  26
26AC:  BC    26BC
26AE:  XORLW  FF
26B0:  BNZ   26B8
26B2:  MOVF   x96,W
26B4:  SUBLW  0F
26B6:  BC    26BC
....................             seri = 0; 
26B8:  CLRF   x97
26BA:  CLRF   x96
....................          } 
....................          break; 
....................    } 
26BC:  RETURN 0
.................... } 
....................  
.................... #endif // #define _PROCESS_KEYS_H_ 
....................  
.................... #include "process_leds.h" 
.................... #ifndef _PROCESS_LEDS_H_ 
.................... #define _PROCESS_LEDS_H_ 
....................  
.................... #include "leds.h" 
.................... #ifndef _LEDS_H_ 
.................... #define _LEDS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... #include "globals.h" 
.................... #include "ds1307.h" 
.................... #include "cap1188.h" 
....................  
.................... /* 
....................       4                 7 6 5 4 3 2 1 0 
....................     -----               0 1 0 1 1 1 1 1   0x5F --> 0 
....................    |     |              0 0 0 0 1 0 0 1   0x09 --> 1 
....................  6 |  7  |3             1 0 0 1 1 1 1 0   0x9E --> 2 
....................     -----               1 0 0 1 1 0 1 1   0x9B --> 3 
....................    |     |              1 1 0 0 1 0 0 1   0xC9 --> 4 
....................  2 |     |0             1 1 0 1 0 0 1 1   0xD3 --> 5 
....................     ----- o 5           1 1 0 1 0 1 1 1   0xD7 --> 6 
....................       1                 0 0 0 1 1 0 0 1   0x19 --> 7 
....................                         1 1 0 1 1 1 1 1   0xDF --> 8 
....................                         1 1 0 1 1 0 1 1   0xDB --> 9 
....................                         1 1 0 1 0 1 1 0   0xD6 --> E 
....................                         1 1 0 1 1 1 0 0   0xDC --> P 
....................                         0 1 0 0 0 1 0 0   0x44 --> I 
....................                         1 0 0 0 1 1 1 1   0x8F --> d 
....................                         1 0 0 0 0 1 0 1   0x85 --> n 
....................                         1 1 0 0 1 1 0 1    
.................... */ 
....................  
.................... static unsigned char index; 
....................  
.................... unsigned char Get7Seg(unsigned char key) { 
....................    switch (key) { 
....................       case 0: 
....................          return 0x5F; 
....................       case 1: 
....................          return 0x09; 
....................       case 2: 
....................          return 0x9E; 
....................       case 3: 
....................          return 0x9B; 
....................       case 4: 
....................          return 0xC9; 
....................       case 5: 
....................          return 0xD3; 
....................       case 6: 
....................          return 0xD7; 
....................       case 7: 
....................          return 0x19; 
....................       case 8: 
....................          return 0xDF; 
....................       case 9: 
....................          return 0xDB; 
....................       default: 
....................          return 0x00;   //blank; 
....................    } 
.................... } 
....................  
.................... unsigned char AddPoint(unsigned char key) { 
....................    return key | 0x20; 
.................... } 
....................  
.................... void led_init(void) { 
....................    //Led7[0][0] = Get7Seg(0); Led7[0][1] = Get7Seg(1); Led7[0][2] = Get7Seg(2); Led7[0][3] = Get7Seg(3); 
....................    //Led7[1][0] = Get7Seg(3); Led7[1][1] = Get7Seg(4); Led7[1][2] = Get7Seg(5); Led7[1][3] = Get7Seg(6); 
....................    //Led7[2][0] = Get7Seg(6); Led7[2][1] = Get7Seg(7); Led7[2][2] = Get7Seg(8); Led7[2][3] = Get7Seg(9); 
....................    //Led1[0] = 0xA5; Led1[1] = 0xA5; Led1[2] = 0xA5; 
....................    // Setup realtime clock: 
....................    hour = read_ds1307(2); 
....................    sec = read_ds1307(0); 
....................    if (sec & 0x80) {   // If clock is disabled 
....................       hour = read_ds1307(2); 
....................       hour &= 0xBF;     // Turn on 24 hour mode 
....................       write_ds1307(2, hour); 
....................       write_ds1307(0,sec & 0x7F); // enable oscillator(bit 7 =0) 
....................    } 
.................... } 
....................  
.................... void sclk_out(void) { 
....................    output_low(PIN_A3); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_A3); 
.................... } 
....................  
.................... void strb_out1(void) { 
....................    output_low(PIN_D1); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D1); 
.................... } 
....................  
.................... void strb_out2(void) { 
....................    output_low(PIN_D3); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D3); 
.................... } 
....................  
.................... void Byte_Out_All(int8 data1, int8 data2) { 
....................    char i; 
....................    for(i=0; i<8; i++){ 
....................       output_bit(PIN_D0,shift_left(&data1,1,0)); 
....................       output_bit(PIN_D2,shift_left(&data2,1,0)); 
....................       sclk_out(); 
....................    } 
.................... } 
....................  
.................... void Led_Scan(void){ 
....................    led1[0] &= 0x87; 
....................    switch(index) { 
....................       case 0: 
....................          index = 1; 
....................          led1[0] |= 0x20; 
....................          Byte_Out_All(led7[2][1], led1[0]); 
....................          Byte_Out_All(led7[1][1], led1[1]); 
....................          Byte_Out_All(led7[0][1], led1[2]); 
....................          break; 
....................       case 1: 
....................          index = 2; 
....................          led1[0] |= 0x10; 
....................          Byte_Out_All(led7[2][2], led1[0]); 
....................          Byte_Out_All(led7[1][2], 0xFF); 
....................          Byte_Out_All(led7[0][2], 0xFF); 
....................          break; 
....................       case 2: 
....................          index = 3; 
....................          led1[0] |= 0x08; 
....................          Byte_Out_All(led7[2][3], led1[0]); 
....................          Byte_Out_All(led7[1][3], 0xFF); 
....................          Byte_Out_All(led7[0][3], 0xFF); 
....................          break; 
....................       case 3: 
....................          index = 4; 
....................          led1[0] |= 0x40; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 4: 
....................          index = 5; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 5: 
....................          index = 6; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 6: 
....................          index = 7; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       default: 
....................          index = 0; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          //led1[0] |= 0x40; 
....................          break; 
....................    } 
....................    strb_out1(); 
....................    strb_out2(); 
.................... } 
....................  
.................... void SpeakerOn(void) { 
....................    Led1[0] &= 0x7F; 
.................... } 
....................  
.................... void SpeakerOff(void) { 
....................    spk_on_count = 0; 
....................    Led1[0] |= 0x80; 
.................... } 
....................  
.................... void LedClockOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
.................... } 
....................  
.................... void LedClockOff(void) { 
....................    Led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedSetTempOn(void) 
.................... { 
....................    led1[1] &= 0xFE; 
.................... } 
....................  
.................... void LedSetTempOff(void) { 
....................    Led1[1] |= 0x01; 
.................... } 
....................  
.................... void LedProtectTempOn(void) 
.................... { 
....................    led1[1] &= 0xFD; 
.................... } 
....................  
.................... void LedProtectTempOff(void) { 
....................    Led1[1] |= 0x02; 
.................... } 
....................  
.................... void LedTimeDelayOn(void) 
.................... { 
....................    led1[1] &= 0xFB; 
.................... } 
....................  
.................... void LedTimeDelayOff(void) { 
....................    Led1[1] |= 0x04; 
.................... } 
....................  
.................... void LedTimeSterOn(void) 
.................... { 
....................    led1[1] &= 0xF7; 
.................... } 
....................  
.................... void LedTimeSterOff(void) { 
....................    Led1[1] |= 0x08; 
.................... } 
....................  
.................... //============================================================================== 
....................  
.................... void LedTimeOn(void) 
.................... { 
....................    led1[4] &= 0x7F; 
.................... } 
....................  
.................... void LedTimeOff(void) 
.................... { 
....................    led1[4] |= 0x80; 
.................... } 
....................  
.................... void LedHeaterOn(void) 
.................... { 
....................    led1[3] &= 0xDF; 
.................... } 
....................  
.................... void LedHeaterOff(void) 
.................... { 
....................    led1[3] |= 0x20; 
.................... } 
....................  
.................... void LedAlarmOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
.................... } 
....................  
.................... void LedAlarmOff(void) 
.................... { 
....................    led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedIconOn(void) 
.................... { 
....................    led1[2] &= 0xFD; 
.................... } 
....................  
.................... void LedMaxOn(void) 
.................... { 
....................    led1[2] &= 0xFB; 
.................... } 
.................... void LedMaxOff(void) 
.................... { 
....................    led1[2] |= 0x04; 
.................... } 
....................  
.................... void LedTempOn(void) 
.................... { 
....................    led1[3] &= 0xBF; 
.................... } 
....................  
.................... void LedTempOff(void) 
.................... { 
....................    led1[3] |= 0x40; 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
.................... /*void Led_1CDEF8_Off(void) { 
....................    //Led1 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
....................    //LedCDEF8 off: 
....................    tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x0E; 
....................    cap1188_write_data2(0x74, tmp); 
.................... }*/ 
.................... void Led_Prog_Off(void) { 
....................    //Led 1,2,3,4,5,6,7,8 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x00; 
....................    cap1188_write_data1(0x74, tmp); 
....................    //Led 9,10 off: 
....................    tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xC8; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
....................  
.................... void Led_0_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x01; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_0_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_1_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x02; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
....................  
.................... void Led_1_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_2_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x04; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_2_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_3_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x08; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_3_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_4_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x10; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_4_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xEF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_5_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x20; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_5_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_6_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x40; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_6_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_7_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x80; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_7_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_8_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x01; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_8_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_Dot_On(void)   //void Led_9_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x02; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_Dot_Off(void)  //void Led_9_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_A_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x04; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_A_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x08; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_C_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x10; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_C_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xEF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_D_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x20; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_D_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_E_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x40; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_E_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_F_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x80; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_F_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
....................  
.................... void Beep(unsigned int16 duration) 
.................... { 
....................    spk_on_count = duration; 
.................... } 
.................... /* 
.................... void ClrLed7(unsigned char mon) 
.................... { 
....................    Led7[mon][0] = 0x00;  //clear led 
....................    Led7[mon][1] = 0x00; 
....................    Led7[mon][2] = 0x00; 
....................    Led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... void SetDate(WEEKDAY date) { 
....................    unsigned char tmp; 
....................    tmp = led1[2]; 
....................    if ((SUNDAY <= date)&&(date <= SATURDAY)) { 
....................       tmp |= 0xFE;  // Turn off all leds for date indicator 
....................       switch(date) 
....................       { 
....................          case SUNDAY: 
....................             tmp &= 0xFD; 
....................             break; 
....................          case MONDAY: 
....................             tmp &= 0xFB; 
....................             break; 
....................          case TUESDAY: 
....................             tmp &= 0xF7; 
....................             break; 
....................          case WEDNESDAY: 
....................             tmp &= 0xEF; 
....................             break; 
....................          case THURSDAY: 
....................             tmp &= 0xDF; 
....................             break; 
....................          case FRIDAY: 
....................             tmp &= 0xBF; 
....................             break; 
....................          case SATURDAY: 
....................             tmp &= 0x7F; 
....................             break; 
....................       } 
....................       led1[2] = tmp; 
....................    } else { 
....................       led1[2] |= 0xFE; 
....................    } 
.................... } 
.................... /* 
.................... void PutDay(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
....................    SetDate((WEEKDAY)(day)); 
.................... } 
.................... */ 
.................... void PutDateTime(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
....................    SetDate((WEEKDAY)(day)); 
....................    hour = read_ds1307(2);   // hour 
....................    led7[0][0] = Get7Seg(hour/0x10); 
....................    led7[0][1] = Get7Seg(hour&0x0F); 
....................    min = read_ds1307(1);   // min 
....................    led7[0][2] = Get7Seg(min/0x10); 
....................    led7[0][3] = Get7Seg(min&0x0F); 
.................... } 
.................... /* 
.................... void PutTime(unsigned char mon, unsigned char hour, unsigned char min) 
.................... { 
....................    led7[mon][0] = Get7Seg(hour/0x10); 
....................    led7[mon][1] = AddPoint(Get7Seg(hour&0x0F)); 
....................    led7[mon][2] = Get7Seg(min/0x10); 
....................    led7[mon][3] = Get7Seg(min&0x0F); 
.................... } 
.................... */ 
.................... void PutTime_DayHour(unsigned char mon, unsigned int16 time1, unsigned int16 time2) 
.................... { 
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(time1/10); 
....................       led7[mon][1] = AddPoint(Get7Seg(time1%10)); 
....................       led7[mon][2] = Get7Seg(time2/10); 
....................       led7[mon][3] = AddPoint(Get7Seg(time2%10)); 
.................... } 
....................  
.................... void PutTime_One(unsigned char mon, int16 time) 
.................... { 
....................    int8 hour, min; 
....................    hour = time / 60; 
....................    min = time % 60; 
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(hour/10); 
....................       led7[mon][1] = AddPoint(Get7Seg(hour%10)); 
....................       led7[mon][2] = Get7Seg(min/10); 
....................       led7[mon][3] = Get7Seg(min%10); 
.................... } 
.................... /* 
.................... void PutTime_One_Blank(unsigned char mon) 
.................... { 
....................    led7[mon][0] = 0x00; 
....................    led7[mon][1] = 0x00; 
....................    led7[mon][2] = 0x00; 
....................    led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... /* 
.................... void PutTemp(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    if (temp >= 10000) { 
....................       led7[mon][0] = Get7Seg(temp / 10000); 
....................       led7[mon][1] = Get7Seg((temp%10000) / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((temp%100) / 10); 
....................    } else { 
....................       led7[mon][0] = Get7Seg(temp / 1000); 
....................       led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][2] = Get7Seg((temp%100) / 10); 
....................       led7[mon][3] = Get7Seg(temp % 10);    
....................    } 
.................... } 
.................... */ 
.................... void PutTempSign(unsigned char mon, signed int16 temp) 
.................... { 
....................    if (temp >= 0) { 
....................       if (temp >= 10000) { 
....................          led7[mon][0] = Get7Seg(temp / 10000); 
....................          led7[mon][1] = Get7Seg((temp%10000) / 1000); 
....................          led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................          led7[mon][3] = Get7Seg((temp%100) / 10); 
....................       } else { 
....................          led7[mon][0] = Get7Seg(temp / 1000); 
....................          led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................          led7[mon][2] = Get7Seg((temp%100) / 10); 
....................          //led7[mon][3] = Get7Seg(temp % 10);   
....................          led7[mon][3] = Get7Seg(0);    
....................       } 
....................    } else { 
....................       led7[mon][0] = 0x80; 
....................       led7[mon][1] = Get7Seg(-temp / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((-temp%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((-temp%100) / 10); 
....................    } 
.................... } 
....................  
.................... void PutOffset(unsigned char mon, signed int16 offset) 
.................... { 
....................    if (offset >= 0) { 
....................       led7[mon][0] = Get7Seg(offset / 10000); 
....................       led7[mon][1] = Get7Seg((offset%10000) / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((offset%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((offset%100) / 10); 
....................    } else { 
....................       led7[mon][0] = 0x80; 
....................       led7[mon][1] = Get7Seg(-offset / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((-offset%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((-offset%100) / 10); 
....................    } 
.................... } 
....................  
.................... void PutPid(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    tmp %= 10000; 
....................    led7[mon][0] = Get7Seg(0); 
....................    led7[mon][1] = Get7Seg(temp / 100); 
....................    led7[mon][2] = Get7Seg((temp%100) / 10); 
....................    led7[mon][3] = Get7Seg(temp % 10);    
.................... } 
....................  
.................... void PutSign(unsigned char mon, Sign_CODE sign) 
.................... { 
....................    switch (sign) 
....................    { 
....................       case SIGN_SENSOR_BROKEN: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = Get7Seg(1); 
....................          g_err_code = 1; 
....................          break; 
....................       case SIGN_TEMP_OVERLOAD: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = Get7Seg(2); 
....................          g_err_code = 2; 
....................          break; 
....................       case SIGN_SET_PID_KP: 
....................          led7[mon][0] = 0xDC; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_SET_PID_KI: 
....................          led7[mon][0] = 0x44; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_SET_PID_KD: 
....................          led7[mon][0] = 0x8F; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_PROCESS_END: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0xAF; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x85; 
....................          break; 
....................       case SIGN_T2: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(2); //'2' 
....................          break; 
....................        case SIGN_T3: 
....................          led7[mon][0] = 0x00;       
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(3); //'3' 
....................          break; 
....................        case SIGN_T4: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(4); //'4' 
....................          break; 
....................        case SIGN_T5: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(5); //'5' 
....................          break; 
....................       case SIGN_T6: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(6); //'6' 
....................          break; 
....................        case SIGN_T7: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(7); //'7' 
....................          break; 
....................        case SIGN_CN: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x56;      //'C' 
....................          led7[mon][3] = 0x85;      //'N' 
....................          break; 
....................        case SIGN_ALL: 
....................          led7[mon][0] = 0x00;       
....................          led7[mon][1] = 0xDD;     //'A'   
....................          led7[mon][2] = 0x46;     //'L'   
....................          led7[mon][3] = 0x46;     //'L' 
....................          break; 
....................       case SIGN_BLANK: 
....................          led7[mon][0] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          break; 
....................    } 
....................     
.................... } 
....................  
.................... void SetPhaseIndicator(PROCESS_PHASE phase) 
.................... { 
....................    unsigned char tmp; 
....................    tmp = led1[3]; 
....................    if ((WAITING_PHASE <= phase)&&(phase <= IDLE_PHASE)) { 
....................       tmp |= 0x1F;  // Turn off all leds for phase indicator 
....................       switch(phase) 
....................       { 
....................          case WAITING_PHASE: 
....................             tmp &= 0xFE; 
....................             break; 
....................          case HEAT_RISING_PHASE: 
....................             tmp &= 0xFD; 
....................             break; 
....................          case HEAT_HOLDING_PHASE: 
....................             tmp &= 0xFB; 
....................             break; 
....................          case HEAT_FALLING_PHASE: 
....................             tmp &= 0xF7; 
....................             break; 
....................          case IDLE_PHASE: 
....................             tmp &= 0xEF; 
....................             PutSign(1, SIGN_PROCESS_END); 
....................             break; 
....................       } 
....................       led1[3] = tmp; 
....................    } 
.................... } 
....................  
.................... void SetStateIndicator(STATE state) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[0]; 
....................    tmp2 = led1[1]; 
....................    tmp1 |= 0x03;  //  
....................    tmp2 |= 0xE0; 
....................    if ((ST_IDLE < state)&&(state < TOTAL_NUMBER_OF_STATE)) { 
....................       switch(state) 
....................       { 
....................          case ST_SET_TIMER: 
....................          case ST_SET_WAIT_TIME: 
....................             tmp2 &= 0xBF; 
....................             break; 
....................          case ST_SET_PID_KP: 
....................          case ST_SET_HOLD_TIME: 
....................             tmp2 &= 0x7F; 
....................             break; 
....................          case ST_SET_PID_KI: 
....................          case ST_SET_SETPOINT: 
....................             tmp1 &= 0xFE; 
....................             break; 
....................          case ST_SET_PID_KD: 
....................          case ST_SET_PROTECT: 
....................             tmp1 &= 0xFD; 
....................             break; 
....................       } 
....................       led1[0] = tmp1; 
....................       led1[1] = tmp2; 
....................    } 
.................... } 
....................  
.................... void LedFanOn1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF; 
.................... } 
.................... void LedFanOn2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xDF; 
.................... } 
.................... void LedFanOn3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xBF; 
.................... } 
.................... void LedFanOn4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x7F; 
.................... } 
....................  
.................... void LedFanLow(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF; 
.................... } 
....................  
.................... void LedFanMedium(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF; 
.................... } 
....................  
.................... void LedFanHigh(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x8F; 
.................... } 
....................  
....................  
.................... void LedFanOnAll(void) 
.................... { 
....................    led1[1] &= 0x0F; 
.................... } 
....................  
.................... void LedFanOffAll(void) 
.................... { 
....................    led1[1] |= 0xF0; 
.................... } 
....................  
.................... void LedFan1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF;  //1110 
.................... } 
.................... void LedFan2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF;  //1100 
.................... } 
.................... void LedFan3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xDF;  //1101 
.................... } 
.................... void LedFan4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x9F;  //1001 
.................... } 
.................... void LedFan5(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xBF;  //1011 
.................... } 
.................... void LedFan6(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x3F;  //0011 
.................... } 
.................... void LedFan7(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x7F;  //0111 
.................... } 
.................... void LedFan8(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x6F;  //0110 
.................... } 
....................  
.................... void SetFanSimulator1(void) 
.................... { 
....................    if (fan_rol_count == 0) 
....................    { 
....................       switch(fan_pos) 
....................       { 
....................          case 0: 
....................             LedFan1(); 
....................             fan_pos = 1; 
....................             break; 
....................          case 1: 
....................             LedFan2(); 
....................             fan_pos = 2; 
....................             break; 
....................          case 2: 
....................             LedFan3(); 
....................             fan_pos = 3; 
....................             break; 
....................          case 3: 
....................             LedFan4(); 
....................             fan_pos = 4; 
....................             break; 
....................          case 4: 
....................             LedFan5(); 
....................             fan_pos = 5; 
....................             break; 
....................          case 5: 
....................             LedFan6(); 
....................             fan_pos = 6; 
....................             break; 
....................          case 6: 
....................             LedFan7(); 
....................             fan_pos = 7; 
....................             break; 
....................          default: 
....................             LedFan8(); 
....................             fan_pos = 0; 
....................             break; 
....................       } 
....................       fan_rol_count = 6-fan_speed; 
....................    } 
.................... } 
....................  
.................... void SetFanSimulator(void) 
.................... { 
....................    if (fan_rol_count == 0) 
....................    { 
....................       switch(fan_pos) 
....................       { 
....................          case 0: 
....................             LedFanOn1(); 
....................             fan_pos = 1; 
....................             break; 
....................          case 1: 
....................             LedFanOn2(); 
....................             fan_pos = 2; 
....................             break; 
....................          case 2: 
....................             LedFanOn3(); 
....................             fan_pos = 3; 
....................             break; 
....................          default: 
....................             LedFanOn4(); 
....................             fan_pos = 0; 
....................             break; 
....................       } 
....................       fan_rol_count = 25-fan_speed*2; 
....................    } 
.................... } 
....................  
.................... void SetFanIndicator(unsigned char level) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[1] | 0x1F; 
....................    tmp2 = led1[2] | 0xF8; 
....................    if (level > 0) { 
....................       tmp2 &= 0xF7; 
....................       if (level > 1) { 
....................          tmp2 &= 0xEF; 
....................          if (level > 2) { 
....................             tmp2 &= 0xDF; 
....................             if (level > 3) { 
....................                tmp2 &= 0xBF; 
....................                if (level > 4) { 
....................                   tmp2 &= 0x7F; 
....................                   if (level > 5) { 
....................                      tmp1 &= 0xFE; 
....................                      if (level > 6) { 
....................                         tmp1 &= 0xFD; 
....................                         if (level > 7) { 
....................                            tmp1 &= 0xFB; 
....................                            if (level > 8) { 
....................                               tmp1 &= 0xF7; 
....................                               if (level > 9) { 
....................                                  tmp1 &= 0xEF; 
....................                               }  //9 
....................                            }  //8 
....................                         }  //7 
....................                      }  //6 
....................                   }  //5 
....................                }  //4 
....................             }  //3 
....................          }  //2 
....................       }  //1 
....................    }  //0 
....................    led1[1] = tmp1; 
....................    led1[2] = tmp2; 
.................... } 
....................  
....................  
.................... #endif //#define _LEDS_H_ 
....................  
.................... #include "keys.h" 
.................... #ifndef _KEYS_H_ 
.................... #define _KEYS_H_ 
....................  
.................... #include "globals.h" 
.................... #include "cap1188.h" 
....................  
.................... unsigned char Get_Key_Code(void); 
.................... unsigned char kthit(void); 
....................  
.................... #inline 
.................... void key_init(void) 
.................... { 
....................    cap1188_init(); 
....................    //Only press generate interrupt, release doesn't: 
....................    //cap1188_write_data1(0x44, 0x41); 
....................    //cap1188_write_data2(0x44, 0x41); 
....................    //Press and hold does not generate key repeatedly; only the Up/Down keys are 
....................    // configured for repeatable: 
....................    //cap1188_write_data1(0x28, 0xF0); 
....................    //cap1188_write_data2(0x28, 0x00); 
....................    //Automatic Recalibration: 
....................    cap1188_write_data1(0x20, 0x28); 
....................    cap1188_write_data2(0x20, 0x28); 
....................    //Automatic Recalibration after press and hold for 11200ms: 
....................    //cap1188_write_data1(0x22, 0xF4); 
....................    //cap1188_write_data2(0x22, 0xF4); 
....................    //Touch is linked to LED for Touch 2,3,4,5,6,7 
....................    //cap1188_write_data1(0x72, 0xFC); 
....................    //cap1188_write_data2(0x72, 0x0E); 
....................    //Touch is not linked to any LED 
....................    //cap1188_write_data1(0x72, 0x00); 
....................    //cap1188_write_data2(0x72, 0x00); 
....................    //Touch is not linked to 'CLEAR'(B), 'DOWN'(E), 'UP'(F) 
....................    cap1188_write_data1(0x72, 0x00); 
....................    cap1188_write_data2(0x72, 0xC8); 
....................    //Touch Led duty cycle reduced to 7%-0% 
....................    cap1188_write_data1(0x93, 0x00); 
....................    cap1188_write_data2(0x93, 0x00); 
....................    //Set sensitivity to X64 
....................    //cap1188_write_data1(0x1F, 0x1F); 
....................    //cap1188_write_data2(0x1F, 0x1F); 
....................    key_flag = 0; 
....................    key_state = STATE_KEY_IDLE; 
....................    key_hold_count = 0; 
....................    key_repeat_count = 0; 
....................    key_code = 0xFF; 
....................     
.................... } 
....................  
.................... #inline 
.................... void key_scan(void) { 
....................    cap1188_write_data1(0, 0); 
....................    cap1188_write_data2(0, 0); 
....................    touch_state1 = cap1188_read_data1(3); 
....................    touch_state2 = cap1188_read_data2(3); 
....................    switch(key_state) { 
....................       case STATE_KEY_IDLE: 
....................          if (touch_state1 | touch_state2) { 
....................             key_state = STATE_KEY_PRESSED; 
....................             key_code = Get_Key_Code(); 
....................             key_hold_count = 0; 
....................          } 
....................          break; 
....................       case STATE_KEY_PRESSED: 
....................          if (touch_state1 | touch_state2) { 
....................             key_hold_count += 1; 
....................             if (key_hold_count > KEY_HOLD_THRESHOLD) { 
....................                key_state = STATE_KEY_HOLD; 
....................             } 
....................          } else { 
....................             key_flag = 1; 
....................             key_state = STATE_KEY_IDLE; 
....................             key_hold_count = 0; 
....................             key_repeat_count = 0; 
....................          } 
....................          break; 
....................       case STATE_KEY_HOLD: 
....................          if (touch_state1 | touch_state2) { 
....................             key_repeat_count += 1; 
....................             if (key_repeat_count > KEY_REPEAT_TIME) { 
....................                switch (key_code) { 
....................                  /* case '7': 
....................                   case '6': 
....................                   case '5': 
....................                   case '4': 
....................                      key_flag = 1; 
....................                      key_repeat_count = 0; 
....................                      break;*/ 
....................                   //case '0': 
....................                      //key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //break; 
....................                   case '0': 
....................                      key_flag = 1; 
....................                      key_code = 'b'; 
....................                      break; 
....................                   case '1': 
....................                      key_flag = 1; 
....................                      key_code = 'e'; 
....................                      break; 
....................                   case '2': 
....................                      key_flag = 1; 
....................                      key_code = 'f'; 
....................                      break; 
....................                   case 'B': 
....................                      key_flag = 1; 
....................                      key_code = 'h'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'A': 
....................                      key_flag = 1; 
....................                      key_code = 'a'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'C': 
....................                     // key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'D': 
....................                      key_flag = 1; 
....................                      key_code = 'd'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'E': 
....................                      //key_flag = 1; 
....................                      //key_code = 'e'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'F': 
....................                      //key_flag = 1; 
....................                      //key_code = 'f'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                } 
....................             } 
....................          } else { 
....................             //key_flag = 1; 
....................             key_state = STATE_KEY_IDLE; 
....................             key_hold_count = 0; 
....................             key_repeat_count = 0; 
....................          } 
....................          break; 
....................    } 
.................... } 
....................  
.................... unsigned char kthit(void) 
.................... { 
....................    touch_state1 = 0x01 & cap1188_read_data1(0); 
....................    if (touch_state1) { 
....................       touch_state1 = cap1188_read_data1(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data1(0, 0); 
....................       return key_code; 
....................    } 
....................    touch_state2 = 0x01 & cap1188_read_data2(0); 
....................    if (touch_state2) { 
....................       touch_state2 = cap1188_read_data2(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data2(0, 0); 
....................       return key_code; 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... unsigned char Get_Key_Code(void) 
.................... { 
....................    if(touch_state1) { 
....................       switch(touch_state1) 
....................       { 
....................          case 0x01: 
....................             return '0';   // 0 
....................          case 0x02: 
....................             return '1';   // 1 
....................          case 0x04: 
....................             return '2';   // 2 
....................          case 0x08: 
....................             return '3';   // 3 
....................          case 0x10: 
....................             return '4';   // 4 
....................          case 0x20: 
....................             return '5';   // 5 
....................          case 0x40: 
....................             return '6';   // 6 
....................          case 0x80: 
....................             return '7';   // 7 
....................          default: 
....................             return 128; 
....................       } 
....................    } else { 
....................       switch(touch_state2) 
....................       { 
....................          case 0x01: 
....................             return '8';   // 8 
....................          case 0x02: 
....................             return '9';   // 9 
....................          case 0x04: 
....................             return 'A';   // A 
....................          case 0x08: 
....................             return 'B';   // B 
....................          case 0x10: 
....................             return 'C';   // C 
....................          case 0x20: 
....................             return 'D';   // D 
....................          case 0x40: 
....................             return 'E';   // E 
....................          case 0x80: 
....................             return 'F';   // F 
....................          default: 
....................             return 128; 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif //#define _KEYS_H_ 
....................  
....................  
.................... //#include "adc.h" 
.................... //#include "triac.h" 
.................... #include "rtcc.h" 
.................... #ifndef _RTCC_H_ 
.................... #define _RTCC_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #int_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................    if (spk_on_count > 0) { 
....................       spk_on_count--; 
....................       SpeakerOn(); 
....................    } else { 
....................       SpeakerOff(); 
....................    } 
....................    if (fan_rol_count > 0) 
....................    { 
....................       fan_rol_count--; 
....................    } 
....................    if (temp_accum_count > 0){ 
....................       temp_accum_count--; 
....................    } 
....................    if (timed_count_ms > 0) { 
....................       timed_count_ms--; 
....................       if(125 == timed_count_ms) { 
....................          led7[0][1] |= 0x20; 
....................          if (g_state != ST_COMPLETED) 
....................             led7[2][1] |= 0x20; 
....................       } 
....................    } else { 
....................       timed_count_ms = 250; 
....................       if (pid_countdown > 0){ 
....................          pid_countdown--; 
....................       } 
....................       led7[0][1] &= 0xDF; 
....................       led7[2][1] &= 0xDF; 
....................    } 
....................     
....................    key_scan(); 
....................    adc_scan(); 
....................    triac_scan(); 
....................    Led_Scan(); 
....................  
.................... } 
....................  
.................... void RTCC_init(void) 
.................... { 
....................    setup_wdt(WDT_OFF); 
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit); //2.7 ms cycle 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit); //5.4 ms cycle 
....................    setup_timer_1(T1_DISABLED); 
....................    //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
....................    setup_timer_2(T2_DISABLED,0,1); 
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
....................    setup_comparator(NC_NC_NC_NC); 
....................    setup_vref(FALSE); 
....................    setup_psp(PSP_DISABLED); 
....................    enable_interrupts(INT_RTCC); 
....................    enable_interrupts(GLOBAL); 
.................... } 
....................  
.................... #endif   //#define _RTCC_H_ 
....................  
....................  
.................... #include "cap1188.h" 
.................... #ifndef _CAP1188_H_ 
.................... #define _CAP1188_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #use fast_io(C) 
....................  
.................... #define CAP_RESET    PIN_C0 
.................... #define CAP_CS1      PIN_D4 
.................... #define CAP_CS2      PIN_D5 
.................... #define CAP_CLK      PIN_C3 
.................... #define CAP_MOSI     PIN_C4 
.................... #define CAP_MISO     PIN_C5 
....................  
.................... #inline 
.................... void cap1188_reset(void) 
.................... { 
....................    output_low(CAP_CS1); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    // 
....................    output_low(CAP_CS2); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... /* 
.................... void cap1188_clr_int(void) 
.................... { 
....................     
.................... } 
....................  
.................... void cap1188_reset_interface(void) 
.................... {    
....................    output_low(CAP_CS1); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    output_low(CAP_CS2); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... void cap1188_set_address_ptr1(int8 adr) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_set_address_ptr2(int8 adr) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... */ 
.................... void cap1188_write_data1(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_write_data2(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... int8 cap1188_read_data1(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
....................    return data; 
.................... } 
....................  
.................... int8 cap1188_read_data2(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
....................    return data; 
.................... } 
.................... /* 
.................... void cap1188_disable_int(void) 
.................... { 
....................    cap1188_write_data1(0x27, 0x00); 
....................    cap1188_write_data2(0x27,0x00); 
.................... } 
....................  
.................... void cap1188_disable_ret(void) 
.................... { 
....................    cap1188_write_data1(0x28, 0x00); 
....................    cap1188_write_data2(0x28, 0x00); 
.................... } 
.................... */ 
.................... void cap1188_init(void) 
.................... { 
....................    delay_ms(100); 
....................    cap1188_reset(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... /*void cap1188_clr_int1(void) 
.................... { 
....................    cap1188_write_data1(0, 0); 
.................... } 
....................  
.................... void cap1188_clr_int2(void) 
.................... { 
....................    cap1188_write_data2(0, 0); 
.................... }*/ 
....................  
.................... #endif   // #define _CAP1188_H_ 
....................  
....................  
....................  
.................... void Process_Led(void) 
.................... { 
....................    if ((timed_count_ms%151) == 0) { 
*
4C32:  MOVFF  3D,E6
4C36:  MOVFF  3C,E5
4C3A:  CLRF   xE8
4C3C:  MOVLW  97
4C3E:  MOVWF  xE7
4C40:  CALL   22F4
4C44:  MOVFF  00,DC
4C48:  MOVFF  03,DD
4C4C:  MOVF   xDC,F
4C4E:  BTFSS  FD8.2
4C50:  BRA    5268
4C52:  MOVF   xDD,F
4C54:  BTFSS  FD8.2
4C56:  BRA    5268
....................       PutDateTime(); 
4C58:  CALL   1562
....................       switch (g_state) { 
4C5C:  MOVLW  01
4C5E:  SUBWF  38,W
4C60:  ADDLW  E3
4C62:  BTFSC  FD8.0
4C64:  BRA    5266
4C66:  ADDLW  1D
4C68:  GOTO   532E
....................          case ST_SET_PROGRAM: 
....................             LedSetTempOff(); 
4C6C:  CALL   0004
....................             LedProtectTempOff(); 
4C70:  CALL   3C5A
....................             LedTimeDelayOff(); 
4C74:  CALL   3C5E
....................             LedTimeSterOff(); 
4C78:  CALL   3C62
....................             switch (g_set){ 
4C7C:  MOVF   3B,W
4C7E:  XORLW  01
4C80:  BZ    4C8C
4C82:  XORLW  03
4C84:  BZ    4C9A
4C86:  XORLW  01
4C88:  BZ    4CBA
4C8A:  BRA    4CDA
....................                case SET_PROGRAM_USER: 
....................                   led7[1][0] = 0x00;        
4C8C:  CLRF   1E
....................                   led7[1][1] = 0x00;        
4C8E:  CLRF   1F
....................                   led7[1][2] = 0xDC;       //'P' 
4C90:  MOVLW  DC
4C92:  MOVWF  20
....................                   led7[1][3] = 0x4F;       //'U' 
4C94:  MOVLW  4F
4C96:  MOVWF  21
....................                   break; 
4C98:  BRA    4CDA
....................                case SET_TIME_REAL_TIME_CLOCK: 
....................                   led7[1][0] = 0x00;        
4C9A:  CLRF   1E
....................                   led7[1][1] = Get7Seg(5);        
4C9C:  MOVLW  05
4C9E:  MOVWF  xE7
4CA0:  CALL   14F4
4CA4:  MOVFF  01,1F
....................                   led7[1][2] = 0x80;             //'S' 
4CA8:  MOVLW  80
4CAA:  MOVWF  20
....................                   led7[1][3] = Get7Seg(1);       //'1' 
4CAC:  MOVLW  01
4CAE:  MOVWF  xE7
4CB0:  CALL   14F4
4CB4:  MOVFF  01,21
....................                   break; 
4CB8:  BRA    4CDA
....................                case SET_TIME_CLOCK: 
....................                   led7[1][0] = 0x00;        
4CBA:  CLRF   1E
....................                   led7[1][1] = Get7Seg(5);        
4CBC:  MOVLW  05
4CBE:  MOVWF  xE7
4CC0:  CALL   14F4
4CC4:  MOVFF  01,1F
....................                   led7[1][2] = 0x80;             //'S' 
4CC8:  MOVLW  80
4CCA:  MOVWF  20
....................                   led7[1][3] = Get7Seg(2);       //'2' 
4CCC:  MOVLW  02
4CCE:  MOVWF  xE7
4CD0:  CALL   14F4
4CD4:  MOVFF  01,21
....................                   break; 
4CD8:  BRA    4CDA
....................                default: 
....................                   break; 
....................             } 
....................             Led_Dot_Off(); 
4CDA:  CALL   2730
....................             led7[2][0] = 0x00;        
4CDE:  CLRF   22
....................             led7[2][1] = 0x00;        
4CE0:  CLRF   23
....................             led7[2][2] = 0x00; 
4CE2:  CLRF   24
....................             led7[2][3] = 0x00; 
4CE4:  CLRF   25
....................             break; 
4CE6:  BRA    5266
....................          case ST_SET_PASS: 
....................          case ST_SAVE_PASS: 
....................             led7[1][0] = 0xDC; 
4CE8:  MOVLW  DC
4CEA:  MOVWF  1E
....................             led7[1][1] = 0xDD; 
4CEC:  MOVLW  DD
4CEE:  MOVWF  1F
....................             led7[1][2] = Get7Seg(5); 
4CF0:  MOVLW  05
4CF2:  MOVWF  xE7
4CF4:  CALL   14F4
4CF8:  MOVFF  01,20
....................             led7[1][3] = Get7Seg(5); 
4CFC:  MOVLW  05
4CFE:  MOVWF  xE7
4D00:  CALL   14F4
4D04:  MOVFF  01,21
....................              
....................             led7[2][0] = Get7Seg(password / 1000); 
4D08:  MOVFF  62,E6
4D0C:  MOVFF  61,E5
4D10:  MOVLW  03
4D12:  MOVWF  xE8
4D14:  MOVLW  E8
4D16:  MOVWF  xE7
4D18:  CALL   22F4
4D1C:  MOVFF  02,DD
4D20:  MOVFF  01,DC
4D24:  MOVFF  01,E7
4D28:  CALL   14F4
4D2C:  MOVFF  01,22
....................             led7[2][1] = Get7Seg((password%1000) / 100); 
4D30:  MOVFF  62,E6
4D34:  MOVFF  61,E5
4D38:  MOVLW  03
4D3A:  MOVWF  xE8
4D3C:  MOVLW  E8
4D3E:  MOVWF  xE7
4D40:  CALL   22F4
4D44:  MOVFF  00,DC
4D48:  MOVFF  03,DD
4D4C:  MOVFF  03,E6
4D50:  MOVFF  00,E5
4D54:  CLRF   xE8
4D56:  MOVLW  64
4D58:  MOVWF  xE7
4D5A:  CALL   22F4
4D5E:  MOVFF  02,DD
4D62:  MOVFF  01,DC
4D66:  MOVFF  01,E7
4D6A:  CALL   14F4
4D6E:  MOVFF  01,23
....................             led7[2][2] = Get7Seg((password%100)/10); 
4D72:  MOVFF  62,E6
4D76:  MOVFF  61,E5
4D7A:  CLRF   xE8
4D7C:  MOVLW  64
4D7E:  MOVWF  xE7
4D80:  CALL   22F4
4D84:  MOVFF  00,DC
4D88:  MOVFF  03,DD
4D8C:  MOVFF  03,E6
4D90:  MOVFF  00,E5
4D94:  CLRF   xE8
4D96:  MOVLW  0A
4D98:  MOVWF  xE7
4D9A:  CALL   22F4
4D9E:  MOVFF  02,DD
4DA2:  MOVFF  01,DC
4DA6:  MOVFF  01,E7
4DAA:  CALL   14F4
4DAE:  MOVFF  01,24
....................             led7[2][3] = Get7Seg(password%10) ; 
4DB2:  MOVFF  62,E6
4DB6:  MOVFF  61,E5
4DBA:  CLRF   xE8
4DBC:  MOVLW  0A
4DBE:  MOVWF  xE7
4DC0:  CALL   22F4
4DC4:  MOVFF  00,DC
4DC8:  MOVFF  03,DD
4DCC:  MOVFF  00,E7
4DD0:  CALL   14F4
4DD4:  MOVFF  01,25
....................             break; 
4DD8:  BRA    5266
....................          case ST_SET_TIME_STER_DRY: 
....................             LedSetTempOff(); 
4DDA:  CALL   0004
....................             LedProtectTempOff(); 
4DDE:  CALL   3C5A
....................             LedTimeDelayOff(); 
4DE2:  CALL   3C5E
....................             LedTimeSterOff(); 
4DE6:  CALL   3C62
....................             Led_Prog_Off(); 
4DEA:  CALL   1962
....................             led7[1][0] = 0x00; 
4DEE:  CLRF   1E
....................             led7[1][1] = Get7Seg(5); 
4DF0:  MOVLW  05
4DF2:  MOVWF  xE7
4DF4:  CALL   14F4
4DF8:  MOVFF  01,1F
....................             led7[1][2] = 0xD6;        
4DFC:  MOVLW  D6
4DFE:  MOVWF  20
....................             led7[1][3] = 0x54; 
4E00:  MOVLW  54
4E02:  MOVWF  21
....................  
....................             PutSign(2,SIGN_BLANK); 
4E04:  MOVLW  02
4E06:  MOVWF  xDC
4E08:  MOVLW  0E
4E0A:  MOVWF  xDD
4E0C:  CALL   3C66
....................             break; 
4E10:  BRA    5266
....................          case ST_SET_SETPOINT: 
....................             LedSetTempOn(); 
4E12:  CALL   4578
....................             LedProtectTempOff(); 
4E16:  CALL   3C5A
....................             LedTimeDelayOff(); 
4E1A:  CALL   3C5E
....................             LedTimeSterOn(); 
4E1E:  CALL   457C
....................             PutTempSign(1, setpoint); 
4E22:  MOVLW  01
4E24:  MOVWF  xDC
4E26:  MOVFF  66,DE
4E2A:  MOVFF  65,DD
4E2E:  CALL   4580
....................             PutTime_One(2, ster_time); 
4E32:  MOVLW  02
4E34:  MOVWF  xDC
4E36:  MOVFF  82,DE
4E3A:  MOVFF  81,DD
4E3E:  RCALL  4A4E
....................             break; 
4E40:  BRA    5266
....................          case ST_SET_PROTECT: 
....................             LedSetTempOff(); 
4E42:  CALL   0004
....................             LedProtectTempOn(); 
4E46:  RCALL  4BAC
....................             LedTimeDelayOff(); 
4E48:  CALL   3C5E
....................             LedTimeSterOn(); 
4E4C:  CALL   457C
....................             PutTempSign(1, protect); 
4E50:  MOVLW  01
4E52:  MOVWF  xDC
4E54:  MOVFF  68,DE
4E58:  MOVFF  67,DD
4E5C:  CALL   4580
....................             PutTime_One(2, ster_time); 
4E60:  MOVLW  02
4E62:  MOVWF  xDC
4E64:  MOVFF  82,DE
4E68:  MOVFF  81,DD
4E6C:  RCALL  4A4E
....................             break; 
4E6E:  BRA    5266
....................          case ST_SET_TIME_DELAY: 
....................          case ST_SET_WAIT_TIME: 
....................          case ST_RUN_WAITING_TIME: 
....................             LedSetTempOff(); 
4E70:  CALL   0004
....................             LedProtectTempOff(); 
4E74:  CALL   3C5A
....................             LedTimeDelayOn(); 
4E78:  BRA    4BB0
....................             LedTimeSterOff(); 
4E7A:  CALL   3C62
....................             switch (wait_day) {                                                                                                                                                                                                                                                                                                                                                                                                      
4E7E:  MOVF   5E,W
4E80:  ADDLW  F8
4E82:  BC    4EF8
4E84:  ADDLW  08
4E86:  GOTO   52D4
....................                   case 1: 
....................                   PutSign(1,SIGN_CN); 
4E8A:  MOVLW  01
4E8C:  MOVWF  xDC
4E8E:  MOVLW  06
4E90:  MOVWF  xDD
4E92:  CALL   3C66
....................                   break; 
4E96:  BRA    4EF8
....................                   case 2: 
....................                   PutSign(1,SIGN_T2); 
4E98:  MOVLW  01
4E9A:  MOVWF  xDC
4E9C:  MOVLW  07
4E9E:  MOVWF  xDD
4EA0:  CALL   3C66
....................                   break; 
4EA4:  BRA    4EF8
....................                   case 3: 
....................                   PutSign(1,SIGN_T3); 
4EA6:  MOVLW  01
4EA8:  MOVWF  xDC
4EAA:  MOVLW  08
4EAC:  MOVWF  xDD
4EAE:  CALL   3C66
....................                   break; 
4EB2:  BRA    4EF8
....................                   case 4: 
....................                   PutSign(1,SIGN_T4); 
4EB4:  MOVLW  01
4EB6:  MOVWF  xDC
4EB8:  MOVLW  09
4EBA:  MOVWF  xDD
4EBC:  CALL   3C66
....................                   break; 
4EC0:  BRA    4EF8
....................                   case 5: 
....................                   PutSign(1,SIGN_T5); 
4EC2:  MOVLW  01
4EC4:  MOVWF  xDC
4EC6:  MOVLW  0A
4EC8:  MOVWF  xDD
4ECA:  CALL   3C66
....................                   break; 
4ECE:  BRA    4EF8
....................                   case 6: 
....................                   PutSign(1,SIGN_T6); 
4ED0:  MOVLW  01
4ED2:  MOVWF  xDC
4ED4:  MOVLW  0B
4ED6:  MOVWF  xDD
4ED8:  CALL   3C66
....................                   break; 
4EDC:  BRA    4EF8
....................                   case 7: 
....................                   PutSign(1,SIGN_T7); 
4EDE:  MOVLW  01
4EE0:  MOVWF  xDC
4EE2:  MOVLW  0C
4EE4:  MOVWF  xDD
4EE6:  CALL   3C66
....................                   break; 
4EEA:  BRA    4EF8
....................                   case 0: 
....................                   PutSign(1,SIGN_ALL); 
4EEC:  MOVLW  01
4EEE:  MOVWF  xDC
4EF0:  MOVLW  0D
4EF2:  MOVWF  xDD
4EF4:  CALL   3C66
....................                   break; 
....................             } 
....................             PutTime_One(2, delay_time); 
4EF8:  MOVLW  02
4EFA:  MOVWF  xDC
4EFC:  MOVFF  80,DE
4F00:  MOVFF  7F,DD
4F04:  RCALL  4A4E
....................             break; 
4F06:  BRA    5266
....................          case ST_SET_HOLD_TIME: 
....................             LedSetTempOff(); 
4F08:  CALL   0004
....................             LedProtectTempOn(); 
4F0C:  RCALL  4BAC
....................             LedTimeDelayOff(); 
4F0E:  CALL   3C5E
....................             LedTimeSterOn(); 
4F12:  CALL   457C
....................             PutTempSign(1, protect); 
4F16:  MOVLW  01
4F18:  MOVWF  xDC
4F1A:  MOVFF  68,DE
4F1E:  MOVFF  67,DD
4F22:  CALL   4580
....................             PutTime_One(2, ster_time); 
4F26:  MOVLW  02
4F28:  MOVWF  xDC
4F2A:  MOVFF  82,DE
4F2E:  MOVFF  81,DD
4F32:  RCALL  4A4E
....................             break; 
4F34:  BRA    5266
....................          /*case ST_DIS_TIME_DAY_HOUR: 
....................             LedSetTempOff(); 
....................             LedProtectTempOn(); 
....................             LedTimeDelayOff(); 
....................             LedTimeSterOn(); 
....................             PutTempSign(1, protect); 
....................  
....................             led7[2][0] = 0x8F; //d 
....................             led7[2][1] = 0x8F; 
....................             led7[2][2] = 0xCD; //h 
....................             led7[2][3] = 0xCD; 
....................             break; 
....................          case ST_DIS_TIME_HOUR_MIN: 
....................             LedSetTempOff(); 
....................             LedProtectTempOn(); 
....................             LedTimeDelayOff(); 
....................             LedTimeSterOn(); 
....................             PutTempSign(1, protect); 
....................  
....................             led7[2][0] = 0xCD; //h 
....................             led7[2][1] = 0xCD; 
....................             led7[2][2] = 0xDC; //p 
....................             led7[2][3] = 0xDC; 
....................             break; 
....................          case ST_SET_TIME_DAY_HOUR: 
....................             LedSetTempOff(); 
....................             LedProtectTempOn(); 
....................             LedTimeDelayOff(); 
....................             LedTimeSterOn(); 
....................             PutTempSign(1, protect); 
....................             PutTime_DayHour(2,user_day_ster_time,user_hour_ster_time); 
....................             break; 
....................          case ST_SET_TIME_HOUR_MIN: 
....................             LedSetTempOff(); 
....................             LedProtectTempOn(); 
....................             LedTimeDelayOff(); 
....................             LedTimeSterOn(); 
....................             PutTempSign(1, protect); 
....................             PutTime_One(2, ster_time); 
....................             break;*/ 
....................          case ST_SET_SERI: 
....................             Led_Prog_Off(); 
4F36:  CALL   1962
....................             led7[1][0] = 0x00; 
4F3A:  CLRF   1E
....................             led7[1][1] = 0x00; 
4F3C:  CLRF   1F
....................             led7[1][2] = 0x44; 
4F3E:  MOVLW  44
4F40:  MOVWF  20
....................             led7[1][3] = 0x8F; 
4F42:  MOVLW  8F
4F44:  MOVWF  21
....................              
....................             led7[2][0] = Get7Seg(seri / 1000); 
4F46:  MOVFF  97,E6
4F4A:  MOVFF  96,E5
4F4E:  MOVLW  03
4F50:  MOVWF  xE8
4F52:  MOVLW  E8
4F54:  MOVWF  xE7
4F56:  CALL   22F4
4F5A:  MOVFF  02,DD
4F5E:  MOVFF  01,DC
4F62:  MOVFF  01,E7
4F66:  CALL   14F4
4F6A:  MOVFF  01,22
....................             led7[2][1] = Get7Seg((seri%1000) / 100); 
4F6E:  MOVFF  97,E6
4F72:  MOVFF  96,E5
4F76:  MOVLW  03
4F78:  MOVWF  xE8
4F7A:  MOVLW  E8
4F7C:  MOVWF  xE7
4F7E:  CALL   22F4
4F82:  MOVFF  00,DC
4F86:  MOVFF  03,DD
4F8A:  MOVFF  03,E6
4F8E:  MOVFF  00,E5
4F92:  CLRF   xE8
4F94:  MOVLW  64
4F96:  MOVWF  xE7
4F98:  CALL   22F4
4F9C:  MOVFF  02,DD
4FA0:  MOVFF  01,DC
4FA4:  MOVFF  01,E7
4FA8:  CALL   14F4
4FAC:  MOVFF  01,23
....................             led7[2][2] = Get7Seg((seri%100)/10); 
4FB0:  MOVFF  97,E6
4FB4:  MOVFF  96,E5
4FB8:  CLRF   xE8
4FBA:  MOVLW  64
4FBC:  MOVWF  xE7
4FBE:  CALL   22F4
4FC2:  MOVFF  00,DC
4FC6:  MOVFF  03,DD
4FCA:  MOVFF  03,E6
4FCE:  MOVFF  00,E5
4FD2:  CLRF   xE8
4FD4:  MOVLW  0A
4FD6:  MOVWF  xE7
4FD8:  CALL   22F4
4FDC:  MOVFF  02,DD
4FE0:  MOVFF  01,DC
4FE4:  MOVFF  01,E7
4FE8:  CALL   14F4
4FEC:  MOVFF  01,24
....................             led7[2][3] = Get7Seg(seri%10); 
4FF0:  MOVFF  97,E6
4FF4:  MOVFF  96,E5
4FF8:  CLRF   xE8
4FFA:  MOVLW  0A
4FFC:  MOVWF  xE7
4FFE:  CALL   22F4
5002:  MOVFF  00,DC
5006:  MOVFF  03,DD
500A:  MOVFF  00,E7
500E:  CALL   14F4
5012:  MOVFF  01,25
....................             break; 
5016:  BRA    5266
....................          case ST_RUN_HEATING_TIME: 
....................             LedSetTempOn(); 
5018:  CALL   4578
....................             LedProtectTempOff(); 
501C:  CALL   3C5A
....................             LedTimeDelayOff(); 
5020:  CALL   3C5E
....................             LedTimeSterOn(); 
5024:  CALL   457C
....................             PutTempSign(1,realTemp); 
5028:  MOVLW  01
502A:  MOVWF  xDC
502C:  MOVFF  6A,DE
5030:  MOVFF  69,DD
5034:  CALL   4580
....................             /*if(flag_day_hour == 0 && g_mode == USER_MODE) { 
....................                PutTime_DayHour(2,user_day_ster_time,user_hour_ster_time); 
....................             } 
....................             else PutTime_One(2,user_ster_time);*/ 
....................             PutTime_One(2, ster_time); 
5038:  MOVLW  02
503A:  MOVWF  xDC
503C:  MOVFF  82,DE
5040:  MOVFF  81,DD
5044:  RCALL  4A4E
....................             if (realTemp >= protect) { 
5046:  MOVF   68,W
5048:  SUBWF  6A,W
504A:  BNC   5088
504C:  BNZ   5054
504E:  MOVF   67,W
5050:  SUBWF  69,W
5052:  BNC   5088
....................                Beep(500); 
5054:  MOVLW  01
5056:  MOVWF  xDD
5058:  MOVLW  F4
505A:  MOVWF  xDC
505C:  CALL   22EA
....................                g_state = ST_ERR; 
5060:  MOVLW  1E
5062:  MOVWF  38
....................                old_state = g_state; 
5064:  MOVFF  38,39
....................                if (realTemp >= MAX_TEMP_RANGE) { 
5068:  MOVF   6A,W
506A:  SUBLW  7C
506C:  BC    507A
....................                   PutSign(1, SIGN_SENSOR_BROKEN); 
506E:  MOVLW  01
5070:  MOVWF  xDC
5072:  CLRF   xDD
5074:  CALL   3C66
....................                } else { 
5078:  BRA    5086
....................                   PutSign(1, SIGN_TEMP_OVERLOAD); 
507A:  MOVLW  01
507C:  MOVWF  xDC
507E:  MOVWF  xDD
5080:  CALL   3C66
....................                   LedProtectTempOn(); 
5084:  RCALL  4BAC
....................                } 
....................             } else { 
5086:  BRA    508C
....................                LedProtectTempOff(); 
5088:  CALL   3C5A
....................             } 
....................             break; 
508C:  BRA    5266
....................          case ST_RUN_HOLDING_TIME: 
....................             LedSetTempOn(); 
508E:  CALL   4578
....................             LedProtectTempOff(); 
5092:  CALL   3C5A
....................             LedTimeDelayOff(); 
5096:  CALL   3C5E
....................             LedTimeSterOn(); 
509A:  CALL   457C
....................             PutTempSign(1,realTemp); 
509E:  MOVLW  01
50A0:  MOVWF  xDC
50A2:  MOVFF  6A,DE
50A6:  MOVFF  69,DD
50AA:  CALL   4580
....................             /*if(flag_day_hour == 0 && g_mode == USER_MODE) { 
....................                PutTime_DayHour(2,day_remain_time,hour_remain_time); 
....................             } 
....................             else PutTime_One(2, remain_time);*/ 
....................             PutTime_One(2, remain_time); 
50AE:  MOVLW  02
50B0:  MOVWF  xDC
50B2:  MOVFF  8A,DE
50B6:  MOVFF  89,DD
50BA:  RCALL  4A4E
....................             if (realTemp >= protect) { 
50BC:  MOVF   68,W
50BE:  SUBWF  6A,W
50C0:  BNC   50FE
50C2:  BNZ   50CA
50C4:  MOVF   67,W
50C6:  SUBWF  69,W
50C8:  BNC   50FE
....................                Beep(500); 
50CA:  MOVLW  01
50CC:  MOVWF  xDD
50CE:  MOVLW  F4
50D0:  MOVWF  xDC
50D2:  CALL   22EA
....................                g_state = ST_ERR; 
50D6:  MOVLW  1E
50D8:  MOVWF  38
....................                old_state = g_state; 
50DA:  MOVFF  38,39
....................                if (realTemp >= MAX_TEMP_RANGE) { 
50DE:  MOVF   6A,W
50E0:  SUBLW  7C
50E2:  BC    50F0
....................                   PutSign(1, SIGN_SENSOR_BROKEN); 
50E4:  MOVLW  01
50E6:  MOVWF  xDC
50E8:  CLRF   xDD
50EA:  CALL   3C66
....................                } else { 
50EE:  BRA    50FC
....................                   PutSign(1, SIGN_TEMP_OVERLOAD); 
50F0:  MOVLW  01
50F2:  MOVWF  xDC
50F4:  MOVWF  xDD
50F6:  CALL   3C66
....................                   LedProtectTempOn(); 
50FA:  RCALL  4BAC
....................                } 
....................             } else { 
50FC:  BRA    5102
....................                LedProtectTempOff(); 
50FE:  CALL   3C5A
....................             } 
....................             break; 
5102:  BRA    5266
....................          case ST_RUN_COOLING_TIME: 
....................             LedSetTempOn(); 
5104:  CALL   4578
....................             LedProtectTempOff(); 
5108:  CALL   3C5A
....................             LedTimeDelayOff(); 
510C:  CALL   3C5E
....................             LedTimeSterOff(); 
5110:  CALL   3C62
....................             PutTempSign(1,realTemp); 
5114:  MOVLW  01
5116:  MOVWF  xDC
5118:  MOVFF  6A,DE
511C:  MOVFF  69,DD
5120:  CALL   4580
....................             PutTime_One(2, 0); 
5124:  MOVLW  02
5126:  MOVWF  xDC
5128:  CLRF   xDE
512A:  CLRF   xDD
512C:  RCALL  4A4E
....................             if (realTemp >= protect) { 
512E:  MOVF   68,W
5130:  SUBWF  6A,W
5132:  BNC   5170
5134:  BNZ   513C
5136:  MOVF   67,W
5138:  SUBWF  69,W
513A:  BNC   5170
....................                Beep(500); 
513C:  MOVLW  01
513E:  MOVWF  xDD
5140:  MOVLW  F4
5142:  MOVWF  xDC
5144:  CALL   22EA
....................                g_state = ST_ERR; 
5148:  MOVLW  1E
514A:  MOVWF  38
....................                old_state = g_state; 
514C:  MOVFF  38,39
....................                if (realTemp >= MAX_TEMP_RANGE) { 
5150:  MOVF   6A,W
5152:  SUBLW  7C
5154:  BC    5162
....................                   PutSign(1, SIGN_SENSOR_BROKEN); 
5156:  MOVLW  01
5158:  MOVWF  xDC
515A:  CLRF   xDD
515C:  CALL   3C66
....................                } else { 
5160:  BRA    516E
....................                   PutSign(1, SIGN_TEMP_OVERLOAD); 
5162:  MOVLW  01
5164:  MOVWF  xDC
5166:  MOVWF  xDD
5168:  CALL   3C66
....................                   LedProtectTempOn(); 
516C:  RCALL  4BAC
....................                } 
....................             } else { 
516E:  BRA    5174
....................                LedProtectTempOff(); 
5170:  CALL   3C5A
....................             } 
....................             break; 
5174:  BRA    5266
....................             break; 
5176:  BRA    5266
....................          case ST_SET_PID_KP: 
....................             Led_F_On(); 
5178:  BRA    4BB6
....................             PutPid(1,pid_Kp); 
517A:  MOVLW  01
517C:  MOVWF  xDE
517E:  MOVFF  84,E0
5182:  MOVFF  83,DF
5186:  CALL   2D5C
....................             break; 
518A:  BRA    5266
....................          case ST_SET_PID_KI: 
....................             Led_E_On(); 
518C:  BRA    4BF4
....................             PutPid(1,pid_Ki); 
518E:  MOVLW  01
5190:  MOVWF  xDE
5192:  MOVFF  86,E0
5196:  MOVFF  85,DF
519A:  CALL   2D5C
....................             break; 
519E:  BRA    5266
....................          case ST_SET_PID_KD: 
....................             Led_D_On(); 
51A0:  CALL   1F7A
....................             PutPid(1,pid_Kd); 
51A4:  MOVLW  01
51A6:  MOVWF  xDE
51A8:  MOVFF  88,E0
51AC:  MOVFF  87,DF
51B0:  CALL   2D5C
....................             break; 
51B4:  BRA    5266
....................          case ST_COMPLETED: 
....................             LedSetTempOn(); 
51B6:  CALL   4578
....................             LedProtectTempOff(); 
51BA:  CALL   3C5A
....................             LedTimeDelayOff(); 
51BE:  CALL   3C5E
....................             LedTimeSterOff(); 
51C2:  CALL   3C62
....................             PutTempSign(1,realTemp); 
51C6:  MOVLW  01
51C8:  MOVWF  xDC
51CA:  MOVFF  6A,DE
51CE:  MOVFF  69,DD
51D2:  CALL   4580
....................             PutSign(2, SIGN_PROCESS_END); 
51D6:  MOVLW  02
51D8:  MOVWF  xDC
51DA:  MOVLW  05
51DC:  MOVWF  xDD
51DE:  CALL   3C66
....................             break; 
51E2:  BRA    5266
....................          case ST_IDLE: 
....................             LedSetTempOn(); 
51E4:  CALL   4578
....................             LedProtectTempOff(); 
51E8:  CALL   3C5A
....................             LedTimeDelayOff(); 
51EC:  CALL   3C5E
....................             LedTimeSterOn(); 
51F0:  CALL   457C
....................             PutTempSign(1, setpoint); 
51F4:  MOVLW  01
51F6:  MOVWF  xDC
51F8:  MOVFF  66,DE
51FC:  MOVFF  65,DD
5200:  CALL   4580
....................             PutTime_One(2, ster_time); 
5204:  MOVLW  02
5206:  MOVWF  xDC
5208:  MOVFF  82,DE
520C:  MOVFF  81,DD
5210:  RCALL  4A4E
....................             /*if(flag_day_hour == 0 && g_mode == USER_MODE) { 
....................                PutTime_DayHour(2,user_day_ster_time,user_hour_ster_time); 
....................             } 
....................             else PutTime_One(2,user_ster_time);*/ 
....................             Led_Prog_Off(); 
5212:  CALL   1962
....................             switch (g_mode) 
5216:  MOVLW  01
5218:  SUBWF  3A,W
521A:  ADDLW  F5
521C:  BC    5264
521E:  ADDLW  0B
5220:  GOTO   52FE
....................             { 
....................                case PROGRAM1: 
....................                   Led_0_On(); 
5224:  CALL   19DA
....................                   break; 
5228:  BRA    5264
....................                case PROGRAM2: 
....................                   Led_1_On(); 
522A:  CALL   1B7A
....................                   break; 
522E:  BRA    5264
....................                case PROGRAM3: 
....................                   Led_2_On(); 
5230:  CALL   1BEC
....................                   break; 
5234:  BRA    5264
....................                case PROGRAM4: 
....................                   Led_3_On(); 
5236:  CALL   1C5E
....................                   break; 
523A:  BRA    5264
....................                case PROGRAM5: 
....................                   Led_4_On(); 
523C:  CALL   1CD0
....................                   break; 
5240:  BRA    5264
....................                case PROGRAM6: 
....................                   Led_5_On(); 
5242:  CALL   1D42
....................                   break; 
5246:  BRA    5264
....................                case PROGRAM7: 
....................                   Led_6_On(); 
5248:  CALL   1DB4
....................                   break; 
524C:  BRA    5264
....................                case PROGRAM8: 
....................                   Led_7_On(); 
524E:  CALL   1E26
....................                   break; 
5252:  BRA    5264
....................                case PROGRAM9: 
....................                   Led_8_On(); 
5254:  CALL   1E98
....................                   break; 
5258:  BRA    5264
....................                case PROGRAM10: 
....................                   Led_A_On(); 
525A:  CALL   1F0A
....................                   break; 
525E:  BRA    5264
....................                case USER_MODE: 
....................                   Led_D_On(); 
5260:  CALL   1F7A
....................                   break; 
....................             } 
....................             break; 
5264:  BRA    5266
....................       } 
....................    } else { 
5266:  BRA    52D0
....................       if (40 == timed_count_ms) { 
5268:  MOVF   3C,W
526A:  SUBLW  28
526C:  BNZ   52D0
526E:  MOVF   3D,F
5270:  BNZ   52D0
....................          switch (g_state) { 
5272:  MOVLW  02
5274:  SUBWF  38,W
5276:  ADDLW  EA
5278:  BC    52D0
527A:  ADDLW  16
527C:  GOTO   5382
....................             case ST_SET_DAY_OF_WEEK: 
....................                led1[2] |= 0xFE; 
5280:  MOVLW  FE
5282:  IORWF  34,F
....................                break; 
5284:  BRA    52D0
....................             case ST_SET_HOUR: 
....................                led7[0][0] = 0; 
5286:  CLRF   1A
....................                led7[0][1] = 0; 
5288:  CLRF   1B
....................                break; 
528A:  BRA    52D0
....................             case ST_SET_MINUTE: 
....................                led7[0][2] = 0; 
528C:  CLRF   1C
....................                led7[0][3] = 0; 
528E:  CLRF   1D
....................                break; 
5290:  BRA    52D0
....................             case ST_SET_SETPOINT: 
....................                led1[1] |= 0x01; 
5292:  BSF    33.0
....................                break; 
5294:  BRA    52D0
....................             case ST_SET_PROTECT: 
....................                led1[1] |= 0x02; 
5296:  BSF    33.1
....................                break; 
5298:  BRA    52D0
....................             case ST_SET_TIME_DELAY: 
....................                led1[1] |= 0x04; 
529A:  BSF    33.2
....................                PutSign(1,SIGN_BLANK); 
529C:  MOVLW  01
529E:  MOVWF  xDC
52A0:  MOVLW  0E
52A2:  MOVWF  xDD
52A4:  CALL   3C66
....................                break; 
52A8:  BRA    52D0
....................             case ST_SET_PROGRAM: 
....................                PutSign(1,SIGN_BLANK); 
52AA:  MOVLW  01
52AC:  MOVWF  xDC
52AE:  MOVLW  0E
52B0:  MOVWF  xDD
52B2:  CALL   3C66
....................                break; 
52B6:  BRA    52D0
....................             case ST_SET_WAIT_TIME: 
....................                led1[1] |= 0x04; 
52B8:  BSF    33.2
....................                PutSign(2,SIGN_BLANK); 
52BA:  MOVLW  02
52BC:  MOVWF  xDC
52BE:  MOVLW  0E
52C0:  MOVWF  xDD
52C2:  CALL   3C66
....................                break; 
52C6:  BRA    52D0
....................             case ST_SET_HOLD_TIME: 
....................                led1[1] |= 0x08; 
52C8:  BSF    33.3
....................                break; 
52CA:  BRA    52D0
....................             case ST_SET_PID_KP: 
....................             case ST_SET_PID_KI: 
....................             case ST_SET_PID_KD: 
....................                Led_Prog_Off(); 
52CC:  CALL   1962
....................                break; 
....................          } 
....................       } 
....................    }    
52D0:  GOTO   68A0 (RETURN)
.................... } 
....................  
.................... #endif // #define _PROCESS_LEDS_H_ 
....................  
.................... #include "process_rs232.h" 
.................... #ifndef _PROCESS_RS232_H_ 
.................... #define _PROCESS_RS232_H_ 
....................  
.................... #include "leds.h" 
.................... #ifndef _LEDS_H_ 
.................... #define _LEDS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... #include "globals.h" 
.................... #include "ds1307.h" 
.................... #include "cap1188.h" 
....................  
.................... /* 
....................       4                 7 6 5 4 3 2 1 0 
....................     -----               0 1 0 1 1 1 1 1   0x5F --> 0 
....................    |     |              0 0 0 0 1 0 0 1   0x09 --> 1 
....................  6 |  7  |3             1 0 0 1 1 1 1 0   0x9E --> 2 
....................     -----               1 0 0 1 1 0 1 1   0x9B --> 3 
....................    |     |              1 1 0 0 1 0 0 1   0xC9 --> 4 
....................  2 |     |0             1 1 0 1 0 0 1 1   0xD3 --> 5 
....................     ----- o 5           1 1 0 1 0 1 1 1   0xD7 --> 6 
....................       1                 0 0 0 1 1 0 0 1   0x19 --> 7 
....................                         1 1 0 1 1 1 1 1   0xDF --> 8 
....................                         1 1 0 1 1 0 1 1   0xDB --> 9 
....................                         1 1 0 1 0 1 1 0   0xD6 --> E 
....................                         1 1 0 1 1 1 0 0   0xDC --> P 
....................                         0 1 0 0 0 1 0 0   0x44 --> I 
....................                         1 0 0 0 1 1 1 1   0x8F --> d 
....................                         1 0 0 0 0 1 0 1   0x85 --> n 
....................                         1 1 0 0 1 1 0 1    
.................... */ 
....................  
.................... static unsigned char index; 
....................  
.................... unsigned char Get7Seg(unsigned char key) { 
....................    switch (key) { 
....................       case 0: 
....................          return 0x5F; 
....................       case 1: 
....................          return 0x09; 
....................       case 2: 
....................          return 0x9E; 
....................       case 3: 
....................          return 0x9B; 
....................       case 4: 
....................          return 0xC9; 
....................       case 5: 
....................          return 0xD3; 
....................       case 6: 
....................          return 0xD7; 
....................       case 7: 
....................          return 0x19; 
....................       case 8: 
....................          return 0xDF; 
....................       case 9: 
....................          return 0xDB; 
....................       default: 
....................          return 0x00;   //blank; 
....................    } 
.................... } 
....................  
.................... unsigned char AddPoint(unsigned char key) { 
....................    return key | 0x20; 
.................... } 
....................  
.................... void led_init(void) { 
....................    //Led7[0][0] = Get7Seg(0); Led7[0][1] = Get7Seg(1); Led7[0][2] = Get7Seg(2); Led7[0][3] = Get7Seg(3); 
....................    //Led7[1][0] = Get7Seg(3); Led7[1][1] = Get7Seg(4); Led7[1][2] = Get7Seg(5); Led7[1][3] = Get7Seg(6); 
....................    //Led7[2][0] = Get7Seg(6); Led7[2][1] = Get7Seg(7); Led7[2][2] = Get7Seg(8); Led7[2][3] = Get7Seg(9); 
....................    //Led1[0] = 0xA5; Led1[1] = 0xA5; Led1[2] = 0xA5; 
....................    // Setup realtime clock: 
....................    hour = read_ds1307(2); 
....................    sec = read_ds1307(0); 
....................    if (sec & 0x80) {   // If clock is disabled 
....................       hour = read_ds1307(2); 
....................       hour &= 0xBF;     // Turn on 24 hour mode 
....................       write_ds1307(2, hour); 
....................       write_ds1307(0,sec & 0x7F); // enable oscillator(bit 7 =0) 
....................    } 
.................... } 
....................  
.................... void sclk_out(void) { 
....................    output_low(PIN_A3); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_A3); 
.................... } 
....................  
.................... void strb_out1(void) { 
....................    output_low(PIN_D1); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D1); 
.................... } 
....................  
.................... void strb_out2(void) { 
....................    output_low(PIN_D3); 
....................    #asm 
.................... //   NOP 
....................    #endasm 
....................    output_high(PIN_D3); 
.................... } 
....................  
.................... void Byte_Out_All(int8 data1, int8 data2) { 
....................    char i; 
....................    for(i=0; i<8; i++){ 
....................       output_bit(PIN_D0,shift_left(&data1,1,0)); 
....................       output_bit(PIN_D2,shift_left(&data2,1,0)); 
....................       sclk_out(); 
....................    } 
.................... } 
....................  
.................... void Led_Scan(void){ 
....................    led1[0] &= 0x87; 
....................    switch(index) { 
....................       case 0: 
....................          index = 1; 
....................          led1[0] |= 0x20; 
....................          Byte_Out_All(led7[2][1], led1[0]); 
....................          Byte_Out_All(led7[1][1], led1[1]); 
....................          Byte_Out_All(led7[0][1], led1[2]); 
....................          break; 
....................       case 1: 
....................          index = 2; 
....................          led1[0] |= 0x10; 
....................          Byte_Out_All(led7[2][2], led1[0]); 
....................          Byte_Out_All(led7[1][2], 0xFF); 
....................          Byte_Out_All(led7[0][2], 0xFF); 
....................          break; 
....................       case 2: 
....................          index = 3; 
....................          led1[0] |= 0x08; 
....................          Byte_Out_All(led7[2][3], led1[0]); 
....................          Byte_Out_All(led7[1][3], 0xFF); 
....................          Byte_Out_All(led7[0][3], 0xFF); 
....................          break; 
....................       case 3: 
....................          index = 4; 
....................          led1[0] |= 0x40; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 4: 
....................          index = 5; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 5: 
....................          index = 6; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       case 6: 
....................          index = 7; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          break; 
....................       default: 
....................          index = 0; 
....................          Byte_Out_All(led7[2][0], led1[0]); 
....................          Byte_Out_All(led7[1][0], 0xFF); 
....................          Byte_Out_All(led7[0][0], 0xFF); 
....................          //led1[0] |= 0x40; 
....................          break; 
....................    } 
....................    strb_out1(); 
....................    strb_out2(); 
.................... } 
....................  
.................... void SpeakerOn(void) { 
....................    Led1[0] &= 0x7F; 
.................... } 
....................  
.................... void SpeakerOff(void) { 
....................    spk_on_count = 0; 
....................    Led1[0] |= 0x80; 
.................... } 
....................  
.................... void LedClockOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
.................... } 
....................  
.................... void LedClockOff(void) { 
....................    Led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedSetTempOn(void) 
.................... { 
....................    led1[1] &= 0xFE; 
.................... } 
....................  
.................... void LedSetTempOff(void) { 
....................    Led1[1] |= 0x01; 
.................... } 
....................  
.................... void LedProtectTempOn(void) 
.................... { 
....................    led1[1] &= 0xFD; 
.................... } 
....................  
.................... void LedProtectTempOff(void) { 
....................    Led1[1] |= 0x02; 
.................... } 
....................  
.................... void LedTimeDelayOn(void) 
.................... { 
....................    led1[1] &= 0xFB; 
.................... } 
....................  
.................... void LedTimeDelayOff(void) { 
....................    Led1[1] |= 0x04; 
.................... } 
....................  
.................... void LedTimeSterOn(void) 
.................... { 
....................    led1[1] &= 0xF7; 
.................... } 
....................  
.................... void LedTimeSterOff(void) { 
....................    Led1[1] |= 0x08; 
.................... } 
....................  
.................... //============================================================================== 
....................  
.................... void LedTimeOn(void) 
.................... { 
....................    led1[4] &= 0x7F; 
.................... } 
....................  
.................... void LedTimeOff(void) 
.................... { 
....................    led1[4] |= 0x80; 
.................... } 
....................  
.................... void LedHeaterOn(void) 
.................... { 
....................    led1[3] &= 0xDF; 
.................... } 
....................  
.................... void LedHeaterOff(void) 
.................... { 
....................    led1[3] |= 0x20; 
.................... } 
....................  
.................... void LedAlarmOn(void) 
.................... { 
....................    led1[2] &= 0xFE; 
.................... } 
....................  
.................... void LedAlarmOff(void) 
.................... { 
....................    led1[2] |= 0x01; 
.................... } 
....................  
.................... void LedIconOn(void) 
.................... { 
....................    led1[2] &= 0xFD; 
.................... } 
....................  
.................... void LedMaxOn(void) 
.................... { 
....................    led1[2] &= 0xFB; 
.................... } 
.................... void LedMaxOff(void) 
.................... { 
....................    led1[2] |= 0x04; 
.................... } 
....................  
.................... void LedTempOn(void) 
.................... { 
....................    led1[3] &= 0xBF; 
.................... } 
....................  
.................... void LedTempOff(void) 
.................... { 
....................    led1[3] |= 0x40; 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
.................... /*void Led_1CDEF8_Off(void) { 
....................    //Led1 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
....................    //LedCDEF8 off: 
....................    tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x0E; 
....................    cap1188_write_data2(0x74, tmp); 
.................... }*/ 
.................... void Led_Prog_Off(void) { 
....................    //Led 1,2,3,4,5,6,7,8 Off: 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x00; 
....................    cap1188_write_data1(0x74, tmp); 
....................    //Led 9,10 off: 
....................    tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xC8; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
....................  
.................... void Led_0_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x01; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_0_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_1_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x02; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
....................  
.................... void Led_1_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_2_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x04; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_2_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_3_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x08; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_3_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_4_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x10; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_4_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xEF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_5_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x20; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_5_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_6_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x40; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_6_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_7_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp |= 0x80; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_7_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data1(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data1(0x74, tmp); 
.................... } 
.................... void Led_8_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x01; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_8_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFE; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_Dot_On(void)   //void Led_9_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x02; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_Dot_Off(void)  //void Led_9_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFD; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_A_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x04; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_A_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xFB; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x08; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_B_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xF7; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_C_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x10; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_C_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xEF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_D_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x20; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_D_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xDF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_E_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x40; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_E_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0xBF; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_F_On(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp |= 0x80; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
.................... void Led_F_Off(void) 
.................... { 
....................    int8 tmp = cap1188_read_data2(0x74); 
....................    tmp &= 0x7F; 
....................    cap1188_write_data2(0x74, tmp); 
.................... } 
....................  
.................... /* 
.................... ================================================================================ 
.................... */ 
....................  
.................... void Beep(unsigned int16 duration) 
.................... { 
....................    spk_on_count = duration; 
.................... } 
.................... /* 
.................... void ClrLed7(unsigned char mon) 
.................... { 
....................    Led7[mon][0] = 0x00;  //clear led 
....................    Led7[mon][1] = 0x00; 
....................    Led7[mon][2] = 0x00; 
....................    Led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... void SetDate(WEEKDAY date) { 
....................    unsigned char tmp; 
....................    tmp = led1[2]; 
....................    if ((SUNDAY <= date)&&(date <= SATURDAY)) { 
....................       tmp |= 0xFE;  // Turn off all leds for date indicator 
....................       switch(date) 
....................       { 
....................          case SUNDAY: 
....................             tmp &= 0xFD; 
....................             break; 
....................          case MONDAY: 
....................             tmp &= 0xFB; 
....................             break; 
....................          case TUESDAY: 
....................             tmp &= 0xF7; 
....................             break; 
....................          case WEDNESDAY: 
....................             tmp &= 0xEF; 
....................             break; 
....................          case THURSDAY: 
....................             tmp &= 0xDF; 
....................             break; 
....................          case FRIDAY: 
....................             tmp &= 0xBF; 
....................             break; 
....................          case SATURDAY: 
....................             tmp &= 0x7F; 
....................             break; 
....................       } 
....................       led1[2] = tmp; 
....................    } else { 
....................       led1[2] |= 0xFE; 
....................    } 
.................... } 
.................... /* 
.................... void PutDay(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
....................    SetDate((WEEKDAY)(day)); 
.................... } 
.................... */ 
.................... void PutDateTime(void) 
.................... { 
....................    day = read_ds1307(3)&0x07; 
....................    SetDate((WEEKDAY)(day)); 
....................    hour = read_ds1307(2);   // hour 
....................    led7[0][0] = Get7Seg(hour/0x10); 
....................    led7[0][1] = Get7Seg(hour&0x0F); 
....................    min = read_ds1307(1);   // min 
....................    led7[0][2] = Get7Seg(min/0x10); 
....................    led7[0][3] = Get7Seg(min&0x0F); 
.................... } 
.................... /* 
.................... void PutTime(unsigned char mon, unsigned char hour, unsigned char min) 
.................... { 
....................    led7[mon][0] = Get7Seg(hour/0x10); 
....................    led7[mon][1] = AddPoint(Get7Seg(hour&0x0F)); 
....................    led7[mon][2] = Get7Seg(min/0x10); 
....................    led7[mon][3] = Get7Seg(min&0x0F); 
.................... } 
.................... */ 
.................... void PutTime_DayHour(unsigned char mon, unsigned int16 time1, unsigned int16 time2) 
.................... { 
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(time1/10); 
....................       led7[mon][1] = AddPoint(Get7Seg(time1%10)); 
....................       led7[mon][2] = Get7Seg(time2/10); 
....................       led7[mon][3] = AddPoint(Get7Seg(time2%10)); 
.................... } 
....................  
.................... void PutTime_One(unsigned char mon, int16 time) 
.................... { 
....................    int8 hour, min; 
....................    hour = time / 60; 
....................    min = time % 60; 
....................    //if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) { 
....................       led7[mon][0] = Get7Seg(hour/10); 
....................       led7[mon][1] = AddPoint(Get7Seg(hour%10)); 
....................       led7[mon][2] = Get7Seg(min/10); 
....................       led7[mon][3] = Get7Seg(min%10); 
.................... } 
.................... /* 
.................... void PutTime_One_Blank(unsigned char mon) 
.................... { 
....................    led7[mon][0] = 0x00; 
....................    led7[mon][1] = 0x00; 
....................    led7[mon][2] = 0x00; 
....................    led7[mon][3] = 0x00; 
.................... } 
.................... */ 
.................... /* 
.................... void PutTemp(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    if (temp >= 10000) { 
....................       led7[mon][0] = Get7Seg(temp / 10000); 
....................       led7[mon][1] = Get7Seg((temp%10000) / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((temp%100) / 10); 
....................    } else { 
....................       led7[mon][0] = Get7Seg(temp / 1000); 
....................       led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................       led7[mon][2] = Get7Seg((temp%100) / 10); 
....................       led7[mon][3] = Get7Seg(temp % 10);    
....................    } 
.................... } 
.................... */ 
.................... void PutTempSign(unsigned char mon, signed int16 temp) 
.................... { 
....................    if (temp >= 0) { 
....................       if (temp >= 10000) { 
....................          led7[mon][0] = Get7Seg(temp / 10000); 
....................          led7[mon][1] = Get7Seg((temp%10000) / 1000); 
....................          led7[mon][2] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................          led7[mon][3] = Get7Seg((temp%100) / 10); 
....................       } else { 
....................          led7[mon][0] = Get7Seg(temp / 1000); 
....................          led7[mon][1] = AddPoint(Get7Seg((temp%1000) / 100)); 
....................          led7[mon][2] = Get7Seg((temp%100) / 10); 
....................          //led7[mon][3] = Get7Seg(temp % 10);   
....................          led7[mon][3] = Get7Seg(0);    
....................       } 
....................    } else { 
....................       led7[mon][0] = 0x80; 
....................       led7[mon][1] = Get7Seg(-temp / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((-temp%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((-temp%100) / 10); 
....................    } 
.................... } 
....................  
.................... void PutOffset(unsigned char mon, signed int16 offset) 
.................... { 
....................    if (offset >= 0) { 
....................       led7[mon][0] = Get7Seg(offset / 10000); 
....................       led7[mon][1] = Get7Seg((offset%10000) / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((offset%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((offset%100) / 10); 
....................    } else { 
....................       led7[mon][0] = 0x80; 
....................       led7[mon][1] = Get7Seg(-offset / 1000); 
....................       led7[mon][2] = AddPoint(Get7Seg((-offset%1000) / 100)); 
....................       led7[mon][3] = Get7Seg((-offset%100) / 10); 
....................    } 
.................... } 
....................  
.................... void PutPid(unsigned char mon, unsigned int16 temp) 
.................... { 
....................    tmp %= 10000; 
....................    led7[mon][0] = Get7Seg(0); 
....................    led7[mon][1] = Get7Seg(temp / 100); 
....................    led7[mon][2] = Get7Seg((temp%100) / 10); 
....................    led7[mon][3] = Get7Seg(temp % 10);    
.................... } 
....................  
.................... void PutSign(unsigned char mon, Sign_CODE sign) 
.................... { 
....................    switch (sign) 
....................    { 
....................       case SIGN_SENSOR_BROKEN: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = Get7Seg(1); 
....................          g_err_code = 1; 
....................          break; 
....................       case SIGN_TEMP_OVERLOAD: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = Get7Seg(2); 
....................          g_err_code = 2; 
....................          break; 
....................       case SIGN_SET_PID_KP: 
....................          led7[mon][0] = 0xDC; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_SET_PID_KI: 
....................          led7[mon][0] = 0x44; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_SET_PID_KD: 
....................          led7[mon][0] = 0x8F; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          break; 
....................       case SIGN_PROCESS_END: 
....................          led7[mon][0] = 0xD6; 
....................          led7[mon][2] = 0xAF; 
....................          led7[mon][3] = 0x00; 
....................          led7[mon][1] = 0x85; 
....................          break; 
....................       case SIGN_T2: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(2); //'2' 
....................          break; 
....................        case SIGN_T3: 
....................          led7[mon][0] = 0x00;       
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(3); //'3' 
....................          break; 
....................        case SIGN_T4: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(4); //'4' 
....................          break; 
....................        case SIGN_T5: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(5); //'5' 
....................          break; 
....................       case SIGN_T6: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(6); //'6' 
....................          break; 
....................        case SIGN_T7: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x54;       //'T' 
....................          led7[mon][3] = Get7Seg(7); //'7' 
....................          break; 
....................        case SIGN_CN: 
....................          led7[mon][0] = 0x00;        
....................          led7[mon][1] = 0x00;        
....................          led7[mon][2] = 0x56;      //'C' 
....................          led7[mon][3] = 0x85;      //'N' 
....................          break; 
....................        case SIGN_ALL: 
....................          led7[mon][0] = 0x00;       
....................          led7[mon][1] = 0xDD;     //'A'   
....................          led7[mon][2] = 0x46;     //'L'   
....................          led7[mon][3] = 0x46;     //'L' 
....................          break; 
....................       case SIGN_BLANK: 
....................          led7[mon][0] = 0x00; 
....................          led7[mon][1] = 0x00; 
....................          led7[mon][2] = 0x00; 
....................          led7[mon][3] = 0x00; 
....................          break; 
....................    } 
....................     
.................... } 
....................  
.................... void SetPhaseIndicator(PROCESS_PHASE phase) 
.................... { 
....................    unsigned char tmp; 
....................    tmp = led1[3]; 
....................    if ((WAITING_PHASE <= phase)&&(phase <= IDLE_PHASE)) { 
....................       tmp |= 0x1F;  // Turn off all leds for phase indicator 
....................       switch(phase) 
....................       { 
....................          case WAITING_PHASE: 
....................             tmp &= 0xFE; 
....................             break; 
....................          case HEAT_RISING_PHASE: 
....................             tmp &= 0xFD; 
....................             break; 
....................          case HEAT_HOLDING_PHASE: 
....................             tmp &= 0xFB; 
....................             break; 
....................          case HEAT_FALLING_PHASE: 
....................             tmp &= 0xF7; 
....................             break; 
....................          case IDLE_PHASE: 
....................             tmp &= 0xEF; 
....................             PutSign(1, SIGN_PROCESS_END); 
....................             break; 
....................       } 
....................       led1[3] = tmp; 
....................    } 
.................... } 
....................  
.................... void SetStateIndicator(STATE state) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[0]; 
....................    tmp2 = led1[1]; 
....................    tmp1 |= 0x03;  //  
....................    tmp2 |= 0xE0; 
....................    if ((ST_IDLE < state)&&(state < TOTAL_NUMBER_OF_STATE)) { 
....................       switch(state) 
....................       { 
....................          case ST_SET_TIMER: 
....................          case ST_SET_WAIT_TIME: 
....................             tmp2 &= 0xBF; 
....................             break; 
....................          case ST_SET_PID_KP: 
....................          case ST_SET_HOLD_TIME: 
....................             tmp2 &= 0x7F; 
....................             break; 
....................          case ST_SET_PID_KI: 
....................          case ST_SET_SETPOINT: 
....................             tmp1 &= 0xFE; 
....................             break; 
....................          case ST_SET_PID_KD: 
....................          case ST_SET_PROTECT: 
....................             tmp1 &= 0xFD; 
....................             break; 
....................       } 
....................       led1[0] = tmp1; 
....................       led1[1] = tmp2; 
....................    } 
.................... } 
....................  
.................... void LedFanOn1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF; 
.................... } 
.................... void LedFanOn2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xDF; 
.................... } 
.................... void LedFanOn3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xBF; 
.................... } 
.................... void LedFanOn4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x7F; 
.................... } 
....................  
.................... void LedFanLow(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF; 
.................... } 
....................  
.................... void LedFanMedium(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF; 
.................... } 
....................  
.................... void LedFanHigh(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x8F; 
.................... } 
....................  
....................  
.................... void LedFanOnAll(void) 
.................... { 
....................    led1[1] &= 0x0F; 
.................... } 
....................  
.................... void LedFanOffAll(void) 
.................... { 
....................    led1[1] |= 0xF0; 
.................... } 
....................  
.................... void LedFan1(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xEF;  //1110 
.................... } 
.................... void LedFan2(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xCF;  //1100 
.................... } 
.................... void LedFan3(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xDF;  //1101 
.................... } 
.................... void LedFan4(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x9F;  //1001 
.................... } 
.................... void LedFan5(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0xBF;  //1011 
.................... } 
.................... void LedFan6(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x3F;  //0011 
.................... } 
.................... void LedFan7(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x7F;  //0111 
.................... } 
.................... void LedFan8(void) 
.................... { 
....................    led1[1] |= 0xF0; 
....................    led1[1] &= 0x6F;  //0110 
.................... } 
....................  
.................... void SetFanSimulator1(void) 
.................... { 
....................    if (fan_rol_count == 0) 
....................    { 
....................       switch(fan_pos) 
....................       { 
....................          case 0: 
....................             LedFan1(); 
....................             fan_pos = 1; 
....................             break; 
....................          case 1: 
....................             LedFan2(); 
....................             fan_pos = 2; 
....................             break; 
....................          case 2: 
....................             LedFan3(); 
....................             fan_pos = 3; 
....................             break; 
....................          case 3: 
....................             LedFan4(); 
....................             fan_pos = 4; 
....................             break; 
....................          case 4: 
....................             LedFan5(); 
....................             fan_pos = 5; 
....................             break; 
....................          case 5: 
....................             LedFan6(); 
....................             fan_pos = 6; 
....................             break; 
....................          case 6: 
....................             LedFan7(); 
....................             fan_pos = 7; 
....................             break; 
....................          default: 
....................             LedFan8(); 
....................             fan_pos = 0; 
....................             break; 
....................       } 
....................       fan_rol_count = 6-fan_speed; 
....................    } 
.................... } 
....................  
.................... void SetFanSimulator(void) 
.................... { 
....................    if (fan_rol_count == 0) 
....................    { 
....................       switch(fan_pos) 
....................       { 
....................          case 0: 
....................             LedFanOn1(); 
....................             fan_pos = 1; 
....................             break; 
....................          case 1: 
....................             LedFanOn2(); 
....................             fan_pos = 2; 
....................             break; 
....................          case 2: 
....................             LedFanOn3(); 
....................             fan_pos = 3; 
....................             break; 
....................          default: 
....................             LedFanOn4(); 
....................             fan_pos = 0; 
....................             break; 
....................       } 
....................       fan_rol_count = 25-fan_speed*2; 
....................    } 
.................... } 
....................  
.................... void SetFanIndicator(unsigned char level) 
.................... { 
....................    unsigned char tmp1; 
....................    unsigned char tmp2; 
....................    tmp1 = led1[1] | 0x1F; 
....................    tmp2 = led1[2] | 0xF8; 
....................    if (level > 0) { 
....................       tmp2 &= 0xF7; 
....................       if (level > 1) { 
....................          tmp2 &= 0xEF; 
....................          if (level > 2) { 
....................             tmp2 &= 0xDF; 
....................             if (level > 3) { 
....................                tmp2 &= 0xBF; 
....................                if (level > 4) { 
....................                   tmp2 &= 0x7F; 
....................                   if (level > 5) { 
....................                      tmp1 &= 0xFE; 
....................                      if (level > 6) { 
....................                         tmp1 &= 0xFD; 
....................                         if (level > 7) { 
....................                            tmp1 &= 0xFB; 
....................                            if (level > 8) { 
....................                               tmp1 &= 0xF7; 
....................                               if (level > 9) { 
....................                                  tmp1 &= 0xEF; 
....................                               }  //9 
....................                            }  //8 
....................                         }  //7 
....................                      }  //6 
....................                   }  //5 
....................                }  //4 
....................             }  //3 
....................          }  //2 
....................       }  //1 
....................    }  //0 
....................    led1[1] = tmp1; 
....................    led1[2] = tmp2; 
.................... } 
....................  
....................  
.................... #endif //#define _LEDS_H_ 
....................  
.................... #include "keys.h" 
.................... #ifndef _KEYS_H_ 
.................... #define _KEYS_H_ 
....................  
.................... #include "globals.h" 
.................... #include "cap1188.h" 
....................  
.................... unsigned char Get_Key_Code(void); 
.................... unsigned char kthit(void); 
....................  
.................... #inline 
.................... void key_init(void) 
.................... { 
....................    cap1188_init(); 
....................    //Only press generate interrupt, release doesn't: 
....................    //cap1188_write_data1(0x44, 0x41); 
....................    //cap1188_write_data2(0x44, 0x41); 
....................    //Press and hold does not generate key repeatedly; only the Up/Down keys are 
....................    // configured for repeatable: 
....................    //cap1188_write_data1(0x28, 0xF0); 
....................    //cap1188_write_data2(0x28, 0x00); 
....................    //Automatic Recalibration: 
....................    cap1188_write_data1(0x20, 0x28); 
....................    cap1188_write_data2(0x20, 0x28); 
....................    //Automatic Recalibration after press and hold for 11200ms: 
....................    //cap1188_write_data1(0x22, 0xF4); 
....................    //cap1188_write_data2(0x22, 0xF4); 
....................    //Touch is linked to LED for Touch 2,3,4,5,6,7 
....................    //cap1188_write_data1(0x72, 0xFC); 
....................    //cap1188_write_data2(0x72, 0x0E); 
....................    //Touch is not linked to any LED 
....................    //cap1188_write_data1(0x72, 0x00); 
....................    //cap1188_write_data2(0x72, 0x00); 
....................    //Touch is not linked to 'CLEAR'(B), 'DOWN'(E), 'UP'(F) 
....................    cap1188_write_data1(0x72, 0x00); 
....................    cap1188_write_data2(0x72, 0xC8); 
....................    //Touch Led duty cycle reduced to 7%-0% 
....................    cap1188_write_data1(0x93, 0x00); 
....................    cap1188_write_data2(0x93, 0x00); 
....................    //Set sensitivity to X64 
....................    //cap1188_write_data1(0x1F, 0x1F); 
....................    //cap1188_write_data2(0x1F, 0x1F); 
....................    key_flag = 0; 
....................    key_state = STATE_KEY_IDLE; 
....................    key_hold_count = 0; 
....................    key_repeat_count = 0; 
....................    key_code = 0xFF; 
....................     
.................... } 
....................  
.................... #inline 
.................... void key_scan(void) { 
....................    cap1188_write_data1(0, 0); 
....................    cap1188_write_data2(0, 0); 
....................    touch_state1 = cap1188_read_data1(3); 
....................    touch_state2 = cap1188_read_data2(3); 
....................    switch(key_state) { 
....................       case STATE_KEY_IDLE: 
....................          if (touch_state1 | touch_state2) { 
....................             key_state = STATE_KEY_PRESSED; 
....................             key_code = Get_Key_Code(); 
....................             key_hold_count = 0; 
....................          } 
....................          break; 
....................       case STATE_KEY_PRESSED: 
....................          if (touch_state1 | touch_state2) { 
....................             key_hold_count += 1; 
....................             if (key_hold_count > KEY_HOLD_THRESHOLD) { 
....................                key_state = STATE_KEY_HOLD; 
....................             } 
....................          } else { 
....................             key_flag = 1; 
....................             key_state = STATE_KEY_IDLE; 
....................             key_hold_count = 0; 
....................             key_repeat_count = 0; 
....................          } 
....................          break; 
....................       case STATE_KEY_HOLD: 
....................          if (touch_state1 | touch_state2) { 
....................             key_repeat_count += 1; 
....................             if (key_repeat_count > KEY_REPEAT_TIME) { 
....................                switch (key_code) { 
....................                  /* case '7': 
....................                   case '6': 
....................                   case '5': 
....................                   case '4': 
....................                      key_flag = 1; 
....................                      key_repeat_count = 0; 
....................                      break;*/ 
....................                   //case '0': 
....................                      //key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //break; 
....................                   case '0': 
....................                      key_flag = 1; 
....................                      key_code = 'b'; 
....................                      break; 
....................                   case '1': 
....................                      key_flag = 1; 
....................                      key_code = 'e'; 
....................                      break; 
....................                   case '2': 
....................                      key_flag = 1; 
....................                      key_code = 'f'; 
....................                      break; 
....................                   case 'B': 
....................                      key_flag = 1; 
....................                      key_code = 'h'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'A': 
....................                      key_flag = 1; 
....................                      key_code = 'a'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'C': 
....................                     // key_flag = 1; 
....................                      //key_code = 'c'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'D': 
....................                      key_flag = 1; 
....................                      key_code = 'd'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'E': 
....................                      //key_flag = 1; 
....................                      //key_code = 'e'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                   case 'F': 
....................                      //key_flag = 1; 
....................                      //key_code = 'f'; 
....................                      //key_state = STATE_KEY_IDLE; 
....................                      break; 
....................                } 
....................             } 
....................          } else { 
....................             //key_flag = 1; 
....................             key_state = STATE_KEY_IDLE; 
....................             key_hold_count = 0; 
....................             key_repeat_count = 0; 
....................          } 
....................          break; 
....................    } 
.................... } 
....................  
.................... unsigned char kthit(void) 
.................... { 
....................    touch_state1 = 0x01 & cap1188_read_data1(0); 
....................    if (touch_state1) { 
....................       touch_state1 = cap1188_read_data1(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data1(0, 0); 
....................       return key_code; 
....................    } 
....................    touch_state2 = 0x01 & cap1188_read_data2(0); 
....................    if (touch_state2) { 
....................       touch_state2 = cap1188_read_data2(3); 
....................       key_code = Get_Key_Code(); 
....................       cap1188_write_data2(0, 0); 
....................       return key_code; 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... unsigned char Get_Key_Code(void) 
.................... { 
....................    if(touch_state1) { 
....................       switch(touch_state1) 
....................       { 
....................          case 0x01: 
....................             return '0';   // 0 
....................          case 0x02: 
....................             return '1';   // 1 
....................          case 0x04: 
....................             return '2';   // 2 
....................          case 0x08: 
....................             return '3';   // 3 
....................          case 0x10: 
....................             return '4';   // 4 
....................          case 0x20: 
....................             return '5';   // 5 
....................          case 0x40: 
....................             return '6';   // 6 
....................          case 0x80: 
....................             return '7';   // 7 
....................          default: 
....................             return 128; 
....................       } 
....................    } else { 
....................       switch(touch_state2) 
....................       { 
....................          case 0x01: 
....................             return '8';   // 8 
....................          case 0x02: 
....................             return '9';   // 9 
....................          case 0x04: 
....................             return 'A';   // A 
....................          case 0x08: 
....................             return 'B';   // B 
....................          case 0x10: 
....................             return 'C';   // C 
....................          case 0x20: 
....................             return 'D';   // D 
....................          case 0x40: 
....................             return 'E';   // E 
....................          case 0x80: 
....................             return 'F';   // F 
....................          default: 
....................             return 128; 
....................       } 
....................    } 
.................... } 
....................  
.................... #endif //#define _KEYS_H_ 
....................  
....................  
.................... //#include "adc.h" 
.................... //#include "triac.h" 
.................... #include "rtcc.h" 
.................... #ifndef _RTCC_H_ 
.................... #define _RTCC_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #int_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................    if (spk_on_count > 0) { 
....................       spk_on_count--; 
....................       SpeakerOn(); 
....................    } else { 
....................       SpeakerOff(); 
....................    } 
....................    if (fan_rol_count > 0) 
....................    { 
....................       fan_rol_count--; 
....................    } 
....................    if (temp_accum_count > 0){ 
....................       temp_accum_count--; 
....................    } 
....................    if (timed_count_ms > 0) { 
....................       timed_count_ms--; 
....................       if(125 == timed_count_ms) { 
....................          led7[0][1] |= 0x20; 
....................          if (g_state != ST_COMPLETED) 
....................             led7[2][1] |= 0x20; 
....................       } 
....................    } else { 
....................       timed_count_ms = 250; 
....................       if (pid_countdown > 0){ 
....................          pid_countdown--; 
....................       } 
....................       led7[0][1] &= 0xDF; 
....................       led7[2][1] &= 0xDF; 
....................    } 
....................     
....................    key_scan(); 
....................    adc_scan(); 
....................    triac_scan(); 
....................    Led_Scan(); 
....................  
.................... } 
....................  
.................... void RTCC_init(void) 
.................... { 
....................    setup_wdt(WDT_OFF); 
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit); //2.7 ms cycle 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit); //5.4 ms cycle 
....................    setup_timer_1(T1_DISABLED); 
....................    //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
....................    setup_timer_2(T2_DISABLED,0,1); 
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
....................    setup_comparator(NC_NC_NC_NC); 
....................    setup_vref(FALSE); 
....................    setup_psp(PSP_DISABLED); 
....................    enable_interrupts(INT_RTCC); 
....................    enable_interrupts(GLOBAL); 
.................... } 
....................  
.................... #endif   //#define _RTCC_H_ 
....................  
....................  
.................... #include "cap1188.h" 
.................... #ifndef _CAP1188_H_ 
.................... #define _CAP1188_H_ 
....................  
.................... #include "globals.h" 
....................  
.................... #use fast_io(C) 
....................  
.................... #define CAP_RESET    PIN_C0 
.................... #define CAP_CS1      PIN_D4 
.................... #define CAP_CS2      PIN_D5 
.................... #define CAP_CLK      PIN_C3 
.................... #define CAP_MOSI     PIN_C4 
.................... #define CAP_MISO     PIN_C5 
....................  
.................... #inline 
.................... void cap1188_reset(void) 
.................... { 
....................    output_low(CAP_CS1); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    // 
....................    output_low(CAP_CS2); 
....................    output_low(CAP_RESET); 
....................    delay_ms(10); 
....................    output_high(CAP_RESET); 
....................    delay_ms(100); 
....................    output_low(CAP_RESET); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... /* 
.................... void cap1188_clr_int(void) 
.................... { 
....................     
.................... } 
....................  
.................... void cap1188_reset_interface(void) 
.................... {    
....................    output_low(CAP_CS1); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS1); 
....................    delay_ms(1); 
....................    output_low(CAP_CS2); 
....................    delay_ms(1); 
....................    spi_write(0x7A); 
....................    spi_write(0x7A); 
....................    delay_ms(1); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... void cap1188_set_address_ptr1(int8 adr) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_set_address_ptr2(int8 adr) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(1); 
....................    spi_write(0x7D); 
....................    spi_write(adr); 
....................    delay_us(1); 
....................    output_high(CAP_CS2); 
.................... } 
.................... */ 
.................... void cap1188_write_data1(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
.................... } 
....................  
.................... void cap1188_write_data2(int8 addr, int8 data) 
.................... { 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7E); 
....................    spi_write(data); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
.................... } 
....................  
.................... int8 cap1188_read_data1(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS1); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS1); 
....................    return data; 
.................... } 
....................  
.................... int8 cap1188_read_data2(int8 addr) 
.................... { 
....................    int8 data; 
....................    output_low(CAP_CS2); 
....................    delay_us(10); 
....................    spi_write(0x7D); 
....................    spi_write(addr); 
....................    delay_us(10); 
....................    spi_write(0x7F); 
....................    data = spi_read(0x7F); 
....................    delay_us(10); 
....................    output_high(CAP_CS2); 
....................    return data; 
.................... } 
.................... /* 
.................... void cap1188_disable_int(void) 
.................... { 
....................    cap1188_write_data1(0x27, 0x00); 
....................    cap1188_write_data2(0x27,0x00); 
.................... } 
....................  
.................... void cap1188_disable_ret(void) 
.................... { 
....................    cap1188_write_data1(0x28, 0x00); 
....................    cap1188_write_data2(0x28, 0x00); 
.................... } 
.................... */ 
.................... void cap1188_init(void) 
.................... { 
....................    delay_ms(100); 
....................    cap1188_reset(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... /*void cap1188_clr_int1(void) 
.................... { 
....................    cap1188_write_data1(0, 0); 
.................... } 
....................  
.................... void cap1188_clr_int2(void) 
.................... { 
....................    cap1188_write_data2(0, 0); 
.................... }*/ 
....................  
.................... #endif   // #define _CAP1188_H_ 
....................  
....................  
.................... float TempPrint = 0; 
.................... static unsigned char min_rs232, last_min_rs232; 
.................... //static unsigned char flag_Err = 0; 
.................... //static unsigned char flag_Recv = 0; 
.................... //static unsigned char flag_Completed = 0; 
.................... //static unsigned char flag_Rs232_Complete = 0; 
.................... //unsigned char ch; 
.................... //int s[1]; 
.................... int8 code_program = 0; 
.................... void Process_Rs232(void) { 
*
5760:  CLRF   19
5762:  BTFSC  FF2.7
5764:  BSF    19.7
5766:  BCF    FF2.7
....................     TempPrint = (float)(realTemp / 100.00); 
5768:  MOVFF  6A,107
576C:  MOVFF  69,106
5770:  CALL   0362
5774:  BTFSC  19.7
5776:  BSF    FF2.7
5778:  CLRF   19
577A:  BTFSC  FF2.7
577C:  BSF    19.7
577E:  BCF    FF2.7
5780:  MOVFF  03,10D
5784:  MOVFF  02,10C
5788:  MOVFF  01,10B
578C:  MOVFF  00,10A
5790:  MOVLB  1
5792:  CLRF   x11
5794:  CLRF   x10
5796:  MOVLW  48
5798:  MOVWF  x0F
579A:  MOVLW  85
579C:  MOVWF  x0E
579E:  MOVLB  0
57A0:  CALL   0508
57A4:  BTFSC  19.7
57A6:  BSF    FF2.7
57A8:  MOVFF  03,CE
57AC:  MOVFF  02,CD
57B0:  MOVFF  01,CC
57B4:  MOVFF  00,CB
....................     min_rs232 = min; 
57B8:  MOVFF  4E,CF
....................     if (1 == flag_Rs232 && ((BCD2Dec(hour) == wait_hour) && (BCD2Dec(min) == wait_min) || (0 == user_delay_time)) && ((BCD2Dec(day) == wait_day) || (0 == wait_day))) { 
57BC:  DECFSZ xC0,W
57BE:  BRA    590C
57C0:  MOVFF  4F,DE
57C4:  RCALL  53C8
57C6:  MOVF   5C,W
57C8:  SUBWF  01,W
57CA:  BNZ   57D8
57CC:  MOVFF  4E,DE
57D0:  RCALL  53C8
57D2:  MOVF   5D,W
57D4:  SUBWF  01,W
57D6:  BZ    57E4
57D8:  MOVF   56,F
57DA:  BTFSS  FD8.2
57DC:  BRA    590C
57DE:  MOVF   57,F
57E0:  BTFSS  FD8.2
57E2:  BRA    590C
57E4:  MOVFF  50,DE
57E8:  RCALL  53C8
57EA:  MOVF   5E,W
57EC:  SUBWF  01,W
57EE:  BZ    57F6
57F0:  MOVF   5E,F
57F2:  BTFSS  FD8.2
57F4:  BRA    590C
....................         puts("    BAO CAO SO LIEU ME SAY\r\nNGAY/THANG/NAM:\r\nDON VI SU DUNG:\r\nDIA CHI:\r\nNGUOI VAN HANH:\r\nMODEL:NIHOPHAWA OS53"); 
57F6:  MOVLW  64
57F8:  MOVWF  FF6
57FA:  MOVLW  0B
57FC:  MOVWF  FF7
57FE:  RCALL  53E6
5800:  MOVLW  0D
5802:  BTFSS  F9E.4
5804:  BRA    5802
5806:  MOVWF  FAD
5808:  MOVLW  0A
580A:  BTFSS  F9E.4
580C:  BRA    580A
580E:  MOVWF  FAD
....................         printf("SERI:\r\n"); 
5810:  MOVLW  D2
5812:  MOVWF  FF6
5814:  MOVLW  0B
5816:  MOVWF  FF7
5818:  RCALL  5408
....................         //printf("SERI:OS53102"); 
....................         //printf("%d%d%d%d\r\n",(int8)(seri/1000),(int8)(seri%1000)/100,(int8)(seri%100)/10,(int8)(seri%10)); 
....................         //printf("%d%d%d%d\r\n",1,(int8)(seri%1000)/100,(int8)(seri%100)/10,(int8)(seri%10)); 
....................         // if(seri < 10) { 
....................         //     printf("000%d\r\n",(int8)(seri%10)); 
....................         // } 
....................         // if(seri >= 10 && seri < 100) { 
....................         //     printf("00%d%d\r\n",(int8)(seri/10),(int8)(seri%10)); 
....................         // } 
....................         // if(seri >= 100 && seri < 1000) { 
....................         //     printf("0%d%d\r\n",(int8)(seri/100),(int8)(seri%100)); 
....................         // } 
....................         // if(seri >= 1000) { 
....................         //     printf("%d%d\r\n",(int8)(seri/100),(int8)(seri%100)); 
....................         // } 
....................         printf("CHUONG TRINH SU DUNG: "); 
581A:  MOVLW  DA
581C:  MOVWF  FF6
581E:  MOVLW  0B
5820:  MOVWF  FF7
5822:  RCALL  5408
....................         if(g_mode != USER_MODE) { 
5824:  MOVF   3A,W
5826:  SUBLW  0B
5828:  BZ    5896
....................             switch(g_mode) { 
582A:  MOVLW  01
582C:  SUBWF  3A,W
582E:  ADDLW  F6
5830:  BC    5872
5832:  ADDLW  0A
5834:  GOTO   5C4E
....................                 case PROGRAM1: 
....................                 //s = "P1"; 
....................                 code_program = 1; 
5838:  MOVLW  01
583A:  MOVWF  xD1
....................                 break; 
583C:  BRA    5872
....................                 case PROGRAM2: 
....................                 //s = "P2"; 
....................                 code_program = 2; 
583E:  MOVLW  02
5840:  MOVWF  xD1
....................                 break; 
5842:  BRA    5872
....................                 case PROGRAM3: 
....................                 //s = "P3"; 
....................                 code_program = 3; 
5844:  MOVLW  03
5846:  MOVWF  xD1
....................                 break; 
5848:  BRA    5872
....................                 case PROGRAM4: 
....................                 //s = "P4"; 
....................                 code_program = 4; 
584A:  MOVLW  04
584C:  MOVWF  xD1
....................                 break; 
584E:  BRA    5872
....................                 case PROGRAM5: 
....................                 //s = "P5"; 
....................                 code_program = 5; 
5850:  MOVLW  05
5852:  MOVWF  xD1
....................                 break; 
5854:  BRA    5872
....................                 case PROGRAM6: 
....................                 //s = "P6"; 
....................                 code_program = 6; 
5856:  MOVLW  06
5858:  MOVWF  xD1
....................                 break; 
585A:  BRA    5872
....................                 case PROGRAM7: 
....................                 //s = "P7"; 
....................                 code_program = 7; 
585C:  MOVLW  07
585E:  MOVWF  xD1
....................                 break; 
5860:  BRA    5872
....................                 case PROGRAM8: 
....................                 //s = "P8"; 
....................                 code_program = 8; 
5862:  MOVLW  08
5864:  MOVWF  xD1
....................                 break; 
5866:  BRA    5872
....................                 case PROGRAM9: 
....................                 //s = "P9"; 
....................                 code_program = 9; 
5868:  MOVLW  09
586A:  MOVWF  xD1
....................                 break; 
586C:  BRA    5872
....................                 case PROGRAM10: 
....................                 //s = "P10"; 
....................                 code_program = 10; 
586E:  MOVLW  0A
5870:  MOVWF  xD1
....................                 break; 
....................             } 
....................             printf("P%d\r\n",code_program); 
5872:  MOVLW  50
5874:  BTFSS  F9E.4
5876:  BRA    5874
5878:  MOVWF  FAD
587A:  MOVFF  D1,DF
587E:  MOVLW  18
5880:  MOVWF  xE0
5882:  RCALL  542A
5884:  MOVLW  0D
5886:  BTFSS  F9E.4
5888:  BRA    5886
588A:  MOVWF  FAD
588C:  MOVLW  0A
588E:  BTFSS  F9E.4
5890:  BRA    588E
5892:  MOVWF  FAD
....................         } 
5894:  BRA    58A0
....................         else printf("User\r\n"); 
5896:  MOVLW  F2
5898:  MOVWF  FF6
589A:  MOVLW  0B
589C:  MOVWF  FF7
589E:  RCALL  5408
....................         printf("THOI GIAN BAT DAU %d:%d:%d\r\n",BCD2Dec(hour), BCD2Dec(min), BCD2Dec(sec)); 
58A0:  MOVFF  4F,DE
58A4:  RCALL  53C8
58A6:  MOVFF  01,DC
58AA:  MOVFF  4E,DE
58AE:  RCALL  53C8
58B0:  MOVFF  01,DD
58B4:  MOVFF  4D,DE
58B8:  RCALL  53C8
58BA:  MOVFF  01,DE
58BE:  MOVLW  FA
58C0:  MOVWF  FF6
58C2:  MOVLW  0B
58C4:  MOVWF  FF7
58C6:  MOVLW  12
58C8:  MOVWF  xDF
58CA:  RCALL  54E0
58CC:  MOVFF  DC,DF
58D0:  MOVLW  18
58D2:  MOVWF  xE0
58D4:  RCALL  542A
58D6:  MOVLW  3A
58D8:  BTFSS  F9E.4
58DA:  BRA    58D8
58DC:  MOVWF  FAD
58DE:  MOVFF  DD,DF
58E2:  MOVLW  18
58E4:  MOVWF  xE0
58E6:  RCALL  542A
58E8:  MOVLW  3A
58EA:  BTFSS  F9E.4
58EC:  BRA    58EA
58EE:  MOVWF  FAD
58F0:  MOVFF  DE,DF
58F4:  MOVLW  18
58F6:  MOVWF  xE0
58F8:  RCALL  542A
58FA:  MOVLW  0D
58FC:  BTFSS  F9E.4
58FE:  BRA    58FC
5900:  MOVWF  FAD
5902:  MOVLW  0A
5904:  BTFSS  F9E.4
5906:  BRA    5904
5908:  MOVWF  FAD
....................         flag_Rs232 = 0; 
590A:  CLRF   xC0
....................     } 
....................     if (g_state == ST_RUN_HOLDING_TIME) { 
590C:  MOVF   38,W
590E:  SUBLW  1B
5910:  BTFSS  FD8.2
5912:  BRA    5A14
....................         if(min_rs232 != last_min_rs232) { 
5914:  MOVF   xD0,W
5916:  SUBWF  xCF,W
5918:  BTFSC  FD8.2
591A:  BRA    5A14
....................             last_min_rs232 = min_rs232; 
591C:  MOVFF  CF,D0
....................             if (1 == flag_Rs232_Ster) { 
5920:  DECFSZ xC1,W
5922:  BRA    5930
....................                 flag_Rs232_Ster = 0; 
5924:  CLRF   xC1
....................                 printf("NHIET DO(oC)      THOI GIAN\r\n"); 
5926:  MOVLW  18
5928:  MOVWF  FF6
592A:  MOVLW  0C
592C:  MOVWF  FF7
592E:  RCALL  5408
5930:  CLRF   19
5932:  BTFSC  FF2.7
5934:  BSF    19.7
5936:  BCF    FF2.7
....................             } 
....................             if (TempPrint >= 100.00) printf(" %.1f",TempPrint); 
5938:  MOVLB  1
593A:  CLRF   x09
593C:  CLRF   x08
593E:  MOVLW  48
5940:  MOVWF  x07
5942:  MOVLW  85
5944:  MOVWF  x06
5946:  MOVFF  CE,10D
594A:  MOVFF  CD,10C
594E:  MOVFF  CC,10B
5952:  MOVFF  CB,10A
5956:  MOVLB  0
5958:  CALL   0398
595C:  BTFSC  19.7
595E:  BSF    FF2.7
5960:  BC    5964
5962:  BNZ   5988
5964:  MOVLW  20
5966:  BTFSS  F9E.4
5968:  BRA    5966
596A:  MOVWF  FAD
596C:  MOVLW  89
596E:  MOVWF  FE9
5970:  MOVFF  CE,DF
5974:  MOVFF  CD,DE
5978:  MOVFF  CC,DD
597C:  MOVFF  CB,DC
5980:  MOVLW  01
5982:  MOVWF  xE0
5984:  RCALL  55CE
5986:  BRA    59AA
....................             else printf(" %.2f", TempPrint); 
5988:  MOVLW  20
598A:  BTFSS  F9E.4
598C:  BRA    598A
598E:  MOVWF  FAD
5990:  MOVLW  89
5992:  MOVWF  FE9
5994:  MOVFF  CE,DF
5998:  MOVFF  CD,DE
599C:  MOVFF  CC,DD
59A0:  MOVFF  CB,DC
59A4:  MOVLW  02
59A6:  MOVWF  xE0
59A8:  RCALL  55CE
....................             printf("             %d:%d:%d\r\n",BCD2Dec(hour), BCD2Dec(min), BCD2Dec(sec)); 
59AA:  MOVFF  4F,DE
59AE:  RCALL  53C8
59B0:  MOVFF  01,DC
59B4:  MOVFF  4E,DE
59B8:  RCALL  53C8
59BA:  MOVFF  01,DD
59BE:  MOVFF  4D,DE
59C2:  RCALL  53C8
59C4:  MOVFF  01,DE
59C8:  MOVLW  36
59CA:  MOVWF  FF6
59CC:  MOVLW  0C
59CE:  MOVWF  FF7
59D0:  MOVLW  0D
59D2:  MOVWF  xDF
59D4:  RCALL  54E0
59D6:  MOVFF  DC,DF
59DA:  MOVLW  18
59DC:  MOVWF  xE0
59DE:  RCALL  542A
59E0:  MOVLW  3A
59E2:  BTFSS  F9E.4
59E4:  BRA    59E2
59E6:  MOVWF  FAD
59E8:  MOVFF  DD,DF
59EC:  MOVLW  18
59EE:  MOVWF  xE0
59F0:  RCALL  542A
59F2:  MOVLW  3A
59F4:  BTFSS  F9E.4
59F6:  BRA    59F4
59F8:  MOVWF  FAD
59FA:  MOVFF  DE,DF
59FE:  MOVLW  18
5A00:  MOVWF  xE0
5A02:  RCALL  542A
5A04:  MOVLW  0D
5A06:  BTFSS  F9E.4
5A08:  BRA    5A06
5A0A:  MOVWF  FAD
5A0C:  MOVLW  0A
5A0E:  BTFSS  F9E.4
5A10:  BRA    5A0E
5A12:  MOVWF  FAD
....................         } 
....................     } 
....................     if (((g_state == ST_COMPLETED)) && (flag_Rs232_Complete == 1)) { 
5A14:  MOVF   38,W
5A16:  SUBLW  1D
5A18:  BNZ   5AE6
5A1A:  DECFSZ xC2,W
5A1C:  BRA    5AE6
....................         flag_Rs232_Complete = 0; 
5A1E:  CLRF   xC2
....................         printf("THOI GIAN KET THUC %d:%d:%d\r\n",BCD2Dec(hour), BCD2Dec(min), BCD2Dec(sec)); 
5A20:  MOVFF  4F,DE
5A24:  RCALL  53C8
5A26:  MOVFF  01,DC
5A2A:  MOVFF  4E,DE
5A2E:  RCALL  53C8
5A30:  MOVFF  01,DD
5A34:  MOVFF  4D,DE
5A38:  RCALL  53C8
5A3A:  MOVFF  01,DE
5A3E:  MOVLW  4E
5A40:  MOVWF  FF6
5A42:  MOVLW  0C
5A44:  MOVWF  FF7
5A46:  MOVLW  13
5A48:  MOVWF  xDF
5A4A:  RCALL  54E0
5A4C:  MOVFF  DC,DF
5A50:  MOVLW  18
5A52:  MOVWF  xE0
5A54:  RCALL  542A
5A56:  MOVLW  3A
5A58:  BTFSS  F9E.4
5A5A:  BRA    5A58
5A5C:  MOVWF  FAD
5A5E:  MOVFF  DD,DF
5A62:  MOVLW  18
5A64:  MOVWF  xE0
5A66:  RCALL  542A
5A68:  MOVLW  3A
5A6A:  BTFSS  F9E.4
5A6C:  BRA    5A6A
5A6E:  MOVWF  FAD
5A70:  MOVFF  DE,DF
5A74:  MOVLW  18
5A76:  MOVWF  xE0
5A78:  RCALL  542A
5A7A:  MOVLW  0D
5A7C:  BTFSS  F9E.4
5A7E:  BRA    5A7C
5A80:  MOVWF  FAD
5A82:  MOVLW  0A
5A84:  BTFSS  F9E.4
5A86:  BRA    5A84
5A88:  MOVWF  FAD
....................         printf("KET QUA ME SAY: DAT\r\n"); 
5A8A:  MOVLW  6C
5A8C:  MOVWF  FF6
5A8E:  MOVLW  0C
5A90:  MOVWF  FF7
5A92:  RCALL  5408
....................         printf("CHU KY NGUOI VAN HANH\r\n"); 
5A94:  MOVLW  82
5A96:  MOVWF  FF6
5A98:  MOVLW  0C
5A9A:  MOVWF  FF7
5A9C:  RCALL  5408
....................         puts("\r\n"); 
5A9E:  MOVLW  9A
5AA0:  MOVWF  FF6
5AA2:  MOVLW  0C
5AA4:  MOVWF  FF7
5AA6:  RCALL  53E6
5AA8:  MOVLW  0D
5AAA:  BTFSS  F9E.4
5AAC:  BRA    5AAA
5AAE:  MOVWF  FAD
5AB0:  MOVLW  0A
5AB2:  BTFSS  F9E.4
5AB4:  BRA    5AB2
5AB6:  MOVWF  FAD
....................         printf("------------------------------\r\n"); 
5AB8:  MOVLW  9E
5ABA:  MOVWF  FF6
5ABC:  MOVLW  0C
5ABE:  MOVWF  FF7
5AC0:  RCALL  5408
....................         printf("       ME SAY HOAN THANH\r\n"); 
5AC2:  MOVLW  C0
5AC4:  MOVWF  FF6
5AC6:  MOVLW  0C
5AC8:  MOVWF  FF7
5ACA:  RCALL  5408
....................         puts("\r\n"); 
5ACC:  MOVLW  DC
5ACE:  MOVWF  FF6
5AD0:  MOVLW  0C
5AD2:  MOVWF  FF7
5AD4:  RCALL  53E6
5AD6:  MOVLW  0D
5AD8:  BTFSS  F9E.4
5ADA:  BRA    5AD8
5ADC:  MOVWF  FAD
5ADE:  MOVLW  0A
5AE0:  BTFSS  F9E.4
5AE2:  BRA    5AE0
5AE4:  MOVWF  FAD
....................     } 
....................     if(g_state == ST_ERR && flag_Rs232_Err == 1) { 
5AE6:  MOVF   38,W
5AE8:  SUBLW  1E
5AEA:  BNZ   5B76
5AEC:  DECFSZ xC3,W
5AEE:  BRA    5B76
....................         flag_Rs232_Err = 0; 
5AF0:  CLRF   xC3
....................         printf("ERROR CODE: E%d\r\n",g_err_code); 
5AF2:  MOVLW  E0
5AF4:  MOVWF  FF6
5AF6:  MOVLW  0C
5AF8:  MOVWF  FF7
5AFA:  MOVLW  0D
5AFC:  MOVWF  xDF
5AFE:  RCALL  54E0
5B00:  MOVFF  BC,DF
5B04:  MOVLW  18
5B06:  MOVWF  xE0
5B08:  RCALL  542A
5B0A:  MOVLW  0D
5B0C:  BTFSS  F9E.4
5B0E:  BRA    5B0C
5B10:  MOVWF  FAD
5B12:  MOVLW  0A
5B14:  BTFSS  F9E.4
5B16:  BRA    5B14
5B18:  MOVWF  FAD
....................         printf("KET QUA ME SAY: KHONG DAT\r\n"); 
5B1A:  MOVLW  F2
5B1C:  MOVWF  FF6
5B1E:  MOVLW  0C
5B20:  MOVWF  FF7
5B22:  RCALL  5408
....................         printf("CHU KY NGUOI VAN HANH\r\n"); 
5B24:  MOVLW  0E
5B26:  MOVWF  FF6
5B28:  MOVLW  0D
5B2A:  MOVWF  FF7
5B2C:  RCALL  5408
....................         puts("\r\n"); 
5B2E:  MOVLW  26
5B30:  MOVWF  FF6
5B32:  MOVLW  0D
5B34:  MOVWF  FF7
5B36:  RCALL  53E6
5B38:  MOVLW  0D
5B3A:  BTFSS  F9E.4
5B3C:  BRA    5B3A
5B3E:  MOVWF  FAD
5B40:  MOVLW  0A
5B42:  BTFSS  F9E.4
5B44:  BRA    5B42
5B46:  MOVWF  FAD
....................         printf("-------------------------------\r\n"); 
5B48:  MOVLW  2A
5B4A:  MOVWF  FF6
5B4C:  MOVLW  0D
5B4E:  MOVWF  FF7
5B50:  RCALL  5408
....................         printf("    ME SAY KHONG HOAN THANH\r\n"); 
5B52:  MOVLW  4C
5B54:  MOVWF  FF6
5B56:  MOVLW  0D
5B58:  MOVWF  FF7
5B5A:  RCALL  5408
....................         puts("\r\n"); 
5B5C:  MOVLW  6A
5B5E:  MOVWF  FF6
5B60:  MOVLW  0D
5B62:  MOVWF  FF7
5B64:  RCALL  53E6
5B66:  MOVLW  0D
5B68:  BTFSS  F9E.4
5B6A:  BRA    5B68
5B6C:  MOVWF  FAD
5B6E:  MOVLW  0A
5B70:  BTFSS  F9E.4
5B72:  BRA    5B70
5B74:  MOVWF  FAD
....................     } 
....................     if(1 == flag_Rs232_IDLE) { 
5B76:  DECFSZ xC4,W
5B78:  BRA    5C4A
....................         flag_Rs232_IDLE = 0; 
5B7A:  CLRF   xC4
....................         printf("THOI GIAN KET THUC %d:%d:%d\r\n",BCD2Dec(hour), BCD2Dec(min), BCD2Dec(sec)); 
5B7C:  MOVFF  4F,DE
5B80:  RCALL  53C8
5B82:  MOVFF  01,DC
5B86:  MOVFF  4E,DE
5B8A:  RCALL  53C8
5B8C:  MOVFF  01,DD
5B90:  MOVFF  4D,DE
5B94:  RCALL  53C8
5B96:  MOVFF  01,DE
5B9A:  MOVLW  6E
5B9C:  MOVWF  FF6
5B9E:  MOVLW  0D
5BA0:  MOVWF  FF7
5BA2:  MOVLW  13
5BA4:  MOVWF  xDF
5BA6:  RCALL  54E0
5BA8:  MOVFF  DC,DF
5BAC:  MOVLW  18
5BAE:  MOVWF  xE0
5BB0:  RCALL  542A
5BB2:  MOVLW  3A
5BB4:  BTFSS  F9E.4
5BB6:  BRA    5BB4
5BB8:  MOVWF  FAD
5BBA:  MOVFF  DD,DF
5BBE:  MOVLW  18
5BC0:  MOVWF  xE0
5BC2:  RCALL  542A
5BC4:  MOVLW  3A
5BC6:  BTFSS  F9E.4
5BC8:  BRA    5BC6
5BCA:  MOVWF  FAD
5BCC:  MOVFF  DE,DF
5BD0:  MOVLW  18
5BD2:  MOVWF  xE0
5BD4:  RCALL  542A
5BD6:  MOVLW  0D
5BD8:  BTFSS  F9E.4
5BDA:  BRA    5BD8
5BDC:  MOVWF  FAD
5BDE:  MOVLW  0A
5BE0:  BTFSS  F9E.4
5BE2:  BRA    5BE0
5BE4:  MOVWF  FAD
....................         printf("KET QUA ME SAY: KHONG DAT\r\n"); 
5BE6:  MOVLW  8C
5BE8:  MOVWF  FF6
5BEA:  MOVLW  0D
5BEC:  MOVWF  FF7
5BEE:  RCALL  5408
....................         printf("CHU KY NGUOI VAN HANH\r\n"); 
5BF0:  MOVLW  A8
5BF2:  MOVWF  FF6
5BF4:  MOVLW  0D
5BF6:  MOVWF  FF7
5BF8:  RCALL  5408
....................         puts("\r\n"); 
5BFA:  MOVLW  C0
5BFC:  MOVWF  FF6
5BFE:  MOVLW  0D
5C00:  MOVWF  FF7
5C02:  CALL   53E6
5C06:  MOVLW  0D
5C08:  BTFSS  F9E.4
5C0A:  BRA    5C08
5C0C:  MOVWF  FAD
5C0E:  MOVLW  0A
5C10:  BTFSS  F9E.4
5C12:  BRA    5C10
5C14:  MOVWF  FAD
....................         printf("-------------------------------\r\n"); 
5C16:  MOVLW  C4
5C18:  MOVWF  FF6
5C1A:  MOVLW  0D
5C1C:  MOVWF  FF7
5C1E:  CALL   5408
....................         printf(" KET THUC BOI NGUOI VAN HANH\r\n"); 
5C22:  MOVLW  E6
5C24:  MOVWF  FF6
5C26:  MOVLW  0D
5C28:  MOVWF  FF7
5C2A:  CALL   5408
....................         puts("\r\n"); 
5C2E:  MOVLW  06
5C30:  MOVWF  FF6
5C32:  MOVLW  0E
5C34:  MOVWF  FF7
5C36:  CALL   53E6
5C3A:  MOVLW  0D
5C3C:  BTFSS  F9E.4
5C3E:  BRA    5C3C
5C40:  MOVWF  FAD
5C42:  MOVLW  0A
5C44:  BTFSS  F9E.4
5C46:  BRA    5C44
5C48:  MOVWF  FAD
....................     } 
5C4A:  GOTO   68A4 (RETURN)
.................... } 
....................  
.................... #endif // #define _PROCESS_RS232_H_ 
....................   
....................  
.................... #include "process_lifecycle.h" 
.................... #ifndef _PROCESS_LIFECYCLE_H_ 
.................... #define _PROCESS_LIFECYCLE_H_ 
....................  
.................... #define TEMP_GAP 0 
.................... #define TEMP_ENV 10000 
.................... #define TIME_PRE_HOLD   5 
.................... void process_lifecycle(void) 
.................... { 
....................    switch(g_state) { 
*
66A2:  MOVLW  19
66A4:  SUBWF  38,W
66A6:  ADDLW  FC
66A8:  BTFSC  FD8.0
66AA:  BRA    676A
66AC:  ADDLW  04
66AE:  GOTO   676E
....................       case ST_RUN_WAITING_TIME: 
....................          if(((BCD2Dec(hour) == wait_hour) && (BCD2Dec(min) == wait_min) || (0 == user_delay_time)) && ((BCD2Dec(day) == wait_day) || (0 == wait_day))) { 
66B2:  MOVFF  4F,DE
66B6:  CALL   53C8
66BA:  MOVF   5C,W
66BC:  SUBWF  01,W
66BE:  BNZ   66CE
66C0:  MOVFF  4E,DE
66C4:  CALL   53C8
66C8:  MOVF   5D,W
66CA:  SUBWF  01,W
66CC:  BZ    66D6
66CE:  MOVF   56,F
66D0:  BNZ   66F0
66D2:  MOVF   57,F
66D4:  BNZ   66F0
66D6:  MOVFF  50,DE
66DA:  CALL   53C8
66DE:  MOVF   5E,W
66E0:  SUBWF  01,W
66E2:  BZ    66E8
66E4:  MOVF   5E,F
66E6:  BNZ   66F0
....................             g_state = ST_RUN_HEATING_TIME; 
66E8:  MOVLW  1A
66EA:  MOVWF  38
....................             flag_Pre_Hold = 0; 
66EC:  CLRF   xC5
....................             /*if(flag_day_hour == 0 && g_mode == USER_MODE) remain_time = user_hold_time; 
....................             else remain_time = user_ster_time;*/ 
....................             LedHeaterOn(); 
66EE:  BRA    6696
....................          } 
....................          break; 
66F0:  BRA    676A
....................       case ST_RUN_HEATING_TIME: 
....................          if (realTemp >= (setpoint - TEMP_GAP) && flag_Pre_Hold == 0) { 
66F2:  MOVF   66,W
66F4:  SUBWF  6A,W
66F6:  BNC   670E
66F8:  BNZ   6700
66FA:  MOVF   65,W
66FC:  SUBWF  69,W
66FE:  BNC   670E
6700:  MOVF   xC5,F
6702:  BNZ   670E
....................             remain_time = TIME_PRE_HOLD; 
6704:  CLRF   x8A
6706:  MOVLW  05
6708:  MOVWF  x89
....................             flag_Pre_Hold = 1; 
670A:  MOVLW  01
670C:  MOVWF  xC5
....................             //remain_time = ster_time; 
....................             //g_state = ST_RUN_HOLDING_TIME; 
....................          } 
....................          if (realTemp >= (setpoint - TEMP_GAP ) && flag_Pre_Hold == 1 && remain_time == 0) { 
670E:  MOVF   66,W
6710:  SUBWF  6A,W
6712:  BNC   6736
6714:  BNZ   671C
6716:  MOVF   65,W
6718:  SUBWF  69,W
671A:  BNC   6736
671C:  DECFSZ xC5,W
671E:  BRA    6736
6720:  MOVF   x89,F
6722:  BNZ   6736
6724:  MOVF   x8A,F
6726:  BNZ   6736
....................             g_state = ST_RUN_HOLDING_TIME; 
6728:  MOVLW  1B
672A:  MOVWF  38
....................             remain_time = ster_time; 
672C:  MOVFF  82,8A
6730:  MOVFF  81,89
....................             flag_Pre_Hold = 0; 
6734:  CLRF   xC5
....................          } 
....................          break; 
6736:  BRA    676A
....................       case ST_RUN_HOLDING_TIME: 
....................          if(remain_time == 0) { 
6738:  MOVF   x89,F
673A:  BNZ   6746
673C:  MOVF   x8A,F
673E:  BNZ   6746
....................             g_state = ST_RUN_COOLING_TIME; 
6740:  MOVLW  1C
6742:  MOVWF  38
....................             LedHeaterOff(); 
6744:  BRA    669C
....................          } 
....................          break; 
6746:  BRA    676A
....................       case ST_RUN_COOLING_TIME: 
....................          if (realTemp < TEMP_ENV) { 
6748:  MOVF   6A,W
674A:  SUBLW  27
674C:  BNC   676A
674E:  BNZ   6756
6750:  MOVF   69,W
6752:  SUBLW  0F
6754:  BNC   676A
....................             g_state = ST_COMPLETED; 
6756:  MOVLW  1D
6758:  MOVWF  38
....................             old_state = g_state; 
675A:  MOVFF  38,39
....................             Beep(3000); 
675E:  MOVLW  0B
6760:  MOVWF  xDD
6762:  MOVLW  B8
6764:  MOVWF  xDC
6766:  CALL   22EA
....................          } 
....................    } 
676A:  GOTO   68CA (RETURN)
.................... } 
....................  
.................... #endif // define _PROCESS_LIFECYCLE_H_ 
....................  
....................  
.................... #include "process_data.h" 
.................... #ifndef _PROCESS_DATA_H_ 
.................... #define _PROCESS_DATA_H_ 
....................  
.................... #include "pid.h" 
.................... #ifndef _PID_H_ 
.................... #define _PID_H_ 
....................  
.................... //Heater all off when    above setpoint 0.5 Degree Celcius 
.................... //Heater full on when below setpoint 50.0 Degree Celcius 
.................... #define TEMP_UPPER_ALLOFF (-80.0) 
.................... #define TEMP_LOWER_FULLON (2000.0) 
.................... // 1 degree / second MAX 
.................... //#define TEMP_SPEED_MAX_CONST (100.0) 
.................... // 0.2 degree / second MAX 
.................... #define TEMP_SPEED_MAX_CONST (20.0) 
.................... // 
.................... #define TEMP_INTEG_MAX_CONST (60000.0) 
.................... /* 
.................... unsigned int16 process_pid(float temp) 
.................... { 
....................    static float pre_err = 0; 
....................    static float i_term = 0; 
....................    float err, p_term, d_term; 
....................    float power_term; 
....................    //pid_kp = 1.0; pid_ki = 0.0; pid_kd = 0.0; 
....................    err = 1.0*setpoint - temp; 
....................    //printf("PID:\r\n"); 
....................    //lower and upper ranges: 
....................    if (err < TEMP_UPPER_ALLOFF) 
....................    { 
....................       power_term = 0; 
....................       return (unsigned int16)power_term;   //    turn off heater 
....................    } 
....................    //if (err > TEMP_LOWER_FULLON) 
....................    if (err > TEMP_LOWER_FULLON_CORRECTION) 
....................    { 
....................       i_term = 0; 
....................       power_term = TRIAC_CYCLE; 
....................       return (unsigned int16)power_term;  // heater 100% on 
....................    } 
....................     
....................    //p_term = 100% at (setpoint - TEMP_LOWER_FULLON); p_term = 0% at (setpoint - TEMP_UPPER_ALLOFF) 
....................    p_term = (err * TRIAC_CYCLE)/(TEMP_LOWER_FULLON_CORRECTION); 
....................    d_term = ((err-pre_err) * TRIAC_CYCLE)/TEMP_SPEED_MAX_CONST; 
....................    if (d_term <= (-1.0*TRIAC_CYCLE)) 
....................       d_term = -1.0*TRIAC_CYCLE; 
....................    if (d_term > 1.0*TRIAC_CYCLE) 
....................       d_term = 1.0*TRIAC_CYCLE; 
....................    i_term += err*TRIAC_CYCLE/TEMP_INTEG_MAX_CONST; 
....................    if (i_term >= TRIAC_CYCLE) 
....................       i_term = TRIAC_CYCLE; 
....................    if (i_term <= -TRIAC_CYCLE) 
....................       i_term = -TRIAC_CYCLE; 
....................    //printf("p_term = %f; i_term = %f; d_term = %f;\r\n", p_term, i_term, d_term); 
....................    pre_err = err; 
....................    power_term = (pid_kp*p_term + pid_ki*i_term + pid_kd*d_term)/100.0; 
....................    //printf("Power_Term: %f\r\n", power_term); 
....................    if (power_term <= 0.0) 
....................    { 
....................       return 0; 
....................       //i_term = 0; 
....................    } 
....................    if (power_term >= (1.0*TRIAC_CYCLE)) 
....................    { 
....................       //i_term = 0; 
....................       return (unsigned int16)TRIAC_CYCLE; 
....................    } 
....................    return (unsigned int16)(power_term); 
.................... } 
.................... */ 
.................... unsigned int16 process_adaptive(float temp) 
*
6144:  CLRF   19
6146:  BTFSC  FF2.7
6148:  BSF    19.7
614A:  BCF    FF2.7
.................... { 
....................    static float pre_err = 0; 
....................    static float power_term = 0; 
....................    float err, p_term, d_term; 
....................    float power_adjust_term; 
....................    err = 1.0*setpoint - temp; 
614C:  MOVFF  66,107
6150:  MOVFF  65,106
6154:  CALL   0362
6158:  BTFSC  19.7
615A:  BSF    FF2.7
615C:  CLRF   19
615E:  BTFSC  FF2.7
6160:  BSF    19.7
6162:  BCF    FF2.7
6164:  MOVLB  1
6166:  CLRF   x09
6168:  CLRF   x08
616A:  CLRF   x07
616C:  MOVLW  7F
616E:  MOVWF  x06
6170:  MOVFF  03,10D
6174:  MOVFF  02,10C
6178:  MOVFF  01,10B
617C:  MOVFF  00,10A
6180:  MOVLB  0
6182:  CALL   0412
6186:  BTFSC  19.7
6188:  BSF    FF2.7
618A:  MOVFF  03,F3
618E:  MOVFF  02,F2
6192:  MOVFF  01,F1
6196:  MOVFF  00,F0
619A:  BSF    FD8.1
619C:  MOVFF  03,F7
61A0:  MOVFF  02,F6
61A4:  MOVFF  01,F5
61A8:  MOVFF  00,F4
61AC:  MOVFF  DF,FB
61B0:  MOVFF  DE,FA
61B4:  MOVFF  DD,F9
61B8:  MOVFF  DC,F8
61BC:  CALL   0ECE
61C0:  MOVFF  03,E3
61C4:  MOVFF  02,E2
61C8:  MOVFF  01,E1
61CC:  MOVFF  00,E0
61D0:  CLRF   19
61D2:  BTFSC  FF2.7
61D4:  BSF    19.7
61D6:  BCF    FF2.7
....................    //lower and upper ranges: 
....................    if (err < TEMP_UPPER_ALLOFF) 
61D8:  MOVFF  E3,109
61DC:  MOVFF  E2,108
61E0:  MOVFF  E1,107
61E4:  MOVFF  E0,106
61E8:  MOVLB  1
61EA:  CLRF   x0D
61EC:  CLRF   x0C
61EE:  MOVLW  A0
61F0:  MOVWF  x0B
61F2:  MOVLW  85
61F4:  MOVWF  x0A
61F6:  MOVLB  0
61F8:  CALL   0398
61FC:  BTFSC  19.7
61FE:  BSF    FF2.7
6200:  BNC   622E
....................    { 
....................       power_term = 0; 
6202:  CLRF   xD9
6204:  CLRF   xD8
6206:  CLRF   xD7
6208:  CLRF   xD6
620A:  CLRF   19
620C:  BTFSC  FF2.7
620E:  BSF    19.7
6210:  BCF    FF2.7
....................       return (unsigned int16)power_term;   //    turn off heater 
6212:  MOVFF  D9,109
6216:  MOVFF  D8,108
621A:  MOVFF  D7,107
621E:  MOVFF  D6,106
6222:  CALL   0666
6226:  BTFSC  19.7
6228:  BSF    FF2.7
622A:  MOVF   02,W
622C:  BRA    6620
622E:  CLRF   19
6230:  BTFSC  FF2.7
6232:  BSF    19.7
6234:  BCF    FF2.7
....................    } 
....................    if (err > TEMP_LOWER_FULLON) 
6236:  MOVLB  1
6238:  CLRF   x09
623A:  CLRF   x08
623C:  MOVLW  7A
623E:  MOVWF  x07
6240:  MOVLW  89
6242:  MOVWF  x06
6244:  MOVFF  E3,10D
6248:  MOVFF  E2,10C
624C:  MOVFF  E1,10B
6250:  MOVFF  E0,10A
6254:  MOVLB  0
6256:  CALL   0398
625A:  BTFSC  19.7
625C:  BSF    FF2.7
625E:  BNC   6292
....................    { 
....................       power_term = TRIAC_CYCLE; 
6260:  CLRF   xD9
6262:  MOVLW  C0
6264:  MOVWF  xD8
6266:  MOVLW  0A
6268:  MOVWF  xD7
626A:  MOVLW  88
626C:  MOVWF  xD6
626E:  CLRF   19
6270:  BTFSC  FF2.7
6272:  BSF    19.7
6274:  BCF    FF2.7
....................       return (unsigned int16)power_term;  // heater 100% on 
6276:  MOVFF  D9,109
627A:  MOVFF  D8,108
627E:  MOVFF  D7,107
6282:  MOVFF  D6,106
6286:  CALL   0666
628A:  BTFSC  19.7
628C:  BSF    FF2.7
628E:  MOVF   02,W
6290:  BRA    6620
6292:  CLRF   19
6294:  BTFSC  FF2.7
6296:  BSF    19.7
6298:  BCF    FF2.7
....................    } 
....................     
....................    p_term = (pid_kp*err * TRIAC_CYCLE)/(TEMP_LOWER_FULLON*100.0); 
629A:  MOVFF  84,107
629E:  MOVFF  83,106
62A2:  CALL   0362
62A6:  BTFSC  19.7
62A8:  BSF    FF2.7
62AA:  CLRF   19
62AC:  BTFSC  FF2.7
62AE:  BSF    19.7
62B0:  BCF    FF2.7
62B2:  MOVFF  03,109
62B6:  MOVFF  02,108
62BA:  MOVFF  01,107
62BE:  MOVFF  00,106
62C2:  MOVFF  E3,10D
62C6:  MOVFF  E2,10C
62CA:  MOVFF  E1,10B
62CE:  MOVFF  E0,10A
62D2:  CALL   0412
62D6:  BTFSC  19.7
62D8:  BSF    FF2.7
62DA:  MOVFF  03,F3
62DE:  MOVFF  02,F2
62E2:  MOVFF  01,F1
62E6:  MOVFF  00,F0
62EA:  CLRF   19
62EC:  BTFSC  FF2.7
62EE:  BSF    19.7
62F0:  BCF    FF2.7
62F2:  MOVFF  03,109
62F6:  MOVFF  02,108
62FA:  MOVFF  01,107
62FE:  MOVFF  00,106
6302:  MOVLB  1
6304:  CLRF   x0D
6306:  MOVLW  C0
6308:  MOVWF  x0C
630A:  MOVLW  0A
630C:  MOVWF  x0B
630E:  MOVLW  88
6310:  MOVWF  x0A
6312:  MOVLB  0
6314:  CALL   0412
6318:  BTFSC  19.7
631A:  BSF    FF2.7
631C:  MOVFF  03,F3
6320:  MOVFF  02,F2
6324:  MOVFF  01,F1
6328:  MOVFF  00,F0
632C:  CLRF   19
632E:  BTFSC  FF2.7
6330:  BSF    19.7
6332:  BCF    FF2.7
6334:  MOVFF  03,10D
6338:  MOVFF  02,10C
633C:  MOVFF  01,10B
6340:  MOVFF  00,10A
6344:  MOVLB  1
6346:  CLRF   x11
6348:  MOVLW  50
634A:  MOVWF  x10
634C:  MOVLW  43
634E:  MOVWF  x0F
6350:  MOVLW  90
6352:  MOVWF  x0E
6354:  MOVLB  0
6356:  CALL   0508
635A:  BTFSC  19.7
635C:  BSF    FF2.7
635E:  MOVFF  03,E7
6362:  MOVFF  02,E6
6366:  MOVFF  01,E5
636A:  MOVFF  00,E4
....................    d_term = (pid_kd*(err-pre_err) * TRIAC_CYCLE)/(TEMP_SPEED_MAX_CONST*100.0); 
636E:  BSF    FD8.1
6370:  MOVFF  E3,F7
6374:  MOVFF  E2,F6
6378:  MOVFF  E1,F5
637C:  MOVFF  E0,F4
6380:  MOVFF  D5,FB
6384:  MOVFF  D4,FA
6388:  MOVFF  D3,F9
638C:  MOVFF  D2,F8
6390:  CALL   0ECE
6394:  MOVFF  03,F3
6398:  MOVFF  02,F2
639C:  MOVFF  01,F1
63A0:  MOVFF  00,F0
63A4:  CLRF   19
63A6:  BTFSC  FF2.7
63A8:  BSF    19.7
63AA:  BCF    FF2.7
63AC:  MOVFF  88,107
63B0:  MOVFF  87,106
63B4:  CALL   0362
63B8:  BTFSC  19.7
63BA:  BSF    FF2.7
63BC:  CLRF   19
63BE:  BTFSC  FF2.7
63C0:  BSF    19.7
63C2:  BCF    FF2.7
63C4:  MOVFF  03,109
63C8:  MOVFF  02,108
63CC:  MOVFF  01,107
63D0:  MOVFF  00,106
63D4:  MOVFF  F3,10D
63D8:  MOVFF  F2,10C
63DC:  MOVFF  F1,10B
63E0:  MOVFF  F0,10A
63E4:  CALL   0412
63E8:  BTFSC  19.7
63EA:  BSF    FF2.7
63EC:  MOVFF  03,F7
63F0:  MOVFF  02,F6
63F4:  MOVFF  01,F5
63F8:  MOVFF  00,F4
63FC:  CLRF   19
63FE:  BTFSC  FF2.7
6400:  BSF    19.7
6402:  BCF    FF2.7
6404:  MOVFF  03,109
6408:  MOVFF  02,108
640C:  MOVFF  01,107
6410:  MOVFF  00,106
6414:  MOVLB  1
6416:  CLRF   x0D
6418:  MOVLW  C0
641A:  MOVWF  x0C
641C:  MOVLW  0A
641E:  MOVWF  x0B
6420:  MOVLW  88
6422:  MOVWF  x0A
6424:  MOVLB  0
6426:  CALL   0412
642A:  BTFSC  19.7
642C:  BSF    FF2.7
642E:  MOVFF  03,F7
6432:  MOVFF  02,F6
6436:  MOVFF  01,F5
643A:  MOVFF  00,F4
643E:  CLRF   19
6440:  BTFSC  FF2.7
6442:  BSF    19.7
6444:  BCF    FF2.7
6446:  MOVFF  03,10D
644A:  MOVFF  02,10C
644E:  MOVFF  01,10B
6452:  MOVFF  00,10A
6456:  MOVLB  1
6458:  CLRF   x11
645A:  CLRF   x10
645C:  MOVLW  7A
645E:  MOVWF  x0F
6460:  MOVLW  89
6462:  MOVWF  x0E
6464:  MOVLB  0
6466:  CALL   0508
646A:  BTFSC  19.7
646C:  BSF    FF2.7
646E:  MOVFF  03,EB
6472:  MOVFF  02,EA
6476:  MOVFF  01,E9
647A:  MOVFF  00,E8
....................    pre_err = err; 
647E:  MOVFF  E3,D5
6482:  MOVFF  E2,D4
6486:  MOVFF  E1,D3
648A:  MOVFF  E0,D2
....................    power_adjust_term = (p_term + d_term); 
648E:  BCF    FD8.1
6490:  MOVFF  E7,F7
6494:  MOVFF  E6,F6
6498:  MOVFF  E5,F5
649C:  MOVFF  E4,F4
64A0:  MOVFF  EB,FB
64A4:  MOVFF  EA,FA
64A8:  MOVFF  E9,F9
64AC:  MOVFF  E8,F8
64B0:  CALL   0ECE
64B4:  MOVFF  03,EF
64B8:  MOVFF  02,EE
64BC:  MOVFF  01,ED
64C0:  MOVFF  00,EC
....................    power_term += power_adjust_term; 
64C4:  BCF    FD8.1
64C6:  MOVFF  D9,F7
64CA:  MOVFF  D8,F6
64CE:  MOVFF  D7,F5
64D2:  MOVFF  D6,F4
64D6:  MOVFF  EF,FB
64DA:  MOVFF  EE,FA
64DE:  MOVFF  ED,F9
64E2:  MOVFF  EC,F8
64E6:  CALL   0ECE
64EA:  MOVFF  03,D9
64EE:  MOVFF  02,D8
64F2:  MOVFF  01,D7
64F6:  MOVFF  00,D6
64FA:  CLRF   19
64FC:  BTFSC  FF2.7
64FE:  BSF    19.7
6500:  BCF    FF2.7
....................    //printf("\n\r %f; %f; %f; %f; %f", err, p_term, d_term, power_adjust_term, power_term); 
....................    if (power_term <= 0.0) 
6502:  MOVFF  D9,109
6506:  MOVFF  D8,108
650A:  MOVFF  D7,107
650E:  MOVFF  D6,106
6512:  MOVLB  1
6514:  CLRF   x0D
6516:  CLRF   x0C
6518:  CLRF   x0B
651A:  CLRF   x0A
651C:  MOVLB  0
651E:  CALL   0398
6522:  BTFSC  19.7
6524:  BSF    FF2.7
6526:  BC    652A
6528:  BNZ   6532
....................       power_term = 0.0; 
652A:  CLRF   xD9
652C:  CLRF   xD8
652E:  CLRF   xD7
6530:  CLRF   xD6
6532:  CLRF   19
6534:  BTFSC  FF2.7
6536:  BSF    19.7
6538:  BCF    FF2.7
....................    if (power_term >= (1.0*TRIAC_CYCLE)) 
653A:  MOVLB  1
653C:  CLRF   x09
653E:  MOVLW  C0
6540:  MOVWF  x08
6542:  MOVLW  0A
6544:  MOVWF  x07
6546:  MOVLW  88
6548:  MOVWF  x06
654A:  MOVFF  D9,10D
654E:  MOVFF  D8,10C
6552:  MOVFF  D7,10B
6556:  MOVFF  D6,10A
655A:  MOVLB  0
655C:  CALL   0398
6560:  BTFSC  19.7
6562:  BSF    FF2.7
6564:  BC    6568
6566:  BNZ   6576
....................       power_term = TRIAC_CYCLE; 
6568:  CLRF   xD9
656A:  MOVLW  C0
656C:  MOVWF  xD8
656E:  MOVLW  0A
6570:  MOVWF  xD7
6572:  MOVLW  88
6574:  MOVWF  xD6
6576:  CLRF   19
6578:  BTFSC  FF2.7
657A:  BSF    19.7
657C:  BCF    FF2.7
....................    return (unsigned int16)((power_term*pid_ki)/100.0); 
657E:  MOVFF  86,107
6582:  MOVFF  85,106
6586:  CALL   0362
658A:  BTFSC  19.7
658C:  BSF    FF2.7
658E:  CLRF   19
6590:  BTFSC  FF2.7
6592:  BSF    19.7
6594:  BCF    FF2.7
6596:  MOVFF  D9,109
659A:  MOVFF  D8,108
659E:  MOVFF  D7,107
65A2:  MOVFF  D6,106
65A6:  MOVFF  03,10D
65AA:  MOVFF  02,10C
65AE:  MOVFF  01,10B
65B2:  MOVFF  00,10A
65B6:  CALL   0412
65BA:  BTFSC  19.7
65BC:  BSF    FF2.7
65BE:  MOVFF  03,F3
65C2:  MOVFF  02,F2
65C6:  MOVFF  01,F1
65CA:  MOVFF  00,F0
65CE:  CLRF   19
65D0:  BTFSC  FF2.7
65D2:  BSF    19.7
65D4:  BCF    FF2.7
65D6:  MOVFF  03,10D
65DA:  MOVFF  02,10C
65DE:  MOVFF  01,10B
65E2:  MOVFF  00,10A
65E6:  MOVLB  1
65E8:  CLRF   x11
65EA:  CLRF   x10
65EC:  MOVLW  48
65EE:  MOVWF  x0F
65F0:  MOVLW  85
65F2:  MOVWF  x0E
65F4:  MOVLB  0
65F6:  CALL   0508
65FA:  BTFSC  19.7
65FC:  BSF    FF2.7
65FE:  CLRF   19
6600:  BTFSC  FF2.7
6602:  BSF    19.7
6604:  BCF    FF2.7
6606:  MOVFF  03,109
660A:  MOVFF  02,108
660E:  MOVFF  01,107
6612:  MOVFF  00,106
6616:  CALL   0666
661A:  BTFSC  19.7
661C:  BSF    FF2.7
661E:  MOVF   02,W
6620:  GOTO   663E (RETURN)
.................... } 
....................  
.................... #endif   // define _PID_H_ 
....................  
.................... #include "max31865.h" 
.................... #ifndef _MAX31865_H_ 
.................... #define _MAX31865_H_ 
.................... #include "globals.h" 
.................... #ifndef _GLOBALS_H_ 
.................... #define _GLOBALS_H_ 
....................  
.................... #use fast_io(ALL) 
....................  
.................... typedef union _ADC_DATA_TYPE 
.................... { 
....................    signed int32 whole; 
....................    unsigned char bytes[4]; 
.................... }ADC_DATA_TYPE; 
....................  
.................... typedef enum { 
....................    SIGN_SENSOR_BROKEN, 
....................    SIGN_TEMP_OVERLOAD, 
....................    SIGN_SET_PID_KP, 
....................    SIGN_SET_PID_KI, 
....................    SIGN_SET_PID_KD, 
....................    SIGN_PROCESS_END, 
....................    SIGN_CN, 
....................    SIGN_T2, 
....................    SIGN_T3, 
....................    SIGN_T4, 
....................    SIGN_T5, 
....................    SIGN_T6, 
....................    SIGN_T7, 
....................    SIGN_ALL, 
....................    SIGN_BLANK, 
.................... } SIGN_CODE; 
....................  
.................... typedef enum { 
....................    STATE_KEY_IDLE, 
....................    STATE_KEY_PRESSED, 
....................    STATE_KEY_HOLD, 
.................... } KEY_STATE_; 
....................  
.................... typedef enum _STATE { 
....................    ST_INVALID, 
....................    ST_IDLE, 
....................    ST_SET_PROGRAM, 
....................    ST_SET_DAY_OF_WEEK, 
....................    ST_SET_HOUR, 
....................    ST_SET_MINUTE, 
....................    ST_SET_TIME_STER_DRY, 
....................    ST_SET_SETPOINT, 
....................    ST_SET_PROTECT, 
....................    ST_SET_TIME_DELAY, 
....................    ST_SET_WAIT_TIME, 
....................    ST_SET_HOLD_TIME, 
....................    ST_DIS_TIME_DAY_HOUR, 
....................    ST_DIS_TIME_HOUR_MIN, 
....................    ST_SET_TIME_DAY_HOUR, 
....................    ST_SET_TIME_HOUR_MIN, 
....................    ST_SET_TIMER, 
....................    ST_SET_PASS, 
....................    ST_SAVE_PASS, 
....................    ST_CHECK_PASS, 
....................    ST_SET_SERI, 
....................    ST_SET_PID_KP, 
....................    ST_SET_PID_KI, 
....................    ST_SET_PID_KD, 
....................    ST_SET_OFFSET, 
....................    ST_RUN_WAITING_TIME, 
....................    ST_RUN_HEATING_TIME, 
....................    ST_RUN_HOLDING_TIME, 
....................    ST_RUN_COOLING_TIME, 
....................    ST_COMPLETED, 
....................    ST_ERR, 
....................    TOTAL_NUMBER_OF_STATE, 
.................... } STATE; 
....................  
.................... typedef enum _SET { 
....................    SET_NONE, 
....................    SET_PROGRAM_USER, 
....................    SET_TIME_REAL_TIME_CLOCK, 
....................    SET_TIME_CLOCK, 
....................    SET_DONE, 
.................... } SET; 
....................  
.................... typedef enum _SET_TIME { 
....................    SET_TIME_DAY_HOUR, 
....................    SET_TIME_HOUR_MIN, 
....................    SET_TIME_DONE, 
....................  
.................... } SET_TIME; 
....................  
.................... typedef enum _WEEKDAY { 
....................    NULLDAY, 
....................    SUNDAY, 
....................    MONDAY, 
....................    TUESDAY, 
....................    WEDNESDAY, 
....................    THURSDAY, 
....................    FRIDAY, 
....................    SATURDAY, 
....................    NONEDAY, 
.................... } WEEKDAY; 
....................  
.................... typedef enum _PROCESS_PHASE { 
....................    WAITING_PHASE, 
....................    HEAT_RISING_PHASE, 
....................    HEAT_HOLDING_PHASE, 
....................    HEAT_FALLING_PHASE, 
....................    IDLE_PHASE, 
.................... } PROCESS_PHASE; 
....................  
.................... typedef enum _OVEN_MODE { 
....................    NONE, 
....................    PROGRAM1, 
....................    PROGRAM2, 
....................    PROGRAM3, 
....................    PROGRAM4, 
....................    PROGRAM5, 
....................    PROGRAM6, 
....................    PROGRAM7, 
....................    PROGRAM8, 
....................    PROGRAM9, 
....................    PROGRAM10, 
....................    USER_MODE, 
.................... } OVEN_MODE; 
....................  
.................... typedef enum _FLAG_MODE { 
....................    MODE_STAND, 
....................    MODE_SET_1, 
....................    MODE_SET_2, 
....................    MODE_SET_3, 
....................    MODE_SET_4, 
....................    MODE_SET_5, 
....................    MODE_SET_6, 
....................    MODE_SET_7, 
....................    MODE_SET_8, 
....................    MODE_SET_9, 
....................    MODE_SET_10, 
.................... } FLAG_MODE; 
....................  
.................... #define TRIAC_CYCLE 555.0 
.................... #define TEMP_COEFF 0.652085      // 
.................... unsigned char led7[6][4]; 
.................... unsigned char led1[5]; 
.................... unsigned char temp_accum_count = 16; 
.................... STATE g_state; 
.................... STATE old_state; 
.................... OVEN_MODE g_mode = PROGRAM1; 
.................... SET g_set = SET_NONE; 
.................... //SET_TIME g_set_time; 
.................... //FLAG_MODE g_active_mode = MODE_STAND; 
....................  
.................... unsigned int16 timed_count_ms = 187;   //toggle every 1000 ms; 
.................... unsigned char pid_countdown = 0; 
.................... unsigned int16 spk_on_count; 
.................... int16    tmp_int16; 
.................... int8     key_state; 
.................... int8     key_flag = 0; 
.................... unsigned char key_code = 0; 
.................... unsigned char tmp = 0; 
.................... unsigned int8 touch_state1, touch_state2; 
.................... int16 key_hold_count, key_repeat_count; 
.................... #define KEY_HOLD_THRESHOLD (400) 
.................... #define KEY_REPEAT_TIME (10) 
....................  
.................... unsigned char sec, min, hour, day; 
.................... unsigned char last_min; 
....................  
.................... int16 user_setpoint = 15000; 
.................... int16 user_protect = 16000; 
.................... int16 user_delay_time = 15; 
.................... int16 user_ster_time = 90; 
.................... int16 i = 0; 
....................        
.................... unsigned char wait_hour, wait_min, wait_day; 
.................... unsigned char hold_hour, hold_min; 
....................  
.................... unsigned int16 password = 0, check_password = 0; 
.................... //unsigned int16 remain_time;      //unit is in minute! 
.................... unsigned int16 setpoint; 
.................... unsigned int16 protect; 
.................... unsigned int16 realTemp; 
.................... unsigned int16 t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0; 
.................... unsigned int16 t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0; 
.................... unsigned int16 delay_time; 
.................... unsigned int16 ster_time; 
.................... //unsigned int16 day_ster_time; 
.................... //unsigned int16 hour_ster_time; 
.................... //unsigned int16 user_day_ster_time; 
.................... //unsigned int16 user_hour_ster_time; 
.................... //unsigned int16 day_remain_time, hour_remain_time; 
.................... unsigned int16 pid_kp, pid_ki, pid_kd; 
.................... //unsigned int16 RTD_realTemp2; 
.................... //unsigned long long_ster_time, long_user_ster_time; 
.................... unsigned long remain_time; 
.................... //unsigned long user_hold_time; 
.................... //float TEMP_LOWER_FULLON_CORRECTION = 3000.0; 
....................  
.................... #define SETPOINT_MAX (25000) 
.................... #define SETPOINT_DEF (15000) 
.................... #define SETPOINT_MIN (1000) 
.................... #define PROTECT_MAX (31000) 
.................... #define PROTECT_DEF (31000) 
.................... #define PROTECT_MIN (1000) 
.................... #define FAN_SPEED_MAX (10) 
.................... #define FAN_SPEED_DEF (7) 
.................... #define FAN_SPEED_MIN (5) 
.................... #define DELAY_TIME_MAX (5999) 
.................... #define DELAY_TIME_DEF (0) 
.................... #define DELAY_TIME_MIN (0) 
.................... #define STER_TIME_MAX (5999) 
.................... #define STER_TIME_DEF (60) 
.................... #define STER_TIME_MIN (0) 
....................  
.................... #define PID_KP_MAX (100) 
.................... #define PID_KP_DEF (60) 
.................... #define PID_KP_MIN (0) 
.................... #define PID_KI_MAX (100) 
.................... #define PID_KI_DEF (55) 
.................... #define PID_KI_MIN (0) 
.................... #define PID_KD_MAX (100) 
.................... #define PID_KD_DEF (28) 
.................... #define PID_KD_MIN (0) 
....................  
.................... #define PID_KP_MAX1 (100) 
.................... #define PID_KP_DEF1 (65) 
.................... #define PID_KP_MIN1 (0) 
.................... #define PID_KI_MAX1 (100) 
.................... #define PID_KI_DEF1 (65) 
.................... #define PID_KI_MIN1 (0) 
.................... #define PID_KD_MAX1 (100) 
.................... #define PID_KD_DEF1 (38) 
.................... #define PID_KD_MIN1 (0) 
....................  
.................... #define PROG1_SETPOINT (12000) 
.................... #define PROG1_PROTECT (13000) 
.................... #define PROG1_DELAY_TIME (0) 
.................... #define PROG1_STER_TIME (90) 
.................... #define PROG2_SETPOINT (13000) 
.................... #define PROG2_PROTECT (14000) 
.................... #define PROG2_DELAY_TIME (0) 
.................... #define PROG2_STER_TIME (85) 
.................... #define PROG3_SETPOINT (14000) 
.................... #define PROG3_PROTECT (15000) 
.................... #define PROG3_DELAY_TIME (0) 
.................... #define PROG3_STER_TIME (80) 
.................... #define PROG4_SETPOINT (15000) 
.................... #define PROG4_PROTECT (16000) 
.................... #define PROG4_DELAY_TIME (0) 
.................... #define PROG4_STER_TIME (70) 
.................... #define PROG5_SETPOINT (16000) 
.................... #define PROG5_PROTECT (17000) 
.................... #define PROG5_DELAY_TIME (0) 
.................... #define PROG5_STER_TIME (60) 
.................... #define PROG6_SETPOINT (17000) 
.................... #define PROG6_PROTECT (18000) 
.................... #define PROG6_DELAY_TIME (0) 
.................... #define PROG6_STER_TIME (50) 
.................... #define PROG7_SETPOINT (18000) 
.................... #define PROG7_PROTECT (19000) 
.................... #define PROG7_DELAY_TIME (0) 
.................... #define PROG7_STER_TIME (45) 
.................... #define PROG8_SETPOINT (19000) 
.................... #define PROG8_PROTECT (20000) 
.................... #define PROG8_DELAY_TIME (0) 
.................... #define PROG8_STER_TIME (40) 
.................... #define PROG9_SETPOINT (20000) 
.................... #define PROG9_PROTECT (21000) 
.................... #define PROG9_DELAY_TIME (0) 
.................... #define PROG9_STER_TIME (35) 
.................... #define PROG10_SETPOINT (22000) 
.................... #define PROG10_PROTECT (23000) 
.................... #define PROG10_DELAY_TIME (0) 
.................... #define PROG10_STER_TIME (30) 
....................  
.................... #define BEEP_TIME (3) 
....................  
.................... #define OFFSET_TEMP_RANGE (3000) 
....................  
.................... #define MAX_TEMP_RANGE (32000) 
.................... //#define ADC_FILTER_COUNT (256) 
.................... #define ADC_FILTER_COUNT (16) 
....................  
.................... #define RTD_CONST (41876) 
....................  
.................... unsigned char  fan_speed = FAN_SPEED_MAX; 
.................... unsigned int16 triac_on_time1 = 0; 
.................... unsigned int16 triac_on_time_new1 = 0; 
.................... unsigned int16 triac_count1 = 0; 
.................... unsigned int16 triac_on_time2 = 0; 
.................... unsigned int16 triac_count2 = 0; 
....................  
.................... unsigned int16 seri = 0; 
.................... unsigned char adc_integ_count = 16; 
.................... signed int32 adc_integ_data; 
.................... signed int16 adc_data, adc_data_buff; 
.................... signed int16 env_temp; 
.................... signed int16 thermo_temp; 
.................... signed int16 temp_offset = 0; 
.................... signed int32 adc_value_ch0; 
.................... signed int32 adc_value_ch1; 
....................  
.................... float k_a, k_b, float_temp; 
....................  
.................... char fan_pos = 0; 
.................... char g_err_code = 0; 
.................... char fan_rol_count = 30; 
.................... char hour_min_flag = 1; 
.................... char flag_day_hour = 0; 
.................... char flag_Rs232 = 0; 
.................... char flag_Rs232_Ster = 0; 
.................... char flag_Rs232_Complete = 0; 
.................... char flag_Rs232_Err = 0; 
.................... char flag_Rs232_IDLE = 0; 
.................... char flag_Pre_Hold = 0; 
....................  
.................... unsigned char GLb_nCountAvrTemp = 0; 
....................  
.................... #endif // #define _GLOBALS_H_ 
....................  
....................  
.................... #define MAX_CS1     PIN_C2 
.................... #define MAX_CS2     PIN_C1 
....................  
.................... #define RTD_CONFIGURATION           0x00;      /**< Configuration Register */ 
.................... #define RTD_RTD_MSB                 0x01;      /**< RTD Data MSB Register*/ 
.................... #define RTD_RTD_LSB                 0x02;      /**< RTD Data LSB Register*/ 
.................... #define RTD_HI_FLT_THRHLD_MSB       0x03;      /**< High Fault Threshold MSB register */ 
.................... #define RTD_HI_FLT_THRHLD_LSB       0x04;      /**< High Fault Threshold LSB register */ 
.................... #define RTD_LO_FLT_THRHLD_MSB       0x05;      /**< Low Fault Threshold MSB register */ 
.................... #define RTD_LO_FLT_THRHLD_LSB       0x06;      /**< Low Fault Threshold LSB register */ 
.................... #define RTD_FLT_STATUS              0x07;      /**< Fault Status Register */ 
.................... #define RREF                        430         // Reference resistor 
.................... #define FACTOR                      32768        // 2^15 used for data to resistance conversion 
.................... #define ALPHA                       0.003851    // PT-100 temperature coefficient 
....................  
.................... unsigned int16 RTD_REF_RESISTANCE_430 = 430;       /**< Value of referent resistor in Ohms */ 
....................  
.................... void max_spiWrite(unsigned int8 *pBuf, unsigned int16 nBytes); 
.................... void max_spiRead(unsigned int8 *pBuf, unsigned int16 nBytes); 
.................... void max_spiTransfer(unsigned int8 *pIn, unsigned int8 *pOut, unsigned int16 nBytes); 
....................  
.................... void max_writeRegister1(unsigned int8 regAddress, unsigned int8 writeData); 
.................... void max_writeRegister2(unsigned int8 regAddress, unsigned int8 writeData); 
....................  
.................... unsigned int8 max_readRegister1(unsigned int8 regAddress); 
.................... unsigned int8 max_readRegister2(unsigned int8 regAddress); 
....................  
.................... unsigned int16 max_readTemperature1(); 
.................... unsigned int16 max_readTemperature2(); 
....................  
.................... float max_convertTemperature(unsigned int16 inputData, unsigned int16 referentResistance); 
.................... void max31865_init(); 
....................  
.................... /*-------------------- Begin Max31865 --------------------*/ 
.................... //SPI write n bytes 
.................... void max_spiWrite(unsigned int8 *pBuf, unsigned int16 nBytes) { 
....................     unsigned int8 *ptr = pBuf; 
....................     while( nBytes-- ) 
....................         spi_write( *( ptr++ ) ); 
.................... } 
....................  
.................... //SPI read n bytes 
.................... void max_spiRead(unsigned int8 *pBuf, unsigned int16 nBytes) { 
....................     unsigned int8 *ptr = pBuf; 
....................     while( nBytes-- ) 
....................         *( ptr++ ) = spi_read(0x00); 
.................... } 
....................  
.................... void max_spiTransfer(unsigned int8 *pIn, unsigned int8 *pOut, unsigned int16 nBytes) { 
....................     unsigned int8 *in = pIn; 
....................     unsigned int8 *out = pOut; 
....................     while( nBytes-- ) 
....................         *( out++ ) = spi_read( *( in++ ) ); 
.................... } 
....................  
.................... //Write data to Max_1 
.................... void max_writeRegister1(unsigned int8 regAddress, unsigned int8 writeData) { 
....................     unsigned int8 tmp[2]; 
....................     regAddress |= 0x80; 
....................     tmp[0] = regAddress; 
....................     tmp[1] = writeData; 
....................     output_low(MAX_CS1); 
....................     max_spiWrite(tmp, 2); 
....................     output_high(MAX_CS1); 
.................... } 
....................  
.................... //Write data to Max_2 
.................... void max_writeRegister2(unsigned int8 regAddress, unsigned int8 writeData) { 
....................     unsigned int8 tmp[2]; 
....................     regAddress |= 0x80; 
....................     tmp[0] = regAddress; 
....................     tmp[1] = writeData; 
....................     output_low(MAX_CS2); 
....................     max_spiWrite(tmp, 2); 
....................     output_high(MAX_CS2); 
.................... } 
....................  
.................... //Read data from register Max_1 
.................... unsigned int8 max_readRegister1(unsigned int8 regAddress) { 
....................     unsigned int8 tmp; 
....................     output_low(MAX_CS1); 
....................     max_spiWrite(&regAddress, 1); 
....................     max_spiRead(&tmp, 1); 
....................     output_high(MAX_CS1); 
....................     return tmp; 
.................... } 
....................  
.................... //Read data from register Max_2 
.................... unsigned int8 max_readRegister2(unsigned int8 regAddress) { 
....................     unsigned int8 tmp; 
....................     output_low(MAX_CS2); 
....................     max_spiWrite(&regAddress, 1); 
....................     max_spiRead(&tmp, 1); 
....................     output_high(MAX_CS2); 
....................     return tmp; 
.................... } 
....................  
.................... //Read Temperature from Max_1 
.................... unsigned int16 max_readTemperature1() { 
....................      unsigned int16 returnValue = 0; 
....................      unsigned int8 buff[2]; 
....................     buff[0] = max_readRegister1(0x01); 
....................     buff[1] = max_readRegister1(0x02); 
....................     returnValue = buff[0] << 8; 
....................     returnValue |= buff[1]; 
....................     returnValue >>= 1; 
....................     return returnValue; 
.................... } 
....................  
.................... //Read Temperature from Max_2 
.................... unsigned int16 max_readTemperature2() { 
....................      unsigned int16 returnValue = 0; 
....................      unsigned int8 buff[2]; 
....................     buff[0] = max_readRegister2(0x01); 
....................     buff[1] = max_readRegister2(0x02); 
....................     returnValue = buff[0] << 8; 
....................     returnValue |= buff[1]; 
....................     returnValue >>= 1; 
....................     return returnValue; 
.................... } 
....................  
.................... //Convert Temperature to degree C 
.................... float max_convertTemperature(unsigned int16 inputData, unsigned int16 referentResistance) { 
....................     float floatValue; 
....................     /*float coefficient; 
....................     coefficient = (referentResistance/400.0); 
....................     floatValue = (float)inputData * coefficient; 
....................     floatValue /= 32; 
....................     floatValue -= 256;*/ 
....................     // Calculate the actual resistance of the sensor 
....................     float resistance = ((float) inputData * RREF) / FACTOR; 
....................     // Calculate the temperature from the measured resistance 
....................     floatValue = ((resistance / 100) - 1) / ALPHA; 
....................     return floatValue; 
.................... } 
....................  
.................... //Init max31865 mode 3 wires 
.................... void max31865_init() { 
....................      max_writeRegister1(0x00, 0xD0); 
....................      delay_us(10); 
....................      max_writeRegister2(0x00, 0xD0); 
....................      delay_us(10); 
.................... } 
....................  
.................... #endif 
....................  
.................... void Get_Data(void) 
.................... { 
....................    if (temp_accum_count == 0) { 
*
5E2E:  MOVF   37,F
5E30:  BTFSS  FD8.2
5E32:  BRA    60D4
....................       temp_accum_count = ADC_FILTER_COUNT; 
5E34:  MOVLW  10
5E36:  MOVWF  37
....................       // unsigned int16 readValue1, readValue2; 
....................       // float RTD_Temp1 = 0, RTD_Temp2 = 0; 
....................       GLb_nCountAvrTemp++; 
5E38:  INCF   xC6,F
....................       get_temp(); 
5E3A:  BRA    5D60
....................        t1 = t2; t2 = t3; t3 = t4; t4 = t5; t5 = t6; 
5E3C:  MOVFF  6E,6C
5E40:  MOVFF  6D,6B
5E44:  MOVFF  70,6E
5E48:  MOVFF  6F,6D
5E4C:  MOVFF  72,70
5E50:  MOVFF  71,6F
5E54:  MOVFF  74,72
5E58:  MOVFF  73,71
5E5C:  MOVFF  76,74
5E60:  MOVFF  75,73
....................        t6 = t7; t7 = t8; t8 = t9; t9 = t10; t10 = adc_data_buff; 
5E64:  MOVFF  78,76
5E68:  MOVFF  77,75
5E6C:  MOVFF  7A,78
5E70:  MOVFF  79,77
5E74:  MOVFF  7C,7A
5E78:  MOVFF  7B,79
5E7C:  MOVFF  7E,7C
5E80:  MOVFF  7D,7B
5E84:  MOVFF  A0,7E
5E88:  MOVFF  9F,7D
....................        if(10 == GLb_nCountAvrTemp) { 
5E8C:  MOVF   xC6,W
5E8E:  SUBLW  0A
5E90:  BTFSS  FD8.2
5E92:  BRA    60D4
....................           float_temp = ((float)(t1/10 + t2/10 + t3/10 + t4/10 + t5/10 + t6/10 + t7/10 + t8/10 + t9/10 + t10/10)*10 / 10) + temp_offset; 
5E94:  MOVFF  6C,E6
5E98:  MOVFF  6B,E5
5E9C:  CLRF   xE8
5E9E:  MOVLW  0A
5EA0:  MOVWF  xE7
5EA2:  CALL   22F4
5EA6:  MOVFF  02,DD
5EAA:  MOVFF  01,DC
5EAE:  MOVFF  6E,E6
5EB2:  MOVFF  6D,E5
5EB6:  CLRF   xE8
5EB8:  MOVLW  0A
5EBA:  MOVWF  xE7
5EBC:  CALL   22F4
5EC0:  MOVFF  02,03
5EC4:  MOVF   01,W
5EC6:  ADDWF  xDC,F
5EC8:  MOVF   02,W
5ECA:  ADDWFC xDD,F
5ECC:  MOVFF  70,E6
5ED0:  MOVFF  6F,E5
5ED4:  CLRF   xE8
5ED6:  MOVLW  0A
5ED8:  MOVWF  xE7
5EDA:  CALL   22F4
5EDE:  MOVFF  02,03
5EE2:  MOVF   01,W
5EE4:  ADDWF  xDC,F
5EE6:  MOVF   02,W
5EE8:  ADDWFC xDD,F
5EEA:  MOVFF  72,E6
5EEE:  MOVFF  71,E5
5EF2:  CLRF   xE8
5EF4:  MOVLW  0A
5EF6:  MOVWF  xE7
5EF8:  CALL   22F4
5EFC:  MOVFF  02,03
5F00:  MOVF   01,W
5F02:  ADDWF  xDC,F
5F04:  MOVF   02,W
5F06:  ADDWFC xDD,F
5F08:  MOVFF  74,E6
5F0C:  MOVFF  73,E5
5F10:  CLRF   xE8
5F12:  MOVLW  0A
5F14:  MOVWF  xE7
5F16:  CALL   22F4
5F1A:  MOVFF  02,03
5F1E:  MOVF   01,W
5F20:  ADDWF  xDC,F
5F22:  MOVF   02,W
5F24:  ADDWFC xDD,F
5F26:  MOVFF  76,E6
5F2A:  MOVFF  75,E5
5F2E:  CLRF   xE8
5F30:  MOVLW  0A
5F32:  MOVWF  xE7
5F34:  CALL   22F4
5F38:  MOVFF  02,03
5F3C:  MOVF   01,W
5F3E:  ADDWF  xDC,F
5F40:  MOVF   02,W
5F42:  ADDWFC xDD,F
5F44:  MOVFF  78,E6
5F48:  MOVFF  77,E5
5F4C:  CLRF   xE8
5F4E:  MOVLW  0A
5F50:  MOVWF  xE7
5F52:  CALL   22F4
5F56:  MOVFF  02,03
5F5A:  MOVF   01,W
5F5C:  ADDWF  xDC,F
5F5E:  MOVF   02,W
5F60:  ADDWFC xDD,F
5F62:  MOVFF  7A,E6
5F66:  MOVFF  79,E5
5F6A:  CLRF   xE8
5F6C:  MOVLW  0A
5F6E:  MOVWF  xE7
5F70:  CALL   22F4
5F74:  MOVFF  02,03
5F78:  MOVF   01,W
5F7A:  ADDWF  xDC,F
5F7C:  MOVF   02,W
5F7E:  ADDWFC xDD,F
5F80:  MOVFF  7C,E6
5F84:  MOVFF  7B,E5
5F88:  CLRF   xE8
5F8A:  MOVLW  0A
5F8C:  MOVWF  xE7
5F8E:  CALL   22F4
5F92:  MOVFF  02,03
5F96:  MOVF   01,W
5F98:  ADDWF  xDC,F
5F9A:  MOVF   02,W
5F9C:  ADDWFC xDD,F
5F9E:  MOVFF  7E,E6
5FA2:  MOVFF  7D,E5
5FA6:  CLRF   xE8
5FA8:  MOVLW  0A
5FAA:  MOVWF  xE7
5FAC:  CALL   22F4
5FB0:  MOVFF  02,03
5FB4:  MOVF   01,W
5FB6:  ADDWF  xDC,W
5FB8:  MOVWF  01
5FBA:  MOVF   xDD,W
5FBC:  ADDWFC 03,F
5FBE:  MOVF   01,W
5FC0:  CLRF   19
5FC2:  BTFSC  FF2.7
5FC4:  BSF    19.7
5FC6:  BCF    FF2.7
5FC8:  MOVLB  1
5FCA:  MOVWF  x06
5FCC:  MOVFF  03,107
5FD0:  MOVLB  0
5FD2:  CALL   0362
5FD6:  BTFSC  19.7
5FD8:  BSF    FF2.7
5FDA:  MOVFF  03,DF
5FDE:  MOVFF  02,DE
5FE2:  MOVFF  01,DD
5FE6:  MOVFF  00,DC
5FEA:  CLRF   19
5FEC:  BTFSC  FF2.7
5FEE:  BSF    19.7
5FF0:  BCF    FF2.7
5FF2:  MOVFF  03,109
5FF6:  MOVFF  02,108
5FFA:  MOVFF  01,107
5FFE:  MOVFF  00,106
6002:  MOVLB  1
6004:  CLRF   x0D
6006:  CLRF   x0C
6008:  MOVLW  20
600A:  MOVWF  x0B
600C:  MOVLW  82
600E:  MOVWF  x0A
6010:  MOVLB  0
6012:  CALL   0412
6016:  BTFSC  19.7
6018:  BSF    FF2.7
601A:  MOVFF  03,DF
601E:  MOVFF  02,DE
6022:  MOVFF  01,DD
6026:  MOVFF  00,DC
602A:  CLRF   19
602C:  BTFSC  FF2.7
602E:  BSF    19.7
6030:  BCF    FF2.7
6032:  MOVFF  03,10D
6036:  MOVFF  02,10C
603A:  MOVFF  01,10B
603E:  MOVFF  00,10A
6042:  MOVLB  1
6044:  CLRF   x11
6046:  CLRF   x10
6048:  MOVLW  20
604A:  MOVWF  x0F
604C:  MOVLW  82
604E:  MOVWF  x0E
6050:  MOVLB  0
6052:  CALL   0508
6056:  BTFSC  19.7
6058:  BSF    FF2.7
605A:  MOVFF  03,DF
605E:  MOVFF  02,DE
6062:  MOVFF  01,DD
6066:  MOVFF  00,DC
606A:  MOVFF  A6,E1
606E:  MOVFF  A5,E0
6072:  BRA    5DE4
6074:  BCF    FD8.1
6076:  MOVFF  DF,F7
607A:  MOVFF  DE,F6
607E:  MOVFF  DD,F5
6082:  MOVFF  DC,F4
6086:  MOVFF  03,FB
608A:  MOVFF  02,FA
608E:  MOVFF  01,F9
6092:  MOVFF  00,F8
6096:  CALL   0ECE
609A:  MOVFF  03,BA
609E:  MOVFF  02,B9
60A2:  MOVFF  01,B8
60A6:  MOVFF  00,B7
60AA:  CLRF   19
60AC:  BTFSC  FF2.7
60AE:  BSF    19.7
60B0:  BCF    FF2.7
....................           realTemp = float_temp; 
60B2:  MOVFF  BA,109
60B6:  MOVFF  B9,108
60BA:  MOVFF  B8,107
60BE:  MOVFF  B7,106
60C2:  CALL   0666
60C6:  BTFSC  19.7
60C8:  BSF    FF2.7
60CA:  MOVFF  02,6A
60CE:  MOVFF  01,69
....................           GLb_nCountAvrTemp = 0; 
60D2:  CLRF   xC6
....................        } 
....................       //old version 
....................       //realTemp = adc_data_buff; 
....................       //float_temp = realTemp; 
....................  
....................       /*      PT100         */ 
....................       //readValue1 = max_readTemperature1(); 
....................       // readValue2 = max_readTemperature2(); 
....................       //RTD_Temp1 = max_convertTemperature(readValue1, RTD_REF_RESISTANCE_430); 
....................       // RTD_Temp2 = max_convertTemperature(readValue2, RTD_REF_RESISTANCE_430); 
....................       //RTD_realTemp1 = (signed int16)(RTD_Temp1 * 100); 
....................       // RTD_realTemp2 = (unsigned int16)(RTD_Temp2 * 100); 
....................       // realTemp = RTD_realTemp2; 
....................       // float_temp = realTemp; 
....................    } 
60D4:  GOTO   68A8 (RETURN)
.................... } 
....................  
.................... void Process_Data(void) 
.................... {   
....................    //static unsigned int16 index_time_hour, index_time_day; 
....................    if (pid_countdown == 0) { //Update every 2 seconds (~100 cycles of 50Hz power) 
*
6624:  MOVF   3E,F
6626:  BNZ   6692
....................       pid_countdown = 1;  
6628:  MOVLW  01
662A:  MOVWF  3E
....................       //printf("tick!"); 
....................        
....................       //PID 
....................       //tmp_int16 = process_pid(float_temp); 
....................       //Adaptive 
....................       tmp_int16 = process_adaptive(float_temp); 
662C:  MOVFF  BA,DF
6630:  MOVFF  B9,DE
6634:  MOVFF  B8,DD
6638:  MOVFF  B7,DC
663C:  BRA    6144
663E:  MOVFF  02,42
6642:  MOVFF  01,41
....................       disable_interrupts(GLOBAL); 
6646:  BCF    FF2.6
6648:  BCF    FF2.7
664A:  BTFSC  FF2.7
664C:  BRA    6648
....................       triac_on_time_new1 = tmp_int16; 
664E:  MOVFF  42,8F
6652:  MOVFF  41,8E
....................       enable_interrupts(GLOBAL); 
6656:  MOVLW  C0
6658:  IORWF  FF2,F
....................       //clock display 
....................       min = read_ds1307(1);   // min 
665A:  MOVLW  01
665C:  MOVWF  xDE
665E:  CALL   13E6
6662:  MOVFF  01,4E
....................       if (min != last_min) { 
6666:  MOVF   51,W
6668:  SUBWF  4E,W
666A:  BZ    6692
....................          last_min = min; 
666C:  MOVFF  4E,51
....................          //hour = read_ds1307(2); 
....................          if (remain_time != 0) { 
6670:  MOVF   x89,F
6672:  BNZ   6678
6674:  MOVF   x8A,F
6676:  BZ    6692
....................             if ((g_state == ST_RUN_WAITING_TIME) || (g_state == ST_RUN_HOLDING_TIME) || (g_state == ST_RUN_HEATING_TIME)) { 
6678:  MOVF   38,W
667A:  SUBLW  19
667C:  BZ    668A
667E:  MOVF   38,W
6680:  SUBLW  1B
6682:  BZ    668A
6684:  MOVF   38,W
6686:  SUBLW  1A
6688:  BNZ   6692
....................                remain_time -= 1; 
668A:  MOVLW  01
668C:  SUBWF  x89,F
668E:  MOVLW  00
6690:  SUBWFB x8A,F
....................             } 
....................          } 
....................          /*if (day_remain_time != 0 || hour_remain_time != 0) { 
....................             if (g_state == ST_RUN_HOLDING_TIME) { 
....................                index_time_hour += 1; 
....................                if(index_time_hour > 59) { 
....................                   index_time_hour = 0; 
....................                   //index_time_day += 1; 
....................                   hour_remain_time -= 1; 
....................                } 
....................                if(hour_remain_time == 0 && day_remain_time != 0) { 
....................                   day_remain_time -= 1; 
....................                   hour_remain_time = 23; 
....................                } 
....................             } 
....................          }  
....................          else { 
....................             index_time_hour = 0; 
....................             index_time_day = 0; 
....................          }*/ 
....................       } 
....................    } 
6692:  GOTO   68C8 (RETURN)
.................... } 
....................  
.................... #endif // #define _PROCESS_DATA_H_ 
....................  
.................... #include "AFE90100.h" 
.................... #ifndef _AFE90100_H_ 
.................... #define _AFE90100_H_ 
....................  
.................... /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
.................... ! NOTE: The document of LMP90100 has error in describing reading registers. The 
.................... code for INST1 need to be 0x10 for both writing and reading, not 0x90 as stated! 
.................... !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/ 
.................... #include "globals.h" 
....................  
.................... #include "TI_LMP90100.h" 
....................  
.................... unsigned char URA = 0; 
....................  
....................  
.................... void AFE90100_init(void) 
.................... { 
....................    /*** Note the CCS compiler has error in the setup_spi,where the SPI_L_TO_H 
....................       or SPI_H_TO_L does not work, use a constant such as 0x4010, ref from link: 
....................       "http://www.ccsinfo.com/forum/viewtopic.php?t=20611" 
....................    ***/ 
....................    //my_spi_init(); 
.................... } 
....................  
.................... void AFE90100_WriteReg(unsigned char addr, unsigned char value) 
.................... { 
....................    unsigned char new_URA, inst; 
....................    output_low(PIN_A0);                          //Enable the AFE90100 
....................    new_URA = (addr & LMP90100_URA_MASK)>>4; 
....................    if (new_URA != URA) 
....................    { 
....................       inst = LMP90100_INSTRUCTION_BYTE1_WRITE;                                 // Transaction-1 
....................       spi_write(inst); 
....................       URA = new_URA; 
....................       spi_write(URA); 
....................    } 
....................    inst = LMP90100_WRITE_BIT | LMP90100_SIZE_1B |(addr & LMP90100_LRA_MASK);    // lower register address 
....................    spi_write(inst);                                                            // Send lower register address 
....................    spi_write(value);                                                           // Send data value   
....................    output_high(PIN_A0);                          //Disable the AFE90100 
.................... } 
....................  
.................... unsigned char AFE90100_ReadReg(unsigned char addr) 
.................... { 
....................    unsigned char new_URA, inst, value; 
....................    output_low(PIN_A0);                          //Enable the AFE90100 
....................    new_URA = (addr & LMP90100_URA_MASK)>>4; 
....................    if (new_URA != URA) 
....................    { 
....................       inst = LMP90100_INSTRUCTION_BYTE1_WRITE;                                 // Transaction-1 
....................       spi_write(inst); 
....................       URA = new_URA; 
....................       spi_write(URA); 
....................    } 
....................    inst = LMP90100_READ_BIT | LMP90100_SIZE_1B |(addr & LMP90100_LRA_MASK);    // lower register address 
....................    spi_write(inst);                                                            // Send lower register address 
....................    value = spi_read(0x00);                                                           // Send data value   
....................    output_high(PIN_A0);                          //Disable the AFE90100 
....................    return value; 
.................... } 
....................  
.................... void  AFE90100_SetPGA(unsigned char ch, unsigned char pga) 
.................... { 
....................    AFE90100_WriteReg(ch, pga); 
.................... } 
....................  
.................... signed int32 AFE90100_ReadADC(void) 
.................... { 
....................   ADC_DATA_TYPE adc_data; 
....................   adc_data.bytes[3] = AFE90100_ReadReg(TI_LMP90100_ADC_DOUT2_REG); 
....................   adc_data.bytes[2] = AFE90100_ReadReg(TI_LMP90100_ADC_DOUT1_REG); 
....................   adc_data.bytes[1] = AFE90100_ReadReg(TI_LMP90100_ADC_DOUT0_REG); 
....................   adc_data.bytes[0] = 0; 
....................   return adc_data.whole; 
.................... } 
....................  
.................... #endif //#define _AFE90100_H_ 
....................  
.................... // #include "max31865.h" 
....................  
.................... void global_init(void) 
.................... { 
....................    setup_oscillator(OSC_8MHZ | OSC_NORMAL | OSC_31250 | OSC_PLL_ON); 
*
20C0:  MOVLW  70
20C2:  MOVWF  FD3
20C4:  MOVLW  C0
20C6:  MOVWF  F9B
20C8:  MOVF   FD3,W
....................    set_tris_a(0x06);    // All port A (except A1, A2) as output 
20CA:  MOVLW  06
20CC:  MOVWF  F92
....................    set_tris_b(0x00);    // All port B as output 
20CE:  MOVLW  00
20D0:  MOVWF  F93
....................    set_tris_c(0x90);    // PIN_C7=RXD; PIN_C4=SPI-SDI as inputs, other pins as outputs 
20D2:  MOVLW  90
20D4:  MOVWF  F94
....................    set_tris_d(0x40);    // All port D (except D6) as output 
20D6:  MOVLW  40
20D8:  MOVWF  F95
....................    set_tris_e(0x00);    // PortE bit 0, 1, 2 as output 
20DA:  BCF    F96.0
20DC:  BCF    F96.1
20DE:  BCF    F96.2
20E0:  BCF    F96.3
....................    output_high(PIN_A0); // Disable the AFE 
20E2:  BSF    F89.0
....................    // output_high(MAX_CS1);//Disable the Max31865-IC1 
....................    // output_high(MAX_CS2);//Disable the Max31865-IC2 
....................    output_high(CAP_CS1);                                                  // Disable the CAP1188-IC1 
20E4:  BSF    F8C.4
....................    output_high(CAP_CS2);                                                  // Disable the CAP1188-IC2 
20E6:  BSF    F8C.5
....................    setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_16); // LMP90100 
20E8:  BCF    FC6.5
20EA:  MOVLW  21
20EC:  MOVWF  FC6
20EE:  MOVLW  40
20F0:  MOVWF  FC7
....................    // setup_spi(SPI_MASTER|SPI_H_TO_L|SPI_XMIT_L_TO_H|SPI_CLK_DIV_16); //Max31865 
....................    key_init(); 
....................    adc_init(); 
....................    triac_init(); 
....................    RTCC_init(); // setup_timer0 
*
224E:  GOTO   11FA
....................    Start_DS1307(); 
2252:  GOTO   136E
....................    // max31865_init(); 
....................    PutDateTime(); 
2256:  CALL   1562
....................    LedClockOn(); 
225A:  GOTO   15CA
....................    g_state = ST_IDLE; 
225E:  MOVLW  01
2260:  MOVWF  38
....................    old_state = g_state; 
2262:  MOVFF  38,39
....................    SpeakerOff(); 
2266:  CALL   00B4
....................    Load_Data(); 
226A:  GOTO   15EE
....................    Load_PID(); 
226E:  CALL   1768
....................    switch (g_mode) 
2272:  MOVF   3A,W
2274:  XORLW  01
2276:  BZ    229E
2278:  XORLW  03
227A:  BZ    22A2
227C:  XORLW  01
227E:  BZ    22A6
2280:  XORLW  07
2282:  BZ    22AA
2284:  XORLW  01
2286:  BZ    22AE
2288:  XORLW  03
228A:  BZ    22B2
228C:  XORLW  01
228E:  BZ    22B6
2290:  XORLW  0F
2292:  BZ    22BA
2294:  XORLW  01
2296:  BZ    22BE
2298:  XORLW  03
229A:  BZ    22C2
229C:  BRA    22C6
....................    { 
....................    case PROGRAM1: 
....................       Process_Touch_0(); 
229E:  RCALL  1B44
....................       break; 
22A0:  BRA    22E6
....................    case PROGRAM2: 
....................       Process_Touch_1(); 
22A2:  RCALL  1BB6
....................       break; 
22A4:  BRA    22E6
....................    case PROGRAM3: 
....................       Process_Touch_2(); 
22A6:  RCALL  1C28
....................       break; 
22A8:  BRA    22E6
....................    case PROGRAM4: 
....................       Process_Touch_3(); 
22AA:  RCALL  1C9A
....................       break; 
22AC:  BRA    22E6
....................    case PROGRAM5: 
....................       Process_Touch_4(); 
22AE:  RCALL  1D0C
....................       break; 
22B0:  BRA    22E6
....................    case PROGRAM6: 
....................       Process_Touch_5(); 
22B2:  RCALL  1D7E
....................       break; 
22B4:  BRA    22E6
....................    case PROGRAM7: 
....................       Process_Touch_6(); 
22B6:  RCALL  1DF0
....................       break; 
22B8:  BRA    22E6
....................    case PROGRAM8: 
....................       Process_Touch_7(); 
22BA:  RCALL  1E62
....................       break; 
22BC:  BRA    22E6
....................    case PROGRAM9: 
....................       Process_Touch_8(); 
22BE:  RCALL  1ED4
....................       break; 
22C0:  BRA    22E6
....................    case PROGRAM10: 
....................       Process_Touch_A(); 
22C2:  RCALL  1F46
....................       break; 
22C4:  BRA    22E6
....................    default: 
....................       Led_D_On(); 
22C6:  RCALL  1F7A
....................       Load_Data_User(); 
22C8:  RCALL  1FB6
....................       g_mode = USER_MODE; 
22CA:  MOVLW  0B
22CC:  MOVWF  3A
....................       ster_time = user_ster_time; 
22CE:  MOVFF  59,82
22D2:  MOVFF  58,81
....................       setpoint = user_setpoint; 
22D6:  MOVFF  53,66
22DA:  MOVFF  52,65
....................       protect = user_protect; 
22DE:  MOVFF  55,68
22E2:  MOVFF  54,67
....................       break; 
....................    } 
22E6:  GOTO   6898 (RETURN)
.................... } 
....................  
.................... void main() 
*
6790:  CLRF   FF8
6792:  BCF    FD0.7
6794:  BSF    07.7
6796:  MOVLW  70
6798:  MOVWF  FD3
679A:  MOVLW  40
679C:  MOVWF  F9B
679E:  MOVF   FD3,W
67A0:  BSF    FB8.3
67A2:  MOVLW  40
67A4:  MOVWF  FAF
67A6:  MOVLW  03
67A8:  MOVWF  FB0
67AA:  MOVLW  A6
67AC:  MOVWF  FAC
67AE:  MOVLW  90
67B0:  MOVWF  FAB
67B2:  MOVLW  10
67B4:  MOVWF  37
67B6:  MOVLW  01
67B8:  MOVWF  3A
67BA:  CLRF   3B
67BC:  CLRF   3D
67BE:  MOVLW  BB
67C0:  MOVWF  3C
67C2:  CLRF   3E
67C4:  CLRF   44
67C6:  CLRF   45
67C8:  CLRF   46
67CA:  MOVLW  3A
67CC:  MOVWF  53
67CE:  MOVLW  98
67D0:  MOVWF  52
67D2:  MOVLW  3E
67D4:  MOVWF  55
67D6:  MOVLW  80
67D8:  MOVWF  54
67DA:  CLRF   57
67DC:  MOVLW  0F
67DE:  MOVWF  56
67E0:  CLRF   59
67E2:  MOVLW  5A
67E4:  MOVWF  58
67E6:  CLRF   5B
67E8:  CLRF   5A
67EA:  CLRF   62
67EC:  CLRF   61
67EE:  CLRF   64
67F0:  CLRF   63
67F2:  CLRF   6C
67F4:  CLRF   6B
67F6:  CLRF   6E
67F8:  CLRF   6D
67FA:  CLRF   70
67FC:  CLRF   6F
67FE:  CLRF   72
6800:  CLRF   71
6802:  CLRF   74
6804:  CLRF   73
6806:  CLRF   76
6808:  CLRF   75
680A:  CLRF   78
680C:  CLRF   77
680E:  CLRF   7A
6810:  CLRF   79
6812:  CLRF   7C
6814:  CLRF   7B
6816:  CLRF   7E
6818:  CLRF   7D
681A:  MOVLW  0A
681C:  MOVWF  x8B
681E:  CLRF   x8D
6820:  CLRF   x8C
6822:  CLRF   x8F
6824:  CLRF   x8E
6826:  CLRF   x91
6828:  CLRF   x90
682A:  CLRF   x93
682C:  CLRF   x92
682E:  CLRF   x95
6830:  CLRF   x94
6832:  CLRF   x97
6834:  CLRF   x96
6836:  MOVLW  10
6838:  MOVWF  x98
683A:  CLRF   xA6
683C:  CLRF   xA5
683E:  CLRF   xBB
6840:  CLRF   xBC
6842:  MOVLW  1E
6844:  MOVWF  xBD
6846:  MOVLW  01
6848:  MOVWF  xBE
684A:  CLRF   xBF
684C:  CLRF   xC0
684E:  CLRF   xC1
6850:  CLRF   xC2
6852:  CLRF   xC3
6854:  CLRF   xC4
6856:  CLRF   xC5
6858:  CLRF   xC6
685A:  CLRF   xC8
685C:  CLRF   xC9
685E:  CLRF   xCA
6860:  CLRF   xCE
6862:  CLRF   xCD
6864:  CLRF   xCC
6866:  CLRF   xCB
6868:  CLRF   xD1
686A:  CLRF   xD5
686C:  CLRF   xD4
686E:  CLRF   xD3
6870:  CLRF   xD2
6872:  CLRF   xD9
6874:  CLRF   xD8
6876:  CLRF   xD7
6878:  CLRF   xD6
687A:  MOVLW  01
687C:  MOVWF  xDB
687E:  MOVLW  AE
6880:  MOVWF  xDA
6882:  MOVF   FC1,W
6884:  ANDLW  C0
6886:  IORLW  0F
6888:  MOVWF  FC1
688A:  MOVLW  07
688C:  MOVWF  FB4
688E:  CLRF   xC7
6890:  CLRF   xCF
6892:  CLRF   xD0
.................... { 
....................       //delay_ms(1000); 
....................    global_init(); 
6894:  GOTO   20C0
....................  
....................    while (TRUE) 
....................    { 
....................       Process_Touch(); 
6898:  GOTO   3AD0
....................       Process_Led(); 
689C:  GOTO   4C32
....................       Process_Rs232(); 
68A0:  GOTO   5760
....................       Get_Data(); 
68A4:  GOTO   5E2E
....................       if (fan_speed > 0) 
68A8:  MOVF   x8B,F
68AA:  BZ    68BA
....................       { 
....................          SetFanSimulator(); 
68AC:  BRA    6100
....................          if (fan_speed == FAN_SPEED_MAX) 
68AE:  MOVF   x8B,W
68B0:  SUBLW  0A
68B2:  BNZ   68B8
....................             Ctrl2On(); 
....................       } 
*
68B8:  BRA    68C0
....................       else 
....................       { 
....................          LedFanOffAll(); 
68BA:  BRA    613C
....................          Ctrl2Off(); 
....................       } 
....................       if (g_state >= ST_RUN_WAITING_TIME) 
*
68C0:  MOVF   38,W
68C2:  SUBLW  18
68C4:  BC    68CA
....................       { 
....................          Process_Data(); 
68C6:  BRA    6624
....................          Process_LifeCycle(); 
68C8:  BRA    66A2
....................       } 
68CA:  BRA    6898
....................    } 
.................... } 
....................  
68CC:  SLEEP 
.................... // 
.................... //============================================================================== 
.................... // 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 0E1F   NOPUT BROWNOUT BORV21 NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
