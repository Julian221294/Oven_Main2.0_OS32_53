D G "__PCH__" 0 124 ""5.025""
D G "__DEVICE__" 0 124 "4523"
D G "__DATE__" 0 124 ""01-Nov-23""
D G "__TIME__" 0 124 ""10:38:33"" "Standard Header file for the PIC18F4523 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 43 "int8" `54 
f B "set_tris_a" 2 43 "void(int8 value)" `53 
v L "value" 2 44 "int8" `56 
f B "set_tris_b" 2 44 "void(int8 value)" `55 
v L "value" 2 45 "int8" `58 
f B "set_tris_c" 2 45 "void(int8 value)" `57 
v L "value" 2 46 "int8" `60 
f B "set_tris_d" 2 46 "void(int8 value)" `59 
v L "value" 2 47 "int8" `62 
f B "set_tris_e" 2 47 "void(int8 value)" `61 
f B "get_tris_a" 2 48 "int8()" `63 
f B "get_tris_b" 2 49 "int8()" `64 
f B "get_tris_c" 2 50 "int8()" `65 
f B "get_tris_d" 2 51 "int8()" `66 
f B "get_tris_e" 2 52 "int8()" `67 
v L "value" 2 53 "int8" `69 
f B "output_a" 2 53 "void(int8 value)" `68 
v L "value" 2 54 "int8" `71 
f B "output_b" 2 54 "void(int8 value)" `70 
v L "value" 2 55 "int8" `73 
f B "output_c" 2 55 "void(int8 value)" `72 
v L "value" 2 56 "int8" `75 
f B "output_d" 2 56 "void(int8 value)" `74 
v L "value" 2 57 "int8" `77 
f B "output_e" 2 57 "void(int8 value)" `76 
f B "input_a" 2 58 "int8()" `78 
f B "input_b" 2 59 "int8()" `79 
f B "input_c" 2 60 "int8()" `80 
f B "input_d" 2 61 "int8()" `81 
f B "input_e" 2 62 "int8()" `82 
f B "input_change_a" 2 63 "int8()" `83 
f B "input_change_b" 2 64 "int8()" `84 
f B "input_change_c" 2 65 "int8()" `85 
f B "input_change_d" 2 66 "int8()" `86 
f B "input_change_e" 2 67 "int8()" `87 
v L "pin" 2 68 "int16" `89 
f B "input" 2 68 "int8(int16 pin)" `88 
v L "pin" 2 69 "int16" `91 
f B "input_state" 2 69 "int8(int16 pin)" `90 
v L "pin" 2 70 "int16" `93 
f B "output_low" 2 70 "void(int16 pin)" `92 
v L "pin" 2 71 "int16" `95 
f B "output_high" 2 71 "void(int16 pin)" `94 
v L "pin" 2 72 "int16" `97 
f B "output_toggle" 2 72 "void(int16 pin)" `96 
v L "pin" 2 73 "int16" `99 
v L "level" 2 73 "int8" `100 
f B "output_bit" 2 73 "void(int16 pin,int8 level)" `98 
v L "pin" 2 74 "int16" `102 
f B "output_float" 2 74 "void(int16 pin)" `101 
v L "pin" 2 75 "int16" `104 
f B "output_drive" 2 75 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 79 "31744"
d G "PIN_A1" 2 80 "31745"
d G "PIN_A2" 2 81 "31746"
d G "PIN_A3" 2 82 "31747"
d G "PIN_A4" 2 83 "31748"
d G "PIN_A5" 2 84 "31749"
d G "PIN_A6" 2 85 "31750"
d G "PIN_A7" 2 86 "31751"
d G "PIN_B0" 2 88 "31752"
d G "PIN_B1" 2 89 "31753"
d G "PIN_B2" 2 90 "31754"
d G "PIN_B3" 2 91 "31755"
d G "PIN_B4" 2 92 "31756"
d G "PIN_B5" 2 93 "31757"
d G "PIN_B6" 2 94 "31758"
d G "PIN_B7" 2 95 "31759"
d G "PIN_C0" 2 97 "31760"
d G "PIN_C1" 2 98 "31761"
d G "PIN_C2" 2 99 "31762"
d G "PIN_C3" 2 100 "31763"
d G "PIN_C4" 2 101 "31764"
d G "PIN_C5" 2 102 "31765"
d G "PIN_C6" 2 103 "31766"
d G "PIN_C7" 2 104 "31767"
d G "PIN_D0" 2 106 "31768"
d G "PIN_D1" 2 107 "31769"
d G "PIN_D2" 2 108 "31770"
d G "PIN_D3" 2 109 "31771"
d G "PIN_D4" 2 110 "31772"
d G "PIN_D5" 2 111 "31773"
d G "PIN_D6" 2 112 "31774"
d G "PIN_D7" 2 113 "31775"
d G "PIN_E0" 2 115 "31776"
d G "PIN_E1" 2 116 "31777"
d G "PIN_E2" 2 117 "31778"
d G "PIN_E3" 2 118 "31779"
d G "FALSE" 2 121 "0"
d G "TRUE" 2 122 "1"
d G "BYTE" 2 124 "int8"
d G "BOOLEAN" 2 125 "int1"
d G "getc" 2 127 "getch"
d G "fgetc" 2 128 "getch"
d G "getchar" 2 129 "getch"
d G "putc" 2 130 "putchar"
d G "fputc" 2 131 "putchar"
d G "fgets" 2 132 "gets"
d G "fputs" 2 133 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 138 "int8()" `105 
f B "reset_cpu" 2 139 "void()" `106 
f B "sleep" 2 140 "void()" `107 
v L "type" 2 141 "int8" `109 
f G "sleep" 2 141 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 143 "7"
d G "MCLR_FROM_SLEEP" 2 144 "11"
d G "MCLR_FROM_RUN" 2 145 "15"
d G "NORMAL_POWER_UP" 2 146 "12"
d G "BROWNOUT_RESTART" 2 147 "14"
d G "WDT_FROM_SLEEP" 2 148 "3"
d G "RESET_INSTRUCTION" 2 149 "0"
d G "SLEEP_FULL" 2 152 "0" "Default"
d G "SLEEP_IDLE" 2 153 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 160 "int8" `111 
f B "setup_timer_0" 2 160 "void(int8 mode)" `110 
v L "value" 2 161 "int16" `113 
f B "set_timer0" 2 161 "void(int16 value)" `112 
f B "get_timer0" 2 162 "int16()" `114 
v L "mode" 2 163 "int8" `116 
v L "prescaler" 2 163 "int8" `117 
f B "setup_counters" 2 163 "void(int8 mode,int8 prescaler)" `115 
v L "value" 2 164 "int16" `119 
f B "set_rtcc" 2 164 "void(int16 value)" `118 
f B "get_rtcc" 2 165 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 167 "0"
d G "T0_EXT_L_TO_H" 2 168 "32"
d G "T0_EXT_H_TO_L" 2 169 "48"
d G "T0_DIV_1" 2 171 "8"
d G "T0_DIV_2" 2 172 "0"
d G "T0_DIV_4" 2 173 "1"
d G "T0_DIV_8" 2 174 "2"
d G "T0_DIV_16" 2 175 "3"
d G "T0_DIV_32" 2 176 "4"
d G "T0_DIV_64" 2 177 "5"
d G "T0_DIV_128" 2 178 "6"
d G "T0_DIV_256" 2 179 "7"
d G "T0_OFF" 2 181 "0x80"
d G "T0_8_BIT" 2 183 "0x40"
d G "RTCC_INTERNAL" 2 185 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 186 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 187 "48"
d G "RTCC_DIV_1" 2 188 "8"
d G "RTCC_DIV_2" 2 189 "0"
d G "RTCC_DIV_4" 2 190 "1"
d G "RTCC_DIV_8" 2 191 "2"
d G "RTCC_DIV_16" 2 192 "3"
d G "RTCC_DIV_32" 2 193 "4"
d G "RTCC_DIV_64" 2 194 "5"
d G "RTCC_DIV_128" 2 195 "6"
d G "RTCC_DIV_256" 2 196 "7"
d G "RTCC_OFF" 2 197 "0x80"
d G "RTCC_8_BIT" 2 198 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 209 "int16" `122 
f B "setup_wdt" 2 209 "void(int16 mode)" `121 
f B "restart_wdt" 2 210 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 212 "0x100"
d G "WDT_OFF" 2 213 "0"
d G "WDT_4MS" 2 215 "0x300"
d G "WDT_8MS" 2 216 "0x500"
d G "WDT_16MS" 2 217 "0x700"
d G "WDT_32MS" 2 218 "0x900"
d G "WDT_64MS" 2 219 "0xB00"
d G "WDT_128MS" 2 220 "0xD00"
d G "WDT_256MS" 2 221 "0xF00"
d G "WDT_512MS" 2 222 "0x1100"
d G "WDT_1S" 2 223 "0x1300"
d G "WDT_2S" 2 224 "0x1500"
d G "WDT_4S" 2 225 "0x1700"
d G "WDT_8S" 2 226 "0x1900"
d G "WDT_16" 2 227 "0x1B00"
d G "WDT_32S" 2 228 "0x1D00"
d G "WDT_64S" 2 229 "0x1F00"
d G "WDT_128S" 2 230 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 235 "int16" `125 
f B "setup_timer_1" 2 235 "void(int16 mode)" `124 
f B "get_timer1" 2 236 "int16()" `126 
v L "value" 2 237 "int16" `128 
f B "set_timer1" 2 237 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 240 "0"
d G "T1_INTERNAL" 2 241 "0x85"
d G "T1_EXTERNAL" 2 242 "0x87"
d G "T1_EXTERNAL_SYNC" 2 243 "0x83"
d G "T1_CLK_OUT" 2 245 "8"
d G "T1_DIV_BY_1" 2 247 "0"
d G "T1_DIV_BY_2" 2 248 "0x10"
d G "T1_DIV_BY_4" 2 249 "0x20"
d G "T1_DIV_BY_8" 2 250 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 255 "int8" `130 
v L "period" 2 255 "int8" `131 
v L "postscale" 2 255 "int8" `132 
f B "setup_timer_2" 2 255 "void(int8 mode,int8 period,int8 postscale)" `129 
f B "get_timer2" 2 256 "int8()" `133 
v L "value" 2 257 "int8" `135 
f B "set_timer2" 2 257 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 259 "0"
d G "T2_DIV_BY_1" 2 260 "4"
d G "T2_DIV_BY_4" 2 261 "5"
d G "T2_DIV_BY_16" 2 262 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 267 "int16" `137 
f B "setup_timer_3" 2 267 "void(int16 mode)" `136 
f B "get_timer3" 2 268 "int16()" `138 
v L "value" 2 269 "int16" `140 
f B "set_timer3" 2 269 "void(int16 value)" `139  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 272 "0"
d G "T3_INTERNAL" 2 273 "0x85"
d G "T3_EXTERNAL" 2 274 "0x87"
d G "T3_EXTERNAL_SYNC" 2 275 "0x83"
d G "T3_DIV_BY_1" 2 277 "0"
d G "T3_DIV_BY_2" 2 278 "0x10"
d G "T3_DIV_BY_4" 2 279 "0x20"
d G "T3_DIV_BY_8" 2 280 "0x30"
c L "set_timer3" 2 3 4 "FUNCTION"
v L "mode" 2 286 "int32" `142 
f B "setup_ccp1" 2 286 "void(int32 mode)" `141 
v L "mode" 2 287 "int32" `144 
v L "pwm" 2 287 "int8" `145 
f G "setup_ccp1" 2 287 "void(int32 mode,int8 pwm)" `143 
v L "value" 2 288 "int16" `147 
f B "set_pwm1_duty" 2 288 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 290 "0"
d G "CCP_CAPTURE_FE" 2 291 "0x04"
d G "CCP_CAPTURE_RE" 2 292 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 293 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 294 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 295 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 296 "0x09"
d G "CCP_COMPARE_INT" 2 297 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 298 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 299 "0x0B"
d G "CCP_PWM" 2 300 "0x0C"
d G "CCP_PWM_PLUS_1" 2 301 "0x1c"
d G "CCP_PWM_PLUS_2" 2 302 "0x2c"
d G "CCP_PWM_PLUS_3" 2 303 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 310 "0x48"
d G "T3_CCP2" 2 311 "0x8"
d G "CCP_PWM_H_H" 2 314 "0x0c"
d G "CCP_PWM_H_L" 2 315 "0x0d"
d G "CCP_PWM_L_H" 2 316 "0x0e"
d G "CCP_PWM_L_L" 2 317 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 319 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 320 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 321 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 323 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 324 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 325 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 326 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 327 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 328 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 329 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 331 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 332 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 333 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 335 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 336 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 337 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 339 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 343 "int32" `152 
f B "setup_ccp2" 2 343 "void(int32 mode)" `151 
v L "mode" 2 344 "int32" `154 
v L "pwm" 2 344 "int8" `155 
f G "setup_ccp2" 2 344 "void(int32 mode,int8 pwm)" `153 
v L "value" 2 345 "int16" `157 
f B "set_pwm2_duty" 2 345 "void(int16 value)" `156 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
v L "mode" 2 354 "int8" `162 
f B "setup_psp" 2 354 "void(int8 mode)" `161 
f B "psp_output_full" 2 355 "int8()" `163 
f B "psp_input_full" 2 356 "int8()" `164 
f B "psp_overflow" 2 357 "int8()" `165  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 359 "0x10"
d G "PSP_DISABLED" 2 360 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
v L "mode" 2 367 "int32" `168 
f B "setup_spi" 2 367 "void(int32 mode)" `167 
v L "value" 2 368 "int8" `170 
f B "spi_write" 2 368 "void(int8 value)" `169 
f B "spi_read" 2 369 "int8()" `171 
v L "value" 2 370 "int8" `173 
f G "spi_read" 2 370 "int8(int8 value)" `172 
f B "spi_data_in" 2 371 "int8()" `174 
v L "mode" 2 372 "int32" `176 
f B "setup_spi2" 2 372 "void(int32 mode)" `175 
v L "value" 2 373 "int8" `178 
f B "spi_write2" 2 373 "void(int8 value)" `177 
f B "spi_read2" 2 374 "int8()" `179 
v L "value" 2 375 "int8" `181 
f G "spi_read2" 2 375 "int8(int8 value)" `180 
f B "spi_data_in2" 2 376 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 378 "0x00"
d G "SPI_MASTER" 2 379 "0x20"
d G "SPI_SLAVE" 2 380 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 381 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 382 "0x00"
d G "SPI_CLK_DIV_4" 2 383 "0x00"
d G "SPI_CLK_DIV_16" 2 384 "0x01"
d G "SPI_CLK_DIV_64" 2 385 "0x02"
d G "SPI_CLK_T2" 2 386 "0x03"
d G "SPI_SS_DISABLED" 2 387 "0x01"
d G "SPI_XMIT_L_TO_H" 2 389 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 390 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 392 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 393 "0x8000"
d G "SPI_L_TO_H" 2 396 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 397 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
v L "baud" 2 401 "int32" `184 
f B "setup_uart" 2 401 "void(int32 baud)" `183 
v L "baud" 2 402 "int32" `186 
v L "stream" 2 402 "int8" `187 
f G "setup_uart" 2 402 "void(int32 baud,int8 stream)" `185 
v L "baud" 2 403 "int32" `189 
v L "stream" 2 403 "int8" `190 
v L "clock" 2 403 "int32" `191 
f G "setup_uart" 2 403 "void(int32 baud,int8 stream,int32 clock)" `188 
v L "baud" 2 404 "int32" `193 
f B "set_uart_speed" 2 404 "void(int32 baud)" `192 
v L "baud" 2 405 "int32" `195 
v L "stream" 2 405 "int8" `196 
f G "set_uart_speed" 2 405 "void(int32 baud,int8 stream)" `194 
v L "baud" 2 406 "int32" `198 
v L "stream" 2 406 "int8" `199 
v L "clock" 2 406 "int32" `200 
f G "set_uart_speed" 2 406 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 410 "2"
d G "UART_DATA" 2 411 "4"
d G "UART_AUTODETECT" 2 412 "8"
d G "UART_AUTODETECT_NOWAIT" 2 413 "9"
d G "UART_WAKEUP_ON_RDA" 2 414 "10"
d G "UART_SEND_BREAK" 2 415 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 419 "int32" `202 
f B "setup_comparator" 2 419 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 421 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 422 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 423 "0xbcf05"
d G "NC_NC_NC_NC" 2 424 "0x0ff07"
d G "A0_A3_A1_A2" 2 425 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 426 "0x9ef01"
d G "A0_VR_A1_VR" 2 427 "0x3ff06"
d G "A3_VR_A2_VR" 2 428 "0xcff0e"
d G "CP1_INVERT" 2 429 "0x0000010"
d G "CP2_INVERT" 2 430 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 437 "int8" `206 
f B "setup_vref" 2 437 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 439 "0xa0"
d G "VREF_HIGH" 2 440 "0x80"
d G "VREF_F5" 2 442 "0x40"
d G "VREF_COMP" 2 443 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
v L "mode" 2 447 "int8" `208 
f B "setup_low_volt_detect" 2 447 "void(int8 mode)" `207  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 449 "0x1F"
d G "LVD_45" 2 450 "0x1E"
d G "LVD_42" 2 451 "0x1D"
d G "LVD_40" 2 452 "0x1C"
d G "LVD_38" 2 453 "0x1B"
d G "LVD_36" 2 454 "0x1A"
d G "LVD_35" 2 455 "0x19"
d G "LVD_33" 2 456 "0x18"
d G "LVD_30" 2 457 "0x17"
d G "LVD_28" 2 458 "0x16"
d G "LVD_27" 2 459 "0x15"
d G "LVD_25" 2 460 "0x14"
d G "LVD_24" 2 461 "0x13"
d G "LVD_23" 2 462 "0x12"
d G "LVD_22" 2 463 "0x11"
d G "LVD_21" 2 464 "0x10"
d G "LVD_TRIGGER_BELOW" 2 466 "0"
d G "LVD_TRIGGER_ABOVE" 2 467 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
v L "mode" 2 472 "int8" `210 
f B "setup_oscillator" 2 472 "int8(int8 mode)" `209 
v L "mode" 2 473 "int8" `212 
v L "tune" 2 473 "sint8" `213 
f G "setup_oscillator" 2 473 "int8(int8 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 476 "0"
d G "OSC_125KHZ" 2 477 "0x10"
d G "OSC_250KHZ" 2 478 "0x20"
d G "OSC_500KHZ" 2 479 "0x30"
d G "OSC_1MHZ" 2 480 "0x40"
d G "OSC_2MHZ" 2 481 "0x50"
d G "OSC_4MHZ" 2 482 "0x60"
d G "OSC_8MHZ" 2 483 "0x70"
d G "OSC_16MHZ" 2 484 "0x4060"
d G "OSC_32MHZ" 2 485 "0x4070"
d G "OSC_TIMER1" 2 487 "1"
d G "OSC_INTRC" 2 488 "2"
d G "OSC_NORMAL" 2 489 "0"
d G "OSC_IDLE_MODE" 2 491 "0x80"
d G "OSC_31250" 2 492 "0x8000"
d G "OSC_PLL_ON" 2 493 "0x4000"
d G "OSC_PLL_OFF" 2 494 "0"
d G "OSC_STATE_STABLE" 2 498 "4"
d G "OSC_STATE_EXT_RUNNING" 2 499 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 506 "int16" `215 
f B "setup_adc" 2 506 "void(int16 mode)" `214 
f B "read_adc" 2 507 "int8()" `216 
v L "mode" 2 508 "int8" `218 
f G "read_adc" 2 508 "int8(int8 mode)" `217 
f G "read_adc" 2 509 "int16()" `219 
v L "mode" 2 510 "int8" `221 
f G "read_adc" 2 510 "int16(int8 mode)" `220 
f B "adc_done" 2 511 "int8()" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 513 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 514 "0x100"
d G "ADC_CLOCK_DIV_4" 2 515 "0x04"
d G "ADC_CLOCK_DIV_8" 2 516 "0x01"
d G "ADC_CLOCK_DIV_16" 2 517 "0x05"
d G "ADC_CLOCK_DIV_32" 2 518 "0x02"
d G "ADC_CLOCK_DIV_64" 2 519 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 520 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 522 "0x00"
d G "ADC_TAD_MUL_2" 2 523 "0x08"
d G "ADC_TAD_MUL_4" 2 524 "0x10"
d G "ADC_TAD_MUL_6" 2 525 "0x18"
d G "ADC_TAD_MUL_8" 2 526 "0x20"
d G "ADC_TAD_MUL_12" 2 527 "0x28"
d G "ADC_TAD_MUL_16" 2 528 "0x30"
d G "ADC_TAD_MUL_20" 2 529 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 532 "int8" `224 
f B "setup_adc_ports" 2 532 "void(int8 pins)" `223 
v L "pins" 2 533 "int8" `226 
v L "reference" 2 533 "int8" `227 
f G "setup_adc_ports" 2 533 "void(int8 pins,int8 reference)" `225 
v L "channel" 2 534 "int8" `229 
f B "set_adc_channel" 2 534 "void(int8 channel)" `228  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 537 "0x0F" "None"
d G "ALL_ANALOG" 2 538 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 539 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 540 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 541 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 542 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 543 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 544 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 545 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 546 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 547 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 548 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 549 "0x0D" "A0 A1"
d G "AN0" 2 550 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 551 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 552 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 553 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 554 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 555 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 556 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 557 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 558 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 559 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 560 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 561 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 562 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 565 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 566 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 567 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 568 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 571 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 572 "1"
d G "ADC_READ_ONLY" 2 573 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 579 "sint8" `231 
f B "abs" 2 579 "sint8(sint8 x)" `230 
v L "x" 2 580 "sint16" `233 
f G "abs" 2 580 "sint16(sint16 x)" `232 
v L "x" 2 581 "sint32" `235 
f G "abs" 2 581 "sint32(sint32 x)" `234 
v L "x" 2 582 "float" `237 
f G "abs" 2 582 "float(float x)" `236 
v L "??65535" 2 583 "int8" `239 
v L "??65535" 2 583 "int8" `240 
f B "_mul" 2 583 "int16(int8 ,int8 )" `238 
v L "??65535" 2 584 "sint8" `239 
v L "??65535" 2 584 "sint8" `243 
f G "_mul" 2 584 "sint16(sint8 ,sint8 )" `241 
v L "??65535" 2 585 "int16" `239 
v L "??65535" 2 585 "int16" `246 
f G "_mul" 2 585 "int32(int16 ,int16 )" `244 
v L "??65535" 2 586 "sint16" `239 
v L "??65535" 2 586 "sint16" `249 
f G "_mul" 2 586 "sint32(sint16 ,sint16 )" `247  "Memory Manipulation Prototypes:"
v L "bank" 2 589 "int8" `251 
v L "offset" 2 589 "int8" `252 
f B "read_bank" 2 589 "int8(int8 bank,int8 offset)" `250 
v L "bank" 2 590 "int8" `254 
v L "offset" 2 590 "int8" `255 
v L "value" 2 590 "int8" `256 
f B "write_bank" 2 590 "void(int8 bank,int8 offset,int8 value)" `253 
v L "dest" 2 591 "*int8" `258 
v L "src" 2 591 "*int8" `259 
f B "strcpy" 2 591 "void(*int8 dest,*int8 src)" `257 
v L "dest" 2 592 "*int8" `261 
v L "src" 2 592 "*int8" `262 
f B "strcopy" 2 592 "void(*int8 dest,*int8 src)" `260 
v L "destination" 2 593 "*int8" `264 
v L "value" 2 593 "int8" `265 
v L "num" 2 593 "int16" `266 
f B "memset" 2 593 "void(*int8 destination,int8 value,int16 num)" `263 
v L "destination" 2 594 "*int8" `268 
v L "source" 2 594 "*int8" `269 
v L "num" 2 594 "int16" `270 
f B "memcpy" 2 594 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
v L "cvalue" 2 597 "int8" `272 
f B "toupper" 2 597 "int8(int8 cvalue)" `271 
v L "cvalue" 2 598 "int8" `274 
f B "tolower" 2 598 "int8(int8 cvalue)" `273 
v L "string" 2 599 "*int8" `276 
v L "cstring" 2 599 "*int8" `277 
f B "sprintf" 2 599 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
v L "address" 2 602 "*int8" `280 
v L "bytes" 2 602 "int8" `281 
v L "value" 2 602 "int8" `282 
f B "shift_left" 2 602 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 2 603 "*int8" `284 
v L "bytes" 2 603 "int8" `285 
v L "value" 2 603 "int8" `286 
f B "shift_right" 2 603 "int8(*int8 address,int8 bytes,int8 value)" `283 
v L "address" 2 604 "*int8" `288 
v L "bytes" 2 604 "int8" `289 
f B "rotate_left" 2 604 "void(*int8 address,int8 bytes)" `287 
v L "address" 2 605 "*int8" `291 
v L "bytes" 2 605 "int8" `292 
f B "rotate_right" 2 605 "void(*int8 address,int8 bytes)" `290 
v L "value" 2 606 "int8" `294 
f B "swap" 2 606 "void(int8 value)" `293 
v L "var" 2 607 "int16" `296 
v L "offset" 2 607 "int8" `297 
f B "make8" 2 607 "int8(int16 var,int8 offset)" `295 
v L "var" 2 608 "int32" `296 
v L "offset" 2 608 "int8" `300 
f G "make8" 2 608 "int8(int32 var,int8 offset)" `298 
v L "varhigh" 2 609 "int8" `302 
v L "varlow" 2 609 "int8" `303 
f B "make16" 2 609 "int16(int8 varhigh,int8 varlow)" `301 
v L "var1" 2 610 "int16" `305 
f B "make32" 2 610 "int32(int16 var1)" `304 
v L "var1" 2 611 "int16" `307 
v L "var2" 2 611 "int16" `308 
f G "make32" 2 611 "int32(int16 var1,int16 var2)" `306 
v L "var1" 2 612 "int16" `307 
v L "var2" 2 612 "int8" `311 
f G "make32" 2 612 "int32(int16 var1,int8 var2)" `309 
v L "var1" 2 613 "int16" `313 
v L "var2" 2 613 "int8" `314 
v L "var3" 2 613 "int8" `315 
f G "make32" 2 613 "int32(int16 var1,int8 var2,int8 var3)" `312 
v L "var1" 2 614 "int8" `317 
f G "make32" 2 614 "int32(int8 var1)" `316 
v L "var1" 2 615 "int8" `307 
v L "var2" 2 615 "int8" `320 
f G "make32" 2 615 "int32(int8 var1,int8 var2)" `318 
v L "var1" 2 616 "int8" `313 
v L "var2" 2 616 "int8" `314 
v L "var3" 2 616 "int8" `324 
f G "make32" 2 616 "int32(int8 var1,int8 var2,int8 var3)" `321 
v L "var1" 2 617 "int8" `326 
v L "var2" 2 617 "int8" `327 
v L "var3" 2 617 "int8" `328 
v L "var4" 2 617 "int8" `329 
f G "make32" 2 617 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
v L "var1" 2 618 "int8" `307 
v L "var2" 2 618 "int16" `332 
f G "make32" 2 618 "int32(int8 var1,int16 var2)" `330 
v L "var1" 2 619 "int8" `313 
v L "var2" 2 619 "int16" `314 
v L "var3" 2 619 "int8" `336 
f G "make32" 2 619 "int32(int8 var1,int16 var2,int8 var3)" `333 
v L "var1" 2 620 "int8" `313 
v L "var2" 2 620 "int8" `314 
v L "var3" 2 620 "int16" `340 
f G "make32" 2 620 "int32(int8 var1,int8 var2,int16 var3)" `337 
v L "var" 2 621 "int8" `342 
v L "bit" 2 621 "int8" `343 
f B "bit_set" 2 621 "void(int8 var,int8 bit)" `341 
v L "var" 2 622 "int16" `342 
v L "bit" 2 622 "int8" `346 
f G "bit_set" 2 622 "void(int16 var,int8 bit)" `344 
v L "var" 2 623 "int32" `342 
v L "bit" 2 623 "int8" `349 
f G "bit_set" 2 623 "void(int32 var,int8 bit)" `347 
v L "var" 2 624 "int8" `351 
v L "bit" 2 624 "int8" `352 
f B "bit_clear" 2 624 "void(int8 var,int8 bit)" `350 
v L "var" 2 625 "int16" `351 
v L "bit" 2 625 "int8" `355 
f G "bit_clear" 2 625 "void(int16 var,int8 bit)" `353 
v L "var" 2 626 "int32" `351 
v L "bit" 2 626 "int8" `358 
f G "bit_clear" 2 626 "void(int32 var,int8 bit)" `356 
v L "var" 2 627 "int8" `360 
v L "bit" 2 627 "int8" `361 
f B "bit_test" 2 627 "int8(int8 var,int8 bit)" `359 
v L "var" 2 628 "int16" `360 
v L "bit" 2 628 "int8" `364 
f G "bit_test" 2 628 "int8(int16 var,int8 bit)" `362 
v L "var" 2 629 "int32" `360 
v L "bit" 2 629 "int8" `367 
f G "bit_test" 2 629 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
v L "count" 2 632 "int8" `369 
f B "delay_cycles" 2 632 "void(int8 count)" `368 
v L "time" 2 633 "int16" `371 
f B "delay_ms" 2 633 "void(int16 time)" `370 
v L "time" 2 634 "int16" `373 
f B "delay_us" 2 634 "void(int16 time)" `372  "#use rs232() Prototypes:"
v L "cdata" 2 637 "int8" `375 
f B "putchar" 2 637 "void(int8 cdata)" `374 
v L "cdata" 2 638 "int8" `377 
v L "stream" 2 638 "int8" `378 
f G "putchar" 2 638 "void(int8 cdata,int8 stream)" `376 
v L "string" 2 639 "*int8" `380 
f B "puts" 2 639 "void(*int8 string)" `379 
v L "string" 2 640 "*int8" `382 
v L "stream" 2 640 "int8" `383 
f G "puts" 2 640 "void(*int8 string,int8 stream)" `381 
f B "getch" 2 641 "int8()" `384 
v L "stream" 2 642 "int8" `386 
f G "getch" 2 642 "int8(int8 stream)" `385 
v L "string" 2 643 "*int8" `388 
f B "gets" 2 643 "void(*int8 string)" `387 
v L "string" 2 644 "*int8" `390 
v L "stream" 2 644 "int8" `391 
f G "gets" 2 644 "void(*int8 string,int8 stream)" `389 
f B "kbhit" 2 645 "int8()" `392 
v L "stream" 2 646 "int8" `394 
f G "kbhit" 2 646 "int8(int8 stream)" `393 
v L "string" 2 647 "*int8" `396 
f B "printf" 2 647 "void(*int8 string,*int8 _VA_LIST)" `395 
v L "stream" 2 648 "int8" `399 
v L "string" 2 648 "*int8" `400 
f B "fprintf" 2 648 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f B "putc_send" 2 649 "void()" `402 
v L "stream" 2 650 "int8" `404 
f B "fputc_send" 2 650 "void(int8 stream)" `403 
f B "rcv_buffer_full" 2 651 "int8()" `405 
v L "stream" 2 652 "int8" `407 
f G "rcv_buffer_full" 2 652 "int8(int8 stream)" `406 
f B "rcv_buffer_bytes" 2 653 "int16()" `408 
v L "stream" 2 654 "int8" `410 
f G "rcv_buffer_bytes" 2 654 "int16(int8 stream)" `409 
f B "tx_buffer_full" 2 655 "int8()" `411 
v L "stream" 2 656 "int8" `413 
f G "tx_buffer_full" 2 656 "int8(int8 stream)" `412 
f B "tx_buffer_bytes" 2 657 "int16()" `414 
v L "stream" 2 658 "int8" `416 
f G "tx_buffer_bytes" 2 658 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f B "i2c_read" 2 661 "int8()" `417 
v L "stream" 2 662 "int8" `419 
f G "i2c_read" 2 662 "int8(int8 stream)" `418 
v L "stream" 2 663 "int8" `421 
v L "ack" 2 663 "int8" `422 
f G "i2c_read" 2 663 "int8(int8 stream,int8 ack)" `420 
v L "data" 2 664 "int8" `424 
f B "i2c_write" 2 664 "int8(int8 data)" `423 
v L "stream" 2 665 "int8" `426 
v L "data" 2 665 "int8" `427 
f G "i2c_write" 2 665 "int8(int8 stream,int8 data)" `425 
f B "i2c_start" 2 666 "void()" `428 
v L "stream" 2 667 "int8" `430 
f G "i2c_start" 2 667 "void(int8 stream)" `429 
v L "stream" 2 668 "int8" `432 
v L "restart" 2 668 "int8" `433 
f G "i2c_start" 2 668 "void(int8 stream,int8 restart)" `431 
f B "i2c_stop" 2 669 "void()" `434 
v L "stream" 2 670 "int8" `436 
f G "i2c_stop" 2 670 "void(int8 stream)" `435 
f B "i2c_isr_state" 2 671 "int8()" `437 
v L "addr" 2 672 "int8" `439 
f B "i2c_slaveaddr" 2 672 "void(int8 addr)" `438 
v L "stream" 2 673 "int8" `441 
v L "addr" 2 673 "int8" `442 
f G "i2c_slaveaddr" 2 673 "void(int8 stream,int8 addr)" `440 
f B "i2c_poll" 2 674 "int8()" `443 
v L "stream" 2 675 "int8" `445 
f G "i2c_poll" 2 675 "int8(int8 stream)" `444 
v L "baud" 2 676 "int32" `447 
f B "i2c_init" 2 676 "void(int32 baud)" `446 
v L "stream" 2 677 "int8" `449 
v L "baud" 2 677 "int32" `450 
f G "i2c_init" 2 677 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f B "spi_xfer" 2 680 "int8()" `451 
f G "spi_xfer" 2 681 "int16()" `452 
f G "spi_xfer" 2 682 "int32()" `453 
v L "data" 2 683 "int8" `455 
f G "spi_xfer" 2 683 "int8(int8 data)" `454 
v L "data" 2 684 "int16" `457 
f G "spi_xfer" 2 684 "int16(int16 data)" `456 
v L "data" 2 685 "int32" `459 
f G "spi_xfer" 2 685 "int32(int32 data)" `458 
v L "stream" 2 686 "int8" `461 
v L "data" 2 686 "int8" `462 
f G "spi_xfer" 2 686 "int8(int8 stream,int8 data)" `460 
v L "stream" 2 687 "int8" `461 
v L "data" 2 687 "int16" `465 
f G "spi_xfer" 2 687 "int16(int8 stream,int16 data)" `463 
v L "stream" 2 688 "int8" `461 
v L "data" 2 688 "int32" `468 
f G "spi_xfer" 2 688 "int32(int8 stream,int32 data)" `466 
v L "stream" 2 689 "int8" `470 
v L "data" 2 689 "int8" `471 
v L "bits" 2 689 "int8" `472 
f G "spi_xfer" 2 689 "int8(int8 stream,int8 data,int8 bits)" `469 
v L "stream" 2 690 "int8" `470 
v L "data" 2 690 "int16" `471 
v L "bits" 2 690 "int8" `476 
f G "spi_xfer" 2 690 "int16(int8 stream,int16 data,int8 bits)" `473 
v L "stream" 2 691 "int8" `470 
v L "data" 2 691 "int32" `471 
v L "bits" 2 691 "int8" `480 
f G "spi_xfer" 2 691 "int32(int8 stream,int32 data,int8 bits)" `477 
v L "baud" 2 692 "int32" `482 
f B "spi_init" 2 692 "void(int32 baud)" `481 
v L "stream" 2 693 "int8" `484 
v L "baud" 2 693 "int32" `485 
f G "spi_init" 2 693 "void(int8 stream,int32 baud)" `483 
v L "baud" 2 694 "int32" `487 
f B "spi_speed" 2 694 "void(int32 baud)" `486 
v L "stream" 2 695 "int8" `489 
v L "baud" 2 695 "int32" `490 
f G "spi_speed" 2 695 "void(int8 stream,int32 baud)" `488 
v L "stream" 2 696 "int8" `492 
v L "baud" 2 696 "int32" `493 
v L "clock" 2 696 "int32" `494 
f G "spi_speed" 2 696 "void(int8 stream,int32 baud,int32 clock)" `491 
v L "data" 2 697 "int8" `496 
f B "spi_prewrite" 2 697 "void(int8 data)" `495 
v L "data" 2 698 "int16" `498 
f G "spi_prewrite" 2 698 "void(int16 data)" `497 
v L "data" 2 699 "int32" `500 
f G "spi_prewrite" 2 699 "void(int32 data)" `499 
v L "??65535" 2 700 "int8" `502 
v L "data" 2 700 "int8" `503 
f G "spi_prewrite" 2 700 "void(int8 ,int8 data)" `501 
v L "??65535" 2 701 "int8" `502 
v L "data" 2 701 "int16" `506 
f G "spi_prewrite" 2 701 "void(int8 ,int16 data)" `504 
v L "??65535" 2 702 "int8" `502 
v L "data" 2 702 "int32" `509 
f G "spi_prewrite" 2 702 "void(int8 ,int32 data)" `507 
f B "spi_xfer_in" 2 703 "int8()" `510 
f G "spi_xfer_in" 2 704 "int16()" `511 
f G "spi_xfer_in" 2 705 "int32()" `512 
v L "bits" 2 706 "int8" `514 
f G "spi_xfer_in" 2 706 "int8(int8 bits)" `513 
v L "bits" 2 707 "int8" `516 
f G "spi_xfer_in" 2 707 "int16(int8 bits)" `515 
v L "bits" 2 708 "int8" `518 
f G "spi_xfer_in" 2 708 "int32(int8 bits)" `517 
v L "stream" 2 709 "int8" `520 
v L "bits" 2 709 "int8" `521 
f G "spi_xfer_in" 2 709 "int8(int8 stream,int8 bits)" `519 
v L "stream" 2 710 "int8" `520 
v L "bits" 2 710 "int8" `524 
f G "spi_xfer_in" 2 710 "int16(int8 stream,int8 bits)" `522 
v L "stream" 2 711 "int8" `520 
v L "bits" 2 711 "int8" `527 
f G "spi_xfer_in" 2 711 "int32(int8 stream,int8 bits)" `525  "#use rtos() Prototypes:"
f B "rtos_run" 2 714 "void()" `528 
f B "rtos_yield" 2 715 "void()" `529 
v L "task" 2 716 "int8" `531 
f B "rtos_enable" 2 716 "void(int8 task)" `530 
v L "task" 2 717 "int8" `533 
f B "rtos_disable" 2 717 "void(int8 task)" `532 
f B "rtos_terminate" 2 718 "void()" `534 
v L "flag" 2 719 "int8" `536 
f B "rtos_await" 2 719 "void(int8 flag)" `535 
v L "sem" 2 720 "int8" `538 
f B "rtos_wait" 2 720 "void(int8 sem)" `537 
v L "sem" 2 721 "int8" `540 
f B "rtos_signal" 2 721 "void(int8 sem)" `539 
v L "task" 2 722 "int8" `542 
v L "msg" 2 722 "int8" `543 
f B "rtos_msg_send" 2 722 "void(int8 task,int8 msg)" `541 
f B "rtos_msg_read" 2 723 "int8()" `544 
f B "rtos_msg_poll" 2 724 "int8()" `545 
v L "task" 2 725 "int8" `547 
f B "rtos_overrun" 2 725 "int8(int8 task)" `546 
v L "task" 2 726 "int8" `549 
v L "stat" 2 726 "*int8" `550 
f B "rtos_stats" 2 726 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f B "get_ticks" 2 729 "int8()" `551 
f G "get_ticks" 2 730 "int16()" `552 
f G "get_ticks" 2 731 "int32()" `553 
v L "stream" 2 732 "int8" `555 
f G "get_ticks" 2 732 "int8(int8 stream)" `554 
v L "stream" 2 733 "int8" `557 
f G "get_ticks" 2 733 "int16(int8 stream)" `556 
v L "stream" 2 734 "int8" `559 
f G "get_ticks" 2 734 "int32(int8 stream)" `558 
v L "value" 2 735 "int8" `561 
f B "set_ticks" 2 735 "void(int8 value)" `560 
v L "value" 2 736 "int16" `563 
f G "set_ticks" 2 736 "void(int16 value)" `562 
v L "value" 2 737 "int32" `565 
f G "set_ticks" 2 737 "void(int32 value)" `564 
v L "stream" 2 738 "int8" `567 
v L "value" 2 738 "int8" `568 
f G "set_ticks" 2 738 "void(int8 stream,int8 value)" `566 
v L "stream" 2 739 "int8" `567 
v L "value" 2 739 "int16" `571 
f G "set_ticks" 2 739 "void(int8 stream,int16 value)" `569 
v L "stream" 2 740 "int8" `567 
v L "value" 2 740 "int32" `574 
f G "set_ticks" 2 740 "void(int8 stream,int32 value)" `572  "#use pwm() Prototypes:"
f B "pwm_on" 2 743 "void()" `575 
v L "stream" 2 744 "int8" `577 
f G "pwm_on" 2 744 "void(int8 stream)" `576 
f B "pwm_off" 2 745 "void()" `578 
v L "stream" 2 746 "int8" `580 
f G "pwm_off" 2 746 "void(int8 stream)" `579 
v L "duty" 2 747 "int16" `582 
f B "pwm_set_duty" 2 747 "void(int16 duty)" `581 
v L "stream" 2 748 "int8" `584 
v L "duty" 2 748 "int16" `585 
f G "pwm_set_duty" 2 748 "void(int8 stream,int16 duty)" `583 
v L "percent" 2 749 "int16" `587 
f B "pwm_set_duty_percent" 2 749 "void(int16 percent)" `586 
v L "stream" 2 750 "int8" `589 
v L "percent" 2 750 "int16" `590 
f G "pwm_set_duty_percent" 2 750 "void(int8 stream,int16 percent)" `588 
v L "frequency" 2 751 "int32" `592 
f B "pwm_set_frequency" 2 751 "void(int32 frequency)" `591 
v L "stream" 2 752 "int8" `594 
v L "frequency" 2 752 "int32" `595 
f G "pwm_set_frequency" 2 752 "void(int8 stream,int32 frequency)" `593  "#use capture() Prototypes:"
f B "get_capture_time" 2 755 "int16()" `596 
v L "stream" 2 756 "int8" `598 
f G "get_capture_time" 2 756 "int16(int8 stream)" `597 
f B "get_capture_event" 2 757 "int8()" `599 
v L "stream" 2 758 "int8" `601 
f G "get_capture_event" 2 758 "int8(int8 stream)" `600  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 771 "int16" `603 
f B "goto_address" 2 771 "void(int16 address)" `602 
v L "label" 2 772 "int16" `605 
f B "label_address" 2 772 "int16(int16 label)" `604  "Program Memory Prototypes:"
v L "address" 2 775 "int16" `607 
v L "dataptr" 2 775 "*int8" `608 
v L "count" 2 775 "int16" `609 
f B "read_program_memory" 2 775 "void(int16 address,*int8 dataptr,int16 count)" `606 
v L "address" 2 776 "int16" `611 
f B "read_program_eeprom" 2 776 "int16(int16 address)" `610 
v L "address" 2 777 "int16" `613 
f B "erase_program_eeprom" 2 777 "void(int16 address)" `612 
v L "address" 2 778 "int16" `615 
v L "dataptr" 2 778 "*int8" `616 
v L "count" 2 778 "int16" `617 
f B "write_program_memory" 2 778 "void(int16 address,*int8 dataptr,int16 count)" `614 
v L "address" 2 779 "int16" `619 
v L "data" 2 779 "int16" `620 
f B "write_program_eeprom" 2 779 "void(int16 address,int16 data)" `618  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 784 "int16" `621 
v L "address" 2 789 "__EEADDRESS__" `623 
f B "read_eeprom" 2 789 "int8(__EEADDRESS__ address)" `622 
v L "address" 2 790 "__EEADDRESS__" `625 
v L "value" 2 790 "int8" `626 
f B "write_eeprom" 2 790 "void(__EEADDRESS__ address,int8 value)" `624  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 797 "int32" `628 
f B "enable_interrupts" 2 797 "void(int32 interrupt)" `627 
v L "interrupt" 2 798 "int32" `630 
f B "disable_interrupts" 2 798 "void(int32 interrupt)" `629 
v L "interrupt" 2 799 "int32" `632 
f B "clear_interrupt" 2 799 "void(int32 interrupt)" `631 
v L "interrupt" 2 800 "int32" `634 
f B "interrupt_active" 2 800 "int8(int32 interrupt)" `633 
v L "interrupt" 2 801 "int32" `636 
f B "interrupt_enabled" 2 801 "int8(int32 interrupt)" `635 
v L "source" 2 802 "int8" `638 
v L "edge" 2 802 "int8" `639 
f B "ext_int_edge" 2 802 "void(int8 source,int8 edge)" `637 
v L "address" 2 803 "int16" `641 
f B "jump_to_isr" 2 803 "void(int16 address)" `640  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 805 "0x40"
d G "H_TO_L" 2 806 "0"
d G "GLOBAL" 2 808 "0xF2C0"
d G "PERIPH" 2 809 "0xF240"
d G "INT_RTCC" 2 810 "0x00F220"
d G "INT_TIMER0" 2 811 "0x00F220"
d G "INT_TIMER1" 2 812 "0x009D01"
d G "INT_TIMER2" 2 813 "0x009D02"
d G "INT_TIMER3" 2 814 "0x00A002"
d G "INT_EXT_L2H" 2 815 "0x5000F210"
d G "INT_EXT_H2L" 2 816 "0x6000F210"
d G "INT_EXT" 2 817 "0x00F210"
d G "INT_EXT1_L2H" 2 818 "0x5001F008"
d G "INT_EXT1_H2L" 2 819 "0x6001F008"
d G "INT_EXT1" 2 820 "0x00F008"
d G "INT_EXT2_L2H" 2 821 "0x5002F010"
d G "INT_EXT2_H2L" 2 822 "0x6002F010"
d G "INT_EXT2" 2 823 "0x00F010"
d G "INT_RB" 2 824 "0x00FFF208"
d G "INT_PSP" 2 825 "0x009D80"
d G "INT_AD" 2 826 "0x009D40"
d G "INT_RDA" 2 827 "0x009D20"
d G "INT_TBE" 2 828 "0x009D10"
d G "INT_SSP" 2 829 "0x009D08"
d G "INT_CCP1" 2 830 "0x009D04"
d G "INT_CCP2" 2 831 "0x00A001"
d G "INT_BUSCOL" 2 832 "0x00A008"
d G "INT_LOWVOLT" 2 833 "0x00A004"
d G "INT_COMP" 2 834 "0x00A040"
d G "INT_EEPROM" 2 835 "0x00A010"
d G "INT_OSCF" 2 836 "0x00A080"
D G "_LEDS_H_" 3 2 ""
D G "_GLOBALS_H_" 4 2 ""
T G "ADC_DATA_TYPE" 4 10 "{sint32 whole,int8[4] bytes}" `653 
E G "SIGN_SENSOR_BROKEN" 4 14 "0" `655 
E G "SIGN_TEMP_OVERLOAD" 4 15 "1" `656 
E G "SIGN_SET_PID_KP" 4 16 "2" `657 
E G "SIGN_SET_PID_KI" 4 17 "3" `658 
E G "SIGN_SET_PID_KD" 4 18 "4" `659 
E G "SIGN_PROCESS_END" 4 19 "5" `660 
E G "SIGN_CN" 4 20 "6" `661 
E G "SIGN_T2" 4 21 "7" `662 
E G "SIGN_T3" 4 22 "8" `663 
E G "SIGN_T4" 4 23 "9" `664 
E G "SIGN_T5" 4 24 "10" `665 
E G "SIGN_T6" 4 25 "11" `666 
E G "SIGN_T7" 4 26 "12" `667 
E G "SIGN_ALL" 4 27 "13" `668 
E G "SIGN_BLANK" 4 28 "14" `669 
T G "SIGN_CODE" 4 28 "" `670 
E G "STATE_KEY_IDLE" 4 32 "0" `672 
E G "STATE_KEY_PRESSED" 4 33 "1" `673 
E G "STATE_KEY_HOLD" 4 34 "2" `674 
T G "KEY_STATE_" 4 34 "" `675 
E G "ST_INVALID" 4 38 "0" `677 
E G "ST_IDLE" 4 39 "1" `678 
E G "ST_SET_PROGRAM" 4 40 "2" `679 
E G "ST_SET_DAY_OF_WEEK" 4 41 "3" `680 
E G "ST_SET_HOUR" 4 42 "4" `681 
E G "ST_SET_MINUTE" 4 43 "5" `682 
E G "ST_SET_TIME_STER_DRY" 4 44 "6" `683 
E G "ST_SET_SETPOINT" 4 45 "7" `684 
E G "ST_SET_PROTECT" 4 46 "8" `685 
E G "ST_SET_TIME_DELAY" 4 47 "9" `686 
E G "ST_SET_WAIT_TIME" 4 48 "10" `687 
E G "ST_SET_HOLD_TIME" 4 49 "11" `688 
E G "ST_DIS_TIME_DAY_HOUR" 4 50 "12" `689 
E G "ST_DIS_TIME_HOUR_MIN" 4 51 "13" `690 
E G "ST_SET_TIME_DAY_HOUR" 4 52 "14" `691 
E G "ST_SET_TIME_HOUR_MIN" 4 53 "15" `692 
E G "ST_SET_TIMER" 4 54 "16" `693 
E G "ST_SET_PASS" 4 55 "17" `694 
E G "ST_SAVE_PASS" 4 56 "18" `695 
E G "ST_CHECK_PASS" 4 57 "19" `696 
E G "ST_SET_SERI" 4 58 "20" `697 
E G "ST_SET_PID_KP" 4 59 "21" `698 
E G "ST_SET_PID_KI" 4 60 "22" `699 
E G "ST_SET_PID_KD" 4 61 "23" `700 
E G "ST_SET_OFFSET" 4 62 "24" `701 
E G "ST_RUN_WAITING_TIME" 4 63 "25" `702 
E G "ST_RUN_HEATING_TIME" 4 64 "26" `703 
E G "ST_RUN_HOLDING_TIME" 4 65 "27" `704 
E G "ST_RUN_COOLING_TIME" 4 66 "28" `705 
E G "ST_COMPLETED" 4 67 "29" `706 
E G "ST_ERR" 4 68 "30" `707 
E G "TOTAL_NUMBER_OF_STATE" 4 69 "31" `708 
T G "STATE" 4 69 "_STATE" `709 
E G "SET_NONE" 4 73 "0" `711 
E G "SET_PROGRAM_USER" 4 74 "1" `712 
E G "SET_TIME_REAL_TIME_CLOCK" 4 75 "2" `713 
E G "SET_TIME_CLOCK" 4 76 "3" `714 
E G "SET_DONE" 4 77 "4" `715 
T G "SET" 4 77 "_SET" `716 
E G "SET_TIME_DAY_HOUR" 4 81 "0" `718 
E G "SET_TIME_HOUR_MIN" 4 82 "1" `719 
E G "SET_TIME_DONE" 4 84 "2" `720 
T G "SET_TIME" 4 84 "_SET_TIME" `721 
E G "NULLDAY" 4 88 "0" `723 
E G "SUNDAY" 4 89 "1" `724 
E G "MONDAY" 4 90 "2" `725 
E G "TUESDAY" 4 91 "3" `726 
E G "WEDNESDAY" 4 92 "4" `727 
E G "THURSDAY" 4 93 "5" `728 
E G "FRIDAY" 4 94 "6" `729 
E G "SATURDAY" 4 95 "7" `730 
E G "NONEDAY" 4 96 "8" `731 
T G "WEEKDAY" 4 96 "_WEEKDAY" `732 
E G "WAITING_PHASE" 4 100 "0" `734 
E G "HEAT_RISING_PHASE" 4 101 "1" `735 
E G "HEAT_HOLDING_PHASE" 4 102 "2" `736 
E G "HEAT_FALLING_PHASE" 4 103 "3" `737 
E G "IDLE_PHASE" 4 104 "4" `738 
T G "PROCESS_PHASE" 4 104 "_PROCESS_PHASE" `739 
E G "NONE" 4 108 "0" `741 
E G "PROGRAM1" 4 109 "1" `742 
E G "PROGRAM2" 4 110 "2" `743 
E G "PROGRAM3" 4 111 "3" `744 
E G "PROGRAM4" 4 112 "4" `745 
E G "PROGRAM5" 4 113 "5" `746 
E G "PROGRAM6" 4 114 "6" `747 
E G "PROGRAM7" 4 115 "7" `748 
E G "PROGRAM8" 4 116 "8" `749 
E G "PROGRAM9" 4 117 "9" `750 
E G "PROGRAM10" 4 118 "10" `751 
E G "USER_MODE" 4 119 "11" `752 
T G "OVEN_MODE" 4 119 "_OVEN_MODE" `753 
E G "MODE_STAND" 4 123 "0" `755 
E G "MODE_SET_1" 4 124 "1" `756 
E G "MODE_SET_2" 4 125 "2" `757 
E G "MODE_SET_3" 4 126 "3" `758 
E G "MODE_SET_4" 4 127 "4" `759 
E G "MODE_SET_5" 4 128 "5" `760 
E G "MODE_SET_6" 4 129 "6" `761 
E G "MODE_SET_7" 4 130 "7" `762 
E G "MODE_SET_8" 4 131 "8" `763 
E G "MODE_SET_9" 4 132 "9" `764 
E G "MODE_SET_10" 4 133 "10" `765 
T G "FLAG_MODE" 4 133 "_FLAG_MODE" `766 
D G "TRIAC_CYCLE" 4 135 "555.0"
D G "TEMP_COEFF" 4 136 "0.652085"
V G "led7" 4 137 "int8[6][4]" `767 
V G "led1" 4 138 "int8[5]" `769 
V G "temp_accum_count" 4 139 "int8" `770 
V G "g_state" 4 140 "STATE" `771 
V G "old_state" 4 141 "STATE" `772 
V G "g_mode" 4 142 "OVEN_MODE" `773 
V G "g_set" 4 143 "SET" `774 
C L "jump_to_isr" 4 144 2 "FUNCTION"
V G "timed_count_ms" 4 147 "int16" `775 
C L "jump_to_isr" 4 144 1 "FUNCTION"
V G "pid_countdown" 4 148 "int8" `776 
V G "spk_on_count" 4 149 "int16" `777 
V G "tmp_int16" 4 150 "int16" `778 
V G "key_state" 4 151 "int8" `779 
V G "key_flag" 4 152 "int8" `780 
V G "key_code" 4 153 "int8" `781 
V G "tmp" 4 154 "int8" `782 
V G "touch_state1" 4 155 "int8" `783 
V G "touch_state2" 4 155 "int8" `784 
V G "key_hold_count" 4 156 "int16" `785 
V G "key_repeat_count" 4 156 "int16" `786 
D G "KEY_HOLD_THRESHOLD" 4 157 " (400)"
D G "KEY_REPEAT_TIME" 4 158 " (10)"
V G "sec" 4 160 "int8" `787 
V G "min" 4 160 "int8" `788 
V G "hour" 4 160 "int8" `789 
V G "day" 4 160 "int8" `790 
V G "last_min" 4 161 "int8" `791 
V G "user_setpoint" 4 163 "int16" `792 
V G "user_protect" 4 164 "int16" `793 
V G "user_delay_time" 4 165 "int16" `794 
V G "user_ster_time" 4 166 "int16" `795 
V G "i" 4 167 "int16" `796 
V G "wait_hour" 4 169 "int8" `797 
V G "wait_min" 4 169 "int8" `798 
V G "wait_day" 4 169 "int8" `799 
V G "hold_hour" 4 170 "int8" `800 
V G "hold_min" 4 170 "int8" `801 
V G "password" 4 172 "int16" `802 
V G "check_password" 4 172 "int16" `803 
C L "jump_to_isr" 4 144 1 "FUNCTION"
V G "setpoint" 4 174 "int16" `804 
V G "protect" 4 175 "int16" `805 
V G "realTemp" 4 176 "int16" `806 
V G "t1" 4 177 "int16" `807 
V G "t2" 4 177 "int16" `808 
V G "t3" 4 177 "int16" `809 
V G "t4" 4 177 "int16" `810 
V G "t5" 4 177 "int16" `811 
V G "t6" 4 178 "int16" `812 
V G "t7" 4 178 "int16" `813 
V G "t8" 4 178 "int16" `814 
V G "t9" 4 178 "int16" `815 
V G "t10" 4 178 "int16" `816 
V G "delay_time" 4 179 "int16" `817 
V G "ster_time" 4 180 "int16" `818  "unsigned int16 day_ster_time;"
C L "jump_to_isr" 4 144 4 "FUNCTION"
V G "pid_kp" 4 186 "int16" `819 
V G "pid_ki" 4 186 "int16" `820 
V G "pid_kd" 4 186 "int16" `821  "unsigned int16 RTD_realTemp2;"
C L "jump_to_isr" 4 144 1 "FUNCTION"
V G "remain_time" 4 189 "int16" `822  "unsigned long user_hold_time;"
D G "SETPOINT_MAX" 4 193 " (25000)"
D G "SETPOINT_DEF" 4 194 " (15000)"
D G "SETPOINT_MIN" 4 195 " (1000)"
D G "PROTECT_MAX" 4 196 " (31000)"
D G "PROTECT_DEF" 4 197 " (31000)"
D G "PROTECT_MIN" 4 198 " (1000)"
D G "FAN_SPEED_MAX" 4 199 " (10)"
D G "FAN_SPEED_DEF" 4 200 " (7)"
D G "FAN_SPEED_MIN" 4 201 " (5)"
D G "DELAY_TIME_MAX" 4 202 " (5999)"
D G "DELAY_TIME_DEF" 4 203 " (0)"
D G "DELAY_TIME_MIN" 4 204 " (0)"
D G "STER_TIME_MAX" 4 205 " (5999)"
D G "STER_TIME_DEF" 4 206 " (60)"
D G "STER_TIME_MIN" 4 207 " (0)"
D G "PID_KP_MAX" 4 209 " (100)"
D G "PID_KP_DEF" 4 210 " (60)"
D G "PID_KP_MIN" 4 211 " (0)"
D G "PID_KI_MAX" 4 212 " (100)"
D G "PID_KI_DEF" 4 213 " (55)"
D G "PID_KI_MIN" 4 214 " (0)"
D G "PID_KD_MAX" 4 215 " (100)"
D G "PID_KD_DEF" 4 216 " (28)"
D G "PID_KD_MIN" 4 217 " (0)"
D G "PID_KP_MAX1" 4 219 " (100)"
D G "PID_KP_DEF1" 4 220 " (65)"
D G "PID_KP_MIN1" 4 221 " (0)"
D G "PID_KI_MAX1" 4 222 " (100)"
D G "PID_KI_DEF1" 4 223 " (65)"
D G "PID_KI_MIN1" 4 224 " (0)"
D G "PID_KD_MAX1" 4 225 " (100)"
D G "PID_KD_DEF1" 4 226 " (38)"
D G "PID_KD_MIN1" 4 227 " (0)"
D G "PROG1_SETPOINT" 4 229 " (12000)"
D G "PROG1_PROTECT" 4 230 " (13000)"
D G "PROG1_DELAY_TIME" 4 231 " (0)"
D G "PROG1_STER_TIME" 4 232 " (90)"
D G "PROG2_SETPOINT" 4 233 " (13000)"
D G "PROG2_PROTECT" 4 234 " (14000)"
D G "PROG2_DELAY_TIME" 4 235 " (0)"
D G "PROG2_STER_TIME" 4 236 " (85)"
D G "PROG3_SETPOINT" 4 237 " (14000)"
D G "PROG3_PROTECT" 4 238 " (15000)"
D G "PROG3_DELAY_TIME" 4 239 " (0)"
D G "PROG3_STER_TIME" 4 240 " (80)"
D G "PROG4_SETPOINT" 4 241 " (15000)"
D G "PROG4_PROTECT" 4 242 " (16000)"
D G "PROG4_DELAY_TIME" 4 243 " (0)"
D G "PROG4_STER_TIME" 4 244 " (70)"
D G "PROG5_SETPOINT" 4 245 " (16000)"
D G "PROG5_PROTECT" 4 246 " (17000)"
D G "PROG5_DELAY_TIME" 4 247 " (0)"
D G "PROG5_STER_TIME" 4 248 " (60)"
D G "PROG6_SETPOINT" 4 249 " (17000)"
D G "PROG6_PROTECT" 4 250 " (18000)"
D G "PROG6_DELAY_TIME" 4 251 " (0)"
D G "PROG6_STER_TIME" 4 252 " (50)"
D G "PROG7_SETPOINT" 4 253 " (18000)"
D G "PROG7_PROTECT" 4 254 " (19000)"
D G "PROG7_DELAY_TIME" 4 255 " (0)"
D G "PROG7_STER_TIME" 4 256 " (45)"
D G "PROG8_SETPOINT" 4 257 " (19000)"
D G "PROG8_PROTECT" 4 258 " (20000)"
D G "PROG8_DELAY_TIME" 4 259 " (0)"
D G "PROG8_STER_TIME" 4 260 " (40)"
D G "PROG9_SETPOINT" 4 261 " (20000)"
D G "PROG9_PROTECT" 4 262 " (21000)"
D G "PROG9_DELAY_TIME" 4 263 " (0)"
D G "PROG9_STER_TIME" 4 264 " (35)"
D G "PROG10_SETPOINT" 4 265 " (22000)"
D G "PROG10_PROTECT" 4 266 " (23000)"
D G "PROG10_DELAY_TIME" 4 267 " (0)"
D G "PROG10_STER_TIME" 4 268 " (30)"
D G "BEEP_TIME" 4 270 " (3)"
D G "OFFSET_TEMP_RANGE" 4 272 " (3000)"
D G "MAX_TEMP_RANGE" 4 274 " (32000)"
D G "ADC_FILTER_COUNT" 4 276 " (16)"
D G "RTD_CONST" 4 278 " (41876)"
V G "fan_speed" 4 280 "int8" `823 
V G "triac_on_time1" 4 281 "int16" `824 
V G "triac_on_time_new1" 4 282 "int16" `825 
V G "triac_count1" 4 283 "int16" `826 
V G "triac_on_time2" 4 284 "int16" `827 
V G "triac_count2" 4 285 "int16" `828 
V G "seri" 4 287 "int16" `829 
V G "adc_integ_count" 4 288 "int8" `830 
V G "adc_integ_data" 4 289 "sint32" `831 
V G "adc_data" 4 290 "sint16" `832 
V G "adc_data_buff" 4 290 "sint16" `833 
V G "env_temp" 4 291 "sint16" `834 
V G "thermo_temp" 4 292 "sint16" `835 
V G "temp_offset" 4 293 "sint16" `836 
V G "adc_value_ch0" 4 294 "sint32" `837 
V G "adc_value_ch1" 4 295 "sint32" `838 
V G "k_a" 4 297 "float" `839 
V G "k_b" 4 297 "float" `840 
V G "float_temp" 4 297 "float" `841 
V G "fan_pos" 4 299 "int8" `842 
V G "g_err_code" 4 300 "int8" `843 
V G "fan_rol_count" 4 301 "int8" `844 
V G "hour_min_flag" 4 302 "int8" `845 
V G "flag_day_hour" 4 303 "int8" `846 
V G "flag_Rs232" 4 304 "int8" `847 
V G "flag_Rs232_Ster" 4 305 "int8" `848 
V G "flag_Rs232_Complete" 4 306 "int8" `849 
V G "flag_Rs232_Err" 4 307 "int8" `850 
V G "flag_Rs232_IDLE" 4 308 "int8" `851 
V G "flag_Pre_Hold" 4 309 "int8" `852 
V G "GLb_nCountAvrTemp" 4 311 "int8" `853 
D G "_DS1307_H_" 5 2 ""
C L "jump_to_isr" 4 144 1 "FUNCTION"
V L "address" 5 8 "int8" `859 
V L "data" 5 8 "int8" `860 
F G "write_DS1307" 5 9 "void(int8 address,int8 data)" `858 
V L "status" 5 10 "int1" `861 
V L "address" 5 27 "int8" `863 
F G "read_DS1307" 5 28 "int8(int8 address)" `862 
V L "data" 5 29 "int8" `864 
F G "Stop_DS1307" 5 43 "void()" `865 
F G "Start_DS1307" 5 48 "void()" `866 
V L "BCD" 5 52 "int8" `868 
F G "BCD2Dec" 5 52 "int8(int8 BCD)" `867 
V L "L" 5 53 "int8" `869 
V L "H" 5 53 "int8" `870 
F G "Store_Kp" 5 60 "void()" `871 
V L "tmp_H" 5 61 "int8" `872 
V L "tmp_L" 5 61 "int8" `873 
C L "Store_Kp" 5 64 2 "FUNCTION"
F G "Store_Ki" 5 78 "void()" `874 
V L "tmp_H" 5 79 "int8" `875 
V L "tmp_L" 5 79 "int8" `876 
C L "Store_Ki" 5 64 2 "FUNCTION"
C L "Store_Ki" 5 64 2 "FUNCTION"
F G "Store_Kd" 5 97 "void()" `877 
V L "tmp_H" 5 98 "int8" `878 
V L "tmp_L" 5 98 "int8" `879 
C L "Store_Kd" 5 64 2 "FUNCTION"
C L "Store_Kd" 5 64 2 "FUNCTION"
F G "Store_Offset" 5 116 "void()" `880 
V L "tmp_H" 5 117 "int8" `881 
V L "tmp_L" 5 117 "int8" `882 
C L "Store_Offset" 5 64 3 "FUNCTION"
F G "Store_Mode" 5 128 "void()" `883 
F G "Store_WaitTime" 5 133 "void()" `884 
F G "Store_HoldTime" 5 141 "void()" `888 
C L "Store_Setpoint" 5 64 7 "FUNCTION"
F G "Store_Setpoint" 5 159 "void()" `889 
V L "tmp_H" 5 160 "int8" `890 
V L "tmp_L" 5 160 "int8" `891 
C L "Store_Setpoint" 5 64 2 "FUNCTION"
F G "Store_Protect" 5 170 "void()" `892 
V L "tmp_H" 5 171 "int8" `893 
V L "tmp_L" 5 171 "int8" `894 
C L "Store_Protect" 5 64 2 "FUNCTION"
F G "Store_Password" 5 180 "void()" `895 
V L "tmp_H" 5 181 "int8" `896 
V L "tmp_L" 5 181 "int8" `897 
F G "Store_SERI" 5 187 "void()" `898 
V L "tmp_H" 5 188 "int8" `899 
V L "tmp_L" 5 188 "int8" `900 
F G "Store_FanSpeed" 5 196 "void()" `901  "write_DS1307(0x1A, fan_speed);"
F G "Check_Data_Previous" 5 201 "void()" `902 
F G "Load_Data_Program_EEPROM" 5 210 "void()" `903 
C L "Load_Data_Program_EEPROM" 5 64 156 "FUNCTION"
F G "Load_Data_User" 5 425 "void()" `905 
V L "tmp_H" 5 426 "int8" `906 
V L "tmp_L" 5 426 "int8" `907  "if(flag_day_hour == 1) {"
C L "Load_Data_User" 5 64 23 "FUNCTION"
F G "Load_PID" 5 468 "void()" `911 
V L "tmp_H" 5 469 "int8" `912 
V L "tmp_L" 5 469 "int8" `913 
C L "Load_PID" 5 64 2 "FUNCTION"
C L "Load_PID" 5 64 2 "FUNCTION"
F G "Load_Data" 5 525 "void()" `914 
V L "tmp_H" 5 526 "int8" `915 
V L "tmp_L" 5 526 "int8" `916 
C L "Load_Data" 5 64 3 "FUNCTION"
D G "_CAP1188_H_" 6 2 ""
D G "CAP_RESET" 6 8 "PIN_C0"
D G "CAP_CS1" 6 9 "PIN_D4"
D G "CAP_CS2" 6 10 "PIN_D5"
D G "CAP_CLK" 6 11 "PIN_C3"
D G "CAP_MOSI" 6 12 "PIN_C4"
D G "CAP_MISO" 6 13 "PIN_C5"
F G "cap1188_reset" 6 17 "void()" `917 
C L "cap1188_write_data1" 6 37 29 "FUNCTION"
V L "addr" 6 80 "int8" `919 
V L "data" 6 80 "int8" `920 
F G "cap1188_write_data1" 6 81 "void(int8 addr,int8 data)" `918 
V L "addr" 6 93 "int8" `922 
V L "data" 6 93 "int8" `923 
F G "cap1188_write_data2" 6 94 "void(int8 addr,int8 data)" `921 
V L "addr" 6 106 "int8" `925 
F G "cap1188_read_data1" 6 107 "int8(int8 addr)" `924 
V L "data" 6 108 "int8" `926 
V L "addr" 6 121 "int8" `928 
F G "cap1188_read_data2" 6 122 "int8(int8 addr)" `927 
V L "data" 6 123 "int8" `929 
C L "cap1188_init" 6 37 6 "FUNCTION"
F G "cap1188_init" 6 149 "void()" `930 
V G "index" 3 30 "int8" `931 
V L "key" 3 32 "int8" `933 
F G "Get7Seg" 3 32 "int8(int8 key)" `932 
C L "Get7Seg" 3 10 1 "FUNCTION"
V L "key" 3 59 "int8" `935 
F G "AddPoint" 3 59 "int8(int8 key)" `934 
F G "led_init" 3 63 "void()" `936  "Led7[0][0] = Get7Seg(0); Led7[0][1] = Get7Seg(1); Led7[0][2] = Get7Seg(2); Led7[0][3] = Get7Seg(3);"
C L "led_init" 3 10 4 "FUNCTION"
C L "led_init" 3 10 1 "FUNCTION"
C L "led_init" 3 10 1 "FUNCTION"
C L "led_init" 3 10 1 "FUNCTION"
F G "sclk_out" 3 79 "void()" `937 
C L "sclk_out" 3 10 1 "FUNCTION"
F G "strb_out1" 3 87 "void()" `938 
C L "strb_out1" 3 10 1 "FUNCTION"
F G "strb_out2" 3 95 "void()" `939 
C L "strb_out2" 3 10 1 "FUNCTION"
V L "data1" 3 103 "int8" `941 
V L "data2" 3 103 "int8" `942 
F G "Byte_Out_All" 3 103 "void(int8 data1,int8 data2)" `940 
V L "i" 3 104 "int8" `943 
F G "Led_Scan" 3 112 "void()" `944 
C L "Led_Scan" 3 10 1 "FUNCTION"
F G "SpeakerOn" 3 173 "void()" `945 
F G "SpeakerOff" 3 177 "void()" `946 
F G "LedClockOn" 3 183 "void()" `947 
F G "LedClockOff" 3 187 "void()" `948 
F G "LedSetTempOn" 3 192 "void()" `949 
F G "LedSetTempOff" 3 196 "void()" `950 
F G "LedProtectTempOn" 3 201 "void()" `951 
F G "LedProtectTempOff" 3 205 "void()" `952 
F G "LedTimeDelayOn" 3 210 "void()" `953 
F G "LedTimeDelayOff" 3 214 "void()" `954 
F G "LedTimeSterOn" 3 219 "void()" `955 
F G "LedTimeSterOff" 3 223 "void()" `956 
F G "LedTimeOn" 3 230 "void()" `957 
F G "LedTimeOff" 3 235 "void()" `958 
F G "LedHeaterOn" 3 240 "void()" `959 
F G "LedHeaterOff" 3 245 "void()" `960 
F G "LedAlarmOn" 3 250 "void()" `961 
F G "LedAlarmOff" 3 255 "void()" `962 
F G "LedIconOn" 3 260 "void()" `963 
F G "LedMaxOn" 3 265 "void()" `964 
F G "LedMaxOff" 3 269 "void()" `965 
F G "LedTempOn" 3 274 "void()" `966 
F G "LedTempOff" 3 279 "void()" `967 
C L "Led_Prog_Off" 3 10 10 "FUNCTION"
F G "Led_Prog_Off" 3 296 "void()" `968  "Led 1,2,3,4,5,6,7,8 Off:"
V L "tmp" 3 298 "int8" `969 
C L "Led_Prog_Off" 3 10 1 "FUNCTION"
F G "Led_0_On" 3 308 "void()" `970 
V L "tmp" 3 309 "int8" `971 
F G "Led_0_Off" 3 314 "void()" `972 
V L "tmp" 3 315 "int8" `973 
F G "Led_1_On" 3 320 "void()" `974 
V L "tmp" 3 321 "int8" `975 
F G "Led_1_Off" 3 327 "void()" `976 
V L "tmp" 3 328 "int8" `977 
F G "Led_2_On" 3 333 "void()" `978 
V L "tmp" 3 334 "int8" `979 
F G "Led_2_Off" 3 339 "void()" `980 
V L "tmp" 3 340 "int8" `981 
F G "Led_3_On" 3 345 "void()" `982 
V L "tmp" 3 346 "int8" `983 
F G "Led_3_Off" 3 351 "void()" `984 
V L "tmp" 3 352 "int8" `985 
F G "Led_4_On" 3 357 "void()" `986 
V L "tmp" 3 358 "int8" `987 
F G "Led_4_Off" 3 363 "void()" `988 
V L "tmp" 3 364 "int8" `989 
F G "Led_5_On" 3 369 "void()" `990 
V L "tmp" 3 370 "int8" `991 
F G "Led_5_Off" 3 375 "void()" `992 
V L "tmp" 3 376 "int8" `993 
F G "Led_6_On" 3 381 "void()" `994 
V L "tmp" 3 382 "int8" `995 
F G "Led_6_Off" 3 387 "void()" `996 
V L "tmp" 3 388 "int8" `997 
F G "Led_7_On" 3 393 "void()" `998 
V L "tmp" 3 394 "int8" `999 
F G "Led_7_Off" 3 399 "void()" `1000 
V L "tmp" 3 400 "int8" `1001 
F G "Led_8_On" 3 405 "void()" `1002 
V L "tmp" 3 406 "int8" `1003 
F G "Led_8_Off" 3 411 "void()" `1004 
V L "tmp" 3 412 "int8" `1005 
C L "Led_Dot_On" 3 10 1 "FUNCTION"
F G "Led_Dot_On" 3 417 "void()" `1006 
V L "tmp" 3 418 "int8" `1007 
C L "Led_Dot_Off" 3 10 1 "FUNCTION"
F G "Led_Dot_Off" 3 423 "void()" `1008 
V L "tmp" 3 424 "int8" `1009 
F G "Led_A_On" 3 429 "void()" `1010 
V L "tmp" 3 430 "int8" `1011 
F G "Led_A_Off" 3 435 "void()" `1012 
V L "tmp" 3 436 "int8" `1013 
F G "Led_B_On" 3 441 "void()" `1014 
V L "tmp" 3 442 "int8" `1015 
F G "Led_B_Off" 3 447 "void()" `1016 
V L "tmp" 3 448 "int8" `1017 
F G "Led_C_On" 3 453 "void()" `1018 
V L "tmp" 3 454 "int8" `1019 
F G "Led_C_Off" 3 459 "void()" `1020 
V L "tmp" 3 460 "int8" `1021 
F G "Led_D_On" 3 465 "void()" `1022 
V L "tmp" 3 466 "int8" `1023 
F G "Led_D_Off" 3 471 "void()" `1024 
V L "tmp" 3 472 "int8" `1025 
F G "Led_E_On" 3 477 "void()" `1026 
V L "tmp" 3 478 "int8" `1027 
F G "Led_E_Off" 3 483 "void()" `1028 
V L "tmp" 3 484 "int8" `1029 
F G "Led_F_On" 3 489 "void()" `1030 
V L "tmp" 3 490 "int8" `1031 
F G "Led_F_Off" 3 495 "void()" `1032 
V L "tmp" 3 496 "int8" `1033 
V L "duration" 3 505 "int16" `1035 
F G "Beep" 3 506 "void(int16 duration)" `1034 
C L "SetDate" 3 10 5 "FUNCTION"
V L "date" 3 518 "WEEKDAY" `1037 
F G "SetDate" 3 518 "void(WEEKDAY date)" `1036 
V L "tmp" 3 519 "int8" `1038 
C L "SetDate" 3 10 1 "FUNCTION"
C L "PutDateTime" 3 10 3 "FUNCTION"
F G "PutDateTime" 3 560 "void()" `1040 
C L "PutDateTime" 3 10 1 "FUNCTION"
C L "PutDateTime" 3 10 1 "FUNCTION"
C L "PutTime_DayHour" 3 10 5 "FUNCTION"
V L "mon" 3 579 "int8" `1042 
V L "time1" 3 579 "int16" `1043 
V L "time2" 3 579 "int16" `1044 
F G "PutTime_DayHour" 3 580 "void(int8 mon,int16 time1,int16 time2)" `1041  "if((g_mode != PROGRAM1)&&(g_mode != PROGRAM2)) {"
V L "mon" 3 588 "int8" `1046 
V L "time" 3 588 "int16" `1047 
F G "PutTime_One" 3 589 "void(int8 mon,int16 time)" `1045 
V L "hour" 3 590 "int8" `1048 
V L "min" 3 590 "int8" `1049 
C L "PutTime_One" 3 10 1 "FUNCTION"
C L "PutTempSign" 3 10 16 "FUNCTION"
V L "mon" 3 624 "int8" `1054 
V L "temp" 3 624 "sint16" `1055 
F G "PutTempSign" 3 625 "void(int8 mon,sint16 temp)" `1053 
C L "PutTempSign" 3 10 1 "FUNCTION"
V L "mon" 3 647 "int8" `1060 
V L "offset" 3 647 "sint16" `1061 
F G "PutOffset" 3 648 "void(int8 mon,sint16 offset)" `1059 
V L "mon" 3 662 "int8" `1063 
V L "temp" 3 662 "int16" `1064 
F G "PutPid" 3 663 "void(int8 mon,int16 temp)" `1062 
V L "mon" 3 671 "int8" `1066 
V L "sign" 3 671 "SIGN_CODE" `1067 
F G "PutSign" 3 672 "void(int8 mon,SIGN_CODE sign)" `1065 
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
C L "PutSign" 3 10 1 "FUNCTION"
V L "phase" 3 771 "PROCESS_PHASE" `1070 
F G "SetPhaseIndicator" 3 772 "void(PROCESS_PHASE phase)" `1069 
V L "tmp" 3 773 "int8" `1071 
C L "SetPhaseIndicator" 3 10 1 "FUNCTION"
V L "STATE" 3 800 "STATE" `1074 
F G "SetStateIndicator" 3 801 "void(STATE STATE)" `1073 
V L "tmp1" 3 802 "int8" `1075 
V L "tmp2" 3 803 "int8" `1076 
F G "LedFanOn1" 3 834 "void()" `1078 
F G "LedFanOn2" 3 839 "void()" `1079 
F G "LedFanOn3" 3 844 "void()" `1080 
F G "LedFanOn4" 3 849 "void()" `1081 
F G "LedFanLow" 3 855 "void()" `1082 
F G "LedFanMedium" 3 861 "void()" `1083 
F G "LedFanHigh" 3 867 "void()" `1084 
F G "LedFanOnAll" 3 874 "void()" `1085 
F G "LedFanOffAll" 3 879 "void()" `1086 
F G "LedFan1" 3 884 "void()" `1087 
C L "LedFan1" 3 10 1 "FUNCTION"
F G "LedFan2" 3 889 "void()" `1088 
C L "LedFan2" 3 10 1 "FUNCTION"
F G "LedFan3" 3 894 "void()" `1089 
C L "LedFan3" 3 10 1 "FUNCTION"
F G "LedFan4" 3 899 "void()" `1090 
C L "LedFan4" 3 10 1 "FUNCTION"
F G "LedFan5" 3 904 "void()" `1091 
C L "LedFan5" 3 10 1 "FUNCTION"
F G "LedFan6" 3 909 "void()" `1092 
C L "LedFan6" 3 10 1 "FUNCTION"
F G "LedFan7" 3 914 "void()" `1093 
C L "LedFan7" 3 10 1 "FUNCTION"
F G "LedFan8" 3 919 "void()" `1094 
C L "LedFan8" 3 10 1 "FUNCTION"
F G "SetFanSimulator1" 3 925 "void()" `1095 
F G "SetFanSimulator" 3 968 "void()" `1096 
V L "level" 3 994 "int8" `1098 
F G "SetFanIndicator" 3 995 "void(int8 level)" `1097 
V L "tmp1" 3 996 "int8" `1099 
V L "tmp2" 3 997 "int8" `1100 
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
C L "SetFanIndicator" 3 10 1 "FUNCTION"
D G "_KEYS_H_" 7 2 ""
C L "Get_Key_Code" 4 313 1 "FUNCTION"
C L "Get_Key_Code" 6 165 1 "FUNCTION"
f G "Get_Key_Code" 7 7 "int8()" `1101 
f G "kthit" 7 8 "int8()" `1102 
F G "key_init" 7 12 "void()" `1103 
C L "key_init" 7 14 8 "FUNCTION"
C L "key_init" 7 14 10 "FUNCTION"
C L "key_init" 7 14 1 "FUNCTION"
C L "key_init" 7 14 3 "FUNCTION"
F G "key_scan" 7 51 "void()" `1104 
C L "key_scan" 7 14 11 "FUNCTION"
C L "key_scan" 7 14 1 "FUNCTION"
C L "key_scan" 7 14 1 "FUNCTION"
C L "key_scan" 7 14 3 "FUNCTION"
C L "key_scan" 7 14 1 "FUNCTION"
C L "key_scan" 7 14 3 "FUNCTION"
C L "key_scan" 7 14 3 "FUNCTION"
C L "key_scan" 7 14 1 "FUNCTION"
F G "kthit" 7 148 "int8()" `1102 
F G "Get_Key_Code" 7 167 "int8()" `1101 
D G "_ADC_H_" 8 2 ""
D G "_AFE90100_H_" 9 2 ""
D G "_TI_LMP90100_H_" 10 2 ""
D G "TI_LMP90100_RESETCN_REG" 10 7 " (0x00)" "Reset Control"
D G "TI_LMP90100_SPI_HANDSHAKECN_REG" 10 9 " (0x01)" "SPI Handshake Control"
D G "TI_LMP90100_SPI_RESET_REG" 10 10 " (0x02)" "SPI Reset Control"
D G "TI_LMP90100_SPI_STREAMCN_REG" 10 11 " (0x03)" "SPI Stream Control"
D G "TI_LMP90100_PWRCN_REG" 10 13 " (0x08)" "Power Mode Control and Status"
D G "TI_LMP90100_DATA_ONLY_1_REG" 10 14 " (0x09)" "Data Only Read Control 1"
D G "TI_LMP90100_DATA_ONLY_2_REG" 10 15 " (0x0A)" "Data Only Read Control 2"
D G "TI_LMP90100_ADC_RESTART_REG" 10 16 " (0x0B)" "ADC Restart Conversion"
D G "TI_LMP90100_GPIO_DIRCN_REG" 10 18 " (0x0E)" "GPIO Direction Control"
D G "TI_LMP90100_GPIO_DAT_REG" 10 19 " (0x0F)" "GPIO Data"
D G "TI_LMP90100_BGCALCN_REG" 10 21 " (0x10)" "Background Calibration Control"
D G "TI_LMP90100_SPI_DRDYBCN_REG" 10 23 " (0x11)" "SPI Data Ready Bar Control"
D G "TI_LMP90100_ADC_AUXCN_REG" 10 26 " (0x12)" "ADC Auxillary Control"
D G "TI_LMP90100_SPI_CRC_CN_REG" 10 27 " (0x13)" "CRC Control"
D G "TI_LMP90100_SENDIAG_THLDH_REG" 10 28 " (0x14)" "Sensor Diagnostic Threshold High"
D G "TI_LMP90100_SENDIAG_THLDL_REG" 10 29 " (0x15)" "Sensor Diagnostic Threshold Low"
D G "TI_LMP90100_SCALCN_REG" 10 31 " (0x17)" "System Calibration Control"
D G "TI_LMP90100_ADC_DONE_REG" 10 32 " (0x18)" "ADC Data Available"
D G "TI_LMP90100_SENDIAG_FLAGS_REG" 10 33 " (0x19)" "Sensor Diagnostic Flags"
D G "TI_LMP90100_ADC_DOUT2_REG" 10 34 " (0x1A)" "ADC Conversion Data 2"
D G "TI_LMP90100_ADC_DOUT1_REG" 10 35 " (0x1B)" "ADC Conversion Data 1"
D G "TI_LMP90100_ADC_DOUT0_REG" 10 36 " (0x1C)" "ADC Conversion Data 0"
D G "TI_LMP90100_SPI_CRC_DAT_REG" 10 37 " (0x1D)" "CRC Data"
D G "TI_LMP90100_CH_STS_REG" 10 39 " (0x1E)" "Channel Status"
D G "TI_LMP90100_CH_SCAN_NRDY" 10 40 " (0x02)" "Channel Scan Not Ready Bit"
D G "TI_LMP90100_CH_SCAN_REG" 10 42 " (0x1F)" "Channel Scan Mode"
D G "TI_LMP90100_CH0_INPUTCN_REG" 10 43 " (0x20)" "CH0 Input Control"
D G "TI_LMP90100_CH0_CONFIG_REG" 10 44 " (0x21)" "CH0 Configuration"
D G "TI_LMP90100_CH1_INPUTCN_REG" 10 45 " (0x22)" "CH1 Input Control"
D G "TI_LMP90100_CH1_CONFIG_REG" 10 46 " (0x23)" "CH1 Configuration"
D G "TI_LMP90100_CH2_INPUTCN_REG" 10 47 " (0x24)" "CH2 Input Control"
D G "TI_LMP90100_CH2_CONFIG_REG" 10 48 " (0x25)" "CH2 Configuration"
D G "TI_LMP90100_CH3_INPUTCN_REG" 10 49 " (0x26)" "CH3 Input Control"
D G "TI_LMP90100_CH3_CONFIG_REG" 10 50 " (0x27)" "CH3 Configuration"
D G "TI_LMP90100_CH4_INPUTCN_REG" 10 51 " (0x28)" "CH4 Input Control"
D G "TI_LMP90100_CH4_CONFIG_REG" 10 52 " (0x29)" "CH4 Configuration"
D G "TI_LMP90100_CH5_INPUTCN_REG" 10 53 " (0x2A)" "CH5 Input Control"
D G "TI_LMP90100_CH5_CONFIG_REG" 10 54 " (0x2B)" "CH5 Configuration"
D G "TI_LMP90100_CH6_INPUTCN_REG" 10 55 " (0x2C)" "CH6 Input Control"
D G "TI_LMP90100_CH6_CONFIG_REG" 10 56 " (0x2D)" "CH6 Configuration"
D G "TI_LMP90100_CH0_SCAL_OFFSET2_REG" 10 58 " (0x30)" "CH0 System Calibration Offset Coefficient [23:16]"
D G "TI_LMP90100_CH0_SCAL_OFFSET1_REG" 10 59 " (0x31)" "CH0 System Calibration Offset Coefficient [15:8]"
D G "TI_LMP90100_CH0_SCAL_OFFSET0_REG" 10 60 " (0x32)" "CH0 System Calibration Offset Coefficient [7:0]"
D G "TI_LMP90100_CH0_SCAL_GAIN2_REG" 10 61 " (0x33)" "CH0 System Calibration Gain Coefficient [23:16]"
D G "TI_LMP90100_CH0_SCAL_GAIN1_REG" 10 62 " (0x34)" "CH0 System Calibration Gain Coefficient [15:8]"
D G "TI_LMP90100_CH0_SCAL_GAIN0_REG" 10 63 " (0x35)" "CH0 System Calibration Gain Coefficient [7:0]"
D G "TI_LMP90100_CH0_SCAL_SCALING_REG" 10 64 " (0x36)" "CH0 System Calibration Scaling Coefficient"
D G "TI_LMP90100_CH0_SCAL_BITS_SELECTOR_REG" 10 65 " (0x37)" "CH0 System Calibration Bits Selector"
D G "TI_LMP90100_CH1_SCAL_OFFSET2_REG" 10 67 " (0x38)" "CH1 System Calibration Offset Coefficient [23:16]"
D G "TI_LMP90100_CH1_SCAL_OFFSET1_REG" 10 68 " (0x39)" "CH1 System Calibration Offset Coefficient [15:8]"
D G "TI_LMP90100_CH1_SCAL_OFFSET0_REG" 10 69 " (0x3A)" "CH1 System Calibration Offset Coefficient [7:0]"
D G "TI_LMP90100_CH1_SCAL_GAIN2_REG" 10 70 " (0x3B)" "CH1 System Calibration Gain Coefficient [23:16]"
D G "TI_LMP90100_CH1_SCAL_GAIN1_REG" 10 71 " (0x3C)" "CH1 System Calibration Gain Coefficient [15:8]"
D G "TI_LMP90100_CH1_SCAL_GAIN0_REG" 10 72 " (0x3D)" "CH1 System Calibration Gain Coefficient [7:0]"
D G "TI_LMP90100_CH1_SCAL_SCALING_REG" 10 73 " (0x3E)" "CH1 System Calibration Scaling Coefficient"
D G "TI_LMP90100_CH1_SCAL_BITS_SELECTOR_REG" 10 74 " (0x3F)" "CH1 System Calibration Bits Selector"
D G "TI_LMP90100_CH2_SCAL_OFFSET2_REG" 10 76 " (0x40)" "CH2 System Calibration Offset Coefficient [23:16]"
D G "TI_LMP90100_CH2_SCAL_OFFSET1_REG" 10 77 " (0x41)" "CH2 System Calibration Offset Coefficient [15:8]"
D G "TI_LMP90100_CH2_SCAL_OFFSET0_REG" 10 78 " (0x42)" "CH2 System Calibration Offset Coefficient [7:0]"
D G "TI_LMP90100_CH2_SCAL_GAIN2_REG" 10 79 " (0x43)" "CH2 System Calibration Gain Coefficient [23:16]"
D G "TI_LMP90100_CH2_SCAL_GAIN1_REG" 10 80 " (0x44)" "CH2 System Calibration Gain Coefficient [15:8]"
D G "TI_LMP90100_CH2_SCAL_GAIN0_REG" 10 81 " (0x45)" "CH2 System Calibration Gain Coefficient [7:0]"
D G "TI_LMP90100_CH2_SCAL_SCALING_REG" 10 82 " (0x46)" "CH2 System Calibration Scaling Coefficient"
D G "TI_LMP90100_CH2_SCAL_BITS_SELECTOR_REG" 10 83 " (0x47)" "CH2 System Calibration Bits Selector"
D G "TI_LMP90100_CH3_SCAL_OFFSET2_REG" 10 85 " (0x48)" "CH3 System Calibration Offset Coefficient [23:16]"
D G "TI_LMP90100_CH3_SCAL_OFFSET1_REG" 10 86 " (0x49)" "CH3 System Calibration Offset Coefficient [15:8]"
D G "TI_LMP90100_CH3_SCAL_OFFSET0_REG" 10 87 " (0x4A)" "CH3 System Calibration Offset Coefficient [7:0]"
D G "TI_LMP90100_CH3_SCAL_GAIN2_REG" 10 88 " (0x4B)" "CH3 System Calibration Gain Coefficient [23:16]"
D G "TI_LMP90100_CH3_SCAL_GAIN1_REG" 10 89 " (0x4C)" "CH3 System Calibration Gain Coefficient [15:8]"
D G "TI_LMP90100_CH3_SCAL_GAIN0_REG" 10 90 " (0x4D)" "CH3 System Calibration Gain Coefficient [7:0]"
D G "TI_LMP90100_CH3_SCAL_SCALING_REG" 10 91 " (0x4E)" "CH3 System Calibration Scaling Coefficient"
D G "TI_LMP90100_CH3_SCAL_BITS_SELECTOR_REG" 10 92 " (0x4F)" "CH3 System Calibration Bits Selector"
D G "LMP90100_ODR_1SPS" 10 95 " (0x00)"
D G "LMP90100_ODR_3SPS" 10 96 " (0x10)"
D G "LMP90100_ODR_7SPS" 10 97 " (0x20)"
D G "LMP90100_ODR_13SPS" 10 98 " (0x30)"
D G "LMP90100_ODR_27SPS" 10 99 " (0x40)"
D G "LMP90100_ODR_54SPS" 10 100 " (0x50)"
D G "LMP90100_ODR_107SPS" 10 101 " (0x60)"
D G "LMP90100_ODR_214SPS" 10 102 " (0x70)"
D G "LMP90100_PGA_1" 10 104 " (0x00)"
D G "LMP90100_PGA_2" 10 105 " (0x02)"
D G "LMP90100_PGA_4" 10 106 " (0x04)"
D G "LMP90100_PGA_8" 10 107 " (0x06)"
D G "LMP90100_PGA_16" 10 108 " (0x08)"
D G "LMP90100_PGA_32" 10 109 " (0x0A)"
D G "LMP90100_PGA_64" 10 110 " (0x0C)"
D G "LMP90100_PGA_128" 10 111 " (0x0E)"
D G "LMP90100_BUF_DIS" 10 112 " (0x01)"
D G "LMP90100_URA_END" 10 118 " (0xFF)"
D G "LMP90100_URA_MASK" 10 119 " (0x70)"
D G "LMP90100_LRA_MASK" 10 120 " (0x0F)"
D G "LMP90100_READ_BIT" 10 121 " (0x80)"
D G "LMP90100_WRITE_BIT" 10 122 " (0x00)"
D G "LMP90100_SIZE_1B" 10 123 " (0x00)"
D G "LMP90100_SIZE_2B" 10 124 " (0x20)"
D G "LMP90100_SIZE_3B" 10 125 " (0x40)"
D G "LMP90100_SIZE_STREAM" 10 126 " (0x60)"
D G "LMP90100_CH_NUM_MASK" 10 127 " (0x07)"
D G "LMP90100_INSTRUCTION_BYTE1_WRITE" 10 129 " (0x10)"
D G "LMP90100_DATA_FIRST_MODE_INSTRUCTION_ENABLE" 10 130 " (0xFA)"
D G "LMP90100_DATA_FIRST_MODE_INSTRUCTION_DISABLE" 10 131 " (0xFB)"
D G "LMP90100_DATA_FIRST_MODE_INSTRUCTION_READ_MODE_STATUS" 10 132 " (0x9F)"
D G "LMP90100_DATA_FIRST_MODE_STATUS_FLAG" 10 133 " (0x80)"
E G "CRC_PASS" 10 135 "0" `1106 
E G "CRC_FAIL" 10 135 "1" `1107 
E G "CRC_NOT_USED" 10 135 "2" `1108  "_TI_LMP90100_H_"
V G "URA" 9 12 "int8" `1109 
F G "AFE90100_init" 9 16 "void()" `1110  "** Note the CCS compiler has error in the setup_spi,where the SPI_L_TO_H"
C L "AFE90100_init" 9 17 3 "FUNCTION"
V L "addr" 9 24 "int8" `1112 
V L "value" 9 24 "int8" `1113 
F G "AFE90100_WriteReg" 9 25 "void(int8 addr,int8 value)" `1111 
V L "new_URA" 9 26 "int8" `1114 
V L "inst" 9 26 "int8" `1115 
C L "AFE90100_WriteReg" 9 17 1 "FUNCTION"
C L "AFE90100_WriteReg" 9 17 1 "FUNCTION"
C L "AFE90100_WriteReg" 9 17 1 "FUNCTION"
C L "AFE90100_WriteReg" 9 17 1 "FUNCTION"
C L "AFE90100_WriteReg" 9 17 1 "FUNCTION"
C L "AFE90100_WriteReg" 9 17 1 "FUNCTION"
V L "addr" 9 42 "int8" `1117 
F G "AFE90100_ReadReg" 9 43 "int8(int8 addr)" `1116 
V L "new_URA" 9 44 "int8" `1118 
V L "inst" 9 44 "int8" `1119 
V L "value" 9 44 "int8" `1120 
C L "AFE90100_ReadReg" 9 17 1 "FUNCTION"
C L "AFE90100_ReadReg" 9 17 1 "FUNCTION"
C L "AFE90100_ReadReg" 9 17 1 "FUNCTION"
C L "AFE90100_ReadReg" 9 17 1 "FUNCTION"
C L "AFE90100_ReadReg" 9 17 1 "FUNCTION"
C L "AFE90100_ReadReg" 9 17 1 "FUNCTION"
V L "ch" 9 61 "int8" `1122 
V L "pga" 9 61 "int8" `1123 
F G "AFE90100_SetPGA" 9 62 "void(int8 ch,int8 pga)" `1121 
F G "AFE90100_ReadADC" 9 67 "sint32()" `1124 
V L "adc_data" 9 68 "ADC_DATA_TYPE" `1125 
C L "adc_init" 9 17 1 "FUNCTION"
F G "adc_init" 8 8 "void()" `1126  "Set scan mode to "Continuous scan", from CH0 to CH1; 10001000"
C L "adc_init" 8 11 1 "FUNCTION"
C L "adc_init" 8 11 1 "FUNCTION"
C L "adc_init" 8 11 1 "FUNCTION"
C L "adc_init" 8 11 1 "FUNCTION"
V G "adc_ch" 8 37 "int8" `1130 
F G "adc_scan" 8 40 "void()" `1131 
V L "adc_done" 8 41 "int8" `1132 
C L "adc_scan" 8 11 1 "FUNCTION"
C L "adc_scan" 8 11 1 "FUNCTION"
C L "adc_scan" 8 11 1 "FUNCTION"
C L "adc_scan" 8 11 1 "FUNCTION"
D G "THERMO_COEFF" 8 66 " (22701)"
F G "get_temp" 8 69 "void()" `1133 
C L "get_temp" 8 11 1 "FUNCTION"
F G "read_lm335" 8 77 "void()" `1137  "Set CH0 to measure lm335 (IN5-IN7); REF = REFP1-REFN1; 00101111"
C L "read_lm335" 8 11 1 "FUNCTION"
C L "read_lm335" 8 11 1 "FUNCTION"
F G "read_thermocouple" 8 88 "void()" `1138  "Set CH0 to measure thermocouple (IN3-IN4); REF = REFP1-REFN1;00100011"
C L "read_thermocouple" 8 11 1 "FUNCTION"
C L "read_thermocouple" 8 11 1 "FUNCTION"
D G "_TRIAC_H_" 11 2 ""
F G "HeaterOn" 11 6 "void()" `1139  "output_high(PIN_C0);"
C L "HeaterOn" 11 8 7 "FUNCTION"
F G "HeaterOff" 11 20 "void()" `1140  "output_low(PIN_C0);"
C L "HeaterOff" 11 8 7 "FUNCTION"
F G "Ctrl1On" 11 33 "void()" `1141 
F G "Ctrl1Off" 11 39 "void()" `1142 
F G "Ctrl2On" 11 44 "void()" `1143 
F G "Ctrl2Off" 11 50 "void()" `1144 
F G "Ctrl3On" 11 55 "void()" `1145 
F G "Ctrl3Off" 11 61 "void()" `1146 
F G "triac_init" 11 67 "void()" `1147 
C L "triac_init" 11 8 1 "FUNCTION"
F G "triac_scan" 11 76 "void()" `1148  "Scanning the heating triac:"
C L "triac_scan" 11 8 1 "FUNCTION"
C L "triac_scan" 11 8 1 "FUNCTION"
C L "triac_scan" 11 8 1 "FUNCTION"
D G "_RTCC_H_" 12 2 ""
C L "RTCC_isr" 4 313 1 "FUNCTION"
F G "RTCC_isr" 12 8 "void()" `1162 
F G "RTCC_init" 12 46 "void()" `1163 
C L "RTCC_init" 12 48 1 "FUNCTION"
C L "RTCC_init" 12 48 1 "FUNCTION"
C L "RTCC_init" 12 48 1 "FUNCTION"
D G "_PROCESS_KEYS_H_" 13 2 ""
V G "n" 13 12 "int8" `1164 
f G "Process_Touch" 13 14 "void()" `1165 
f G "Process_Touch_0" 13 16 "void()" `1166 
f G "Process_Touch_1" 13 17 "void()" `1167 
f G "Process_Touch_2" 13 18 "void()" `1168 
f G "Process_Touch_3" 13 19 "void()" `1169 
f G "Process_Touch_4" 13 20 "void()" `1170 
f G "Process_Touch_5" 13 21 "void()" `1171 
f G "Process_Touch_6" 13 22 "void()" `1172 
f G "Process_Touch_7" 13 23 "void()" `1173 
f G "Process_Touch_8" 13 24 "void()" `1174 
f G "Process_Touch_9" 13 25 "void()" `1175 
f G "Process_Touch_A" 13 26 "void()" `1176 
f G "Process_Touch_B" 13 27 "void()" `1177 
f G "Process_Touch_C" 13 28 "void()" `1178 
f G "Process_Touch_D" 13 29 "void()" `1179 
f G "Process_Touch_E" 13 30 "void()" `1180 
f G "Process_Touch_F" 13 31 "void()" `1181 
f G "Process_Touch_Down" 13 32 "void()" `1182 
f G "Process_Touch_Up" 13 33 "void()" `1183 
f G "Process_Touch_a_Small" 13 34 "void()" `1184 
f G "Process_Touch_b_Small" 13 35 "void()" `1185  "void Process_Touch_c_Small(void);"
f G "Process_Touch_d_Small" 13 37 "void()" `1186 
f G "Process_Touch_e_Small" 13 38 "void()" `1187 
f G "Process_Touch_f_Small" 13 39 "void()" `1188 
f G "Process_Touch_h_Small" 13 40 "void()" `1189 
f G "Process_Setup" 13 42 "void()" `1190 
F G "Process_Touch" 13 45 "void()" `1165 
C L "Process_Touch" 13 10 3 "FUNCTION"
F G "Process_Touch_0" 13 144 "void()" `1166 
C L "Process_Touch_0" 13 10 4 "FUNCTION"
C L "Process_Touch_0" 13 10 4 "FUNCTION"
F G "Process_Touch_1" 13 168 "void()" `1167 
C L "Process_Touch_1" 13 10 4 "FUNCTION"
C L "Process_Touch_1" 13 10 4 "FUNCTION"
F G "Process_Touch_2" 13 192 "void()" `1168 
C L "Process_Touch_2" 13 10 4 "FUNCTION"
C L "Process_Touch_2" 13 10 4 "FUNCTION"
F G "Process_Touch_3" 13 216 "void()" `1169 
C L "Process_Touch_3" 13 10 4 "FUNCTION"
C L "Process_Touch_3" 13 10 4 "FUNCTION"
F G "Process_Touch_4" 13 240 "void()" `1170 
C L "Process_Touch_4" 13 10 4 "FUNCTION"
C L "Process_Touch_4" 13 10 4 "FUNCTION"
F G "Process_Touch_5" 13 264 "void()" `1171 
C L "Process_Touch_5" 13 10 4 "FUNCTION"
C L "Process_Touch_5" 13 10 4 "FUNCTION"
F G "Process_Touch_6" 13 288 "void()" `1172 
C L "Process_Touch_6" 13 10 4 "FUNCTION"
C L "Process_Touch_6" 13 10 4 "FUNCTION"
F G "Process_Touch_7" 13 312 "void()" `1173 
C L "Process_Touch_7" 13 10 4 "FUNCTION"
C L "Process_Touch_7" 13 10 4 "FUNCTION"
F G "Process_Touch_8" 13 336 "void()" `1174 
C L "Process_Touch_8" 13 10 4 "FUNCTION"
C L "Process_Touch_8" 13 10 4 "FUNCTION"
F G "Process_Touch_A" 13 360 "void()" `1176 
C L "Process_Touch_A" 13 10 4 "FUNCTION"
C L "Process_Touch_A" 13 10 4 "FUNCTION"
C L "Process_Touch_D" 13 10 1 "FUNCTION"
F G "Process_Touch_D" 13 384 "void()" `1179 
C L "Process_Touch_D" 13 10 23 "FUNCTION"
C L "Process_Touch_D" 13 10 1 "FUNCTION"
C L "Process_Touch_D" 13 10 1 "FUNCTION"
F G "Process_Touch_9" 13 481 "void()" `1175 
C L "Process_Touch_B" 13 10 1 "FUNCTION"
F G "Process_Touch_B" 13 501 "void()" `1177 
C L "Process_Touch_B" 13 10 2 "FUNCTION"
C L "Process_Touch_B" 13 10 6 "FUNCTION"
C L "Process_Touch_C" 13 10 1 "FUNCTION"
F G "Process_Touch_C" 13 543 "void()" `1178 
C L "Process_Touch_C" 13 10 32 "FUNCTION"
C L "Process_Touch_C" 13 10 7 "FUNCTION"
C L "Process_Touch_Down" 13 10 1 "FUNCTION"
F G "Process_Touch_Down" 13 653 "void()" `1182 
V L "d1" 13 654 "int8" `1195 
V L "d0" 13 654 "int8" `1196 
C L "Process_Touch_Down" 13 10 1 "FUNCTION"
C L "Process_Touch_Down" 13 10 116 "FUNCTION"
C L "Process_Touch_Up" 13 10 1 "FUNCTION"
F G "Process_Touch_Up" 13 882 "void()" `1183 
V L "d1" 13 883 "int8" `1197 
V L "d0" 13 883 "int8" `1198 
C L "Process_Touch_Up" 13 10 120 "FUNCTION"
C L "Process_Touch_Up" 13 10 7 "FUNCTION"
F G "Process_Touch_d_Small" 13 1117 "void()" `1186 
F G "Process_Touch_a_Small" 13 1136 "void()" `1184 
C L "Process_Touch_b_Small" 13 10 1 "FUNCTION"
F G "Process_Touch_b_Small" 13 1148 "void()" `1185 
C L "Process_Touch_e_Small" 13 10 1 "FUNCTION"
F G "Process_Touch_e_Small" 13 1161 "void()" `1187 
F G "Process_Touch_f_Small" 13 1173 "void()" `1188  "Key 3"
F G "Process_Touch_h_Small" 13 1183 "void()" `1189 
C L "Process_Touch_h_Small" 13 10 1 "FUNCTION"
C L "Process_Setup" 13 10 1 "FUNCTION"
F G "Process_Setup" 13 1200 "void()" `1190 
C L "Process_Setup" 13 10 37 "FUNCTION"
D G "_PROCESS_LEDS_H_" 14 2 ""
C L "Process_Led" 3 1035 1 "FUNCTION"
C L "Process_Led" 7 215 1 "FUNCTION"
C L "Process_Led" 14 6 2 "FUNCTION"
C L "Process_Led" 12 61 1 "FUNCTION"
C L "Process_Led" 6 165 1 "FUNCTION"
F G "Process_Led" 14 12 "void()" `1200 
C L "Process_Led" 14 25 1 "FUNCTION"
C L "Process_Led" 14 25 1 "FUNCTION"
C L "Process_Led" 14 25 1 "FUNCTION"
C L "Process_Led" 14 25 1 "FUNCTION"
C L "Process_Led" 14 25 1 "FUNCTION"
C L "Process_Led" 14 25 1 "FUNCTION"
C L "Process_Led" 14 25 38 "FUNCTION"
C L "Process_Led" 14 25 3 "FUNCTION"
C L "Process_Led" 14 25 3 "FUNCTION"
C L "Process_Led" 14 25 3 "FUNCTION"
D G "_PROCESS_RS232_H_" 15 2 ""
V G "TempPrint" 15 10 "float" `1205 
V G "min_rs232" 15 11 "int8" `1206 
V G "last_min_rs232" 15 11 "int8" `1207  "static unsigned char flag_Err = 0;"
V G "code_program" 15 18 "int8" `1208 
F G "Process_Rs232" 15 19 "void()" `1209 
C L "Process_Rs232" 15 13 11 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
C L "Process_Rs232" 15 13 1 "FUNCTION"
D G "_PROCESS_LIFECYCLE_H_" 16 2 ""
D G "TEMP_GAP" 16 4 "0"
D G "TEMP_ENV" 16 5 "10000"
D G "TIME_PRE_HOLD" 16 6 "5"
F G "process_lifecycle" 16 8 "void()" `1257 
C L "process_lifecycle" 16 14 2 "FUNCTION"
C L "process_lifecycle" 16 14 2 "FUNCTION"
D G "_PROCESS_DATA_H_" 17 2 ""
D G "_PID_H_" 18 2 ""
D G "TEMP_UPPER_ALLOFF" 18 6 " (-80.0)"
D G "TEMP_LOWER_FULLON" 18 7 " (2000.0)"
D G "TEMP_SPEED_MAX_CONST" 18 11 " (20.0)"
D G "TEMP_INTEG_MAX_CONST" 18 13 " (60000.0)"
C L "process_adaptive" 18 4 40 "FUNCTION"
V L "temp" 18 67 "float" `1260 
F G "process_adaptive" 18 68 "int16(float temp)" `1259 
V L "pre_err" 18 69 "float" `1261 
V L "power_term" 18 70 "float" `1262 
V L "err" 18 71 "float" `1263 
V L "p_term" 18 71 "float" `1264 
V L "d_term" 18 71 "float" `1265 
V L "power_adjust_term" 18 72 "float" `1266 
C L "process_adaptive" 18 4 1 "FUNCTION"
C L "process_adaptive" 18 4 1 "FUNCTION"
C L "process_adaptive" 18 4 1 "FUNCTION"
C L "process_adaptive" 18 4 1 "FUNCTION"
D G "_MAX31865_H_" 19 2 ""
D G "MAX_CS1" 19 5 "PIN_C2"
D G "MAX_CS2" 19 6 "PIN_C1"
D G "RTD_CONFIGURATION" 19 8 "0x00;" "*< Configuration Register"
D G "RTD_RTD_MSB" 19 9 "0x01;" "*< RTD Data MSB Register"
D G "RTD_RTD_LSB" 19 10 "0x02;" "*< RTD Data LSB Register"
D G "RTD_HI_FLT_THRHLD_MSB" 19 11 "0x03;" "*< High Fault Threshold MSB register"
D G "RTD_HI_FLT_THRHLD_LSB" 19 12 "0x04;" "*< High Fault Threshold LSB register"
D G "RTD_LO_FLT_THRHLD_MSB" 19 13 "0x05;" "*< Low Fault Threshold MSB register"
D G "RTD_LO_FLT_THRHLD_LSB" 19 14 "0x06;" "*< Low Fault Threshold LSB register"
D G "RTD_FLT_STATUS" 19 15 "0x07;" "*< Fault Status Register"
D G "RREF" 19 16 "430" "Reference resistor"
D G "FACTOR" 19 17 "32768" "2^15 used for data to resistance conversion"
D G "ALPHA" 19 18 "0.003851" "PT-100 temperature coefficient"
V G "RTD_REF_RESISTANCE_430" 19 20 "int16" `1267 
C L "max_spiWrite" 19 20 1 "*"
V L "pBuf" 19 22 "*int8" `1269 
V L "nBytes" 19 22 "int16" `1270 
f G "max_spiWrite" 19 22 "void(*int8 pBuf,int16 nBytes)" `1268 
V L "pBuf" 19 23 "*int8" `1272 
V L "nBytes" 19 23 "int16" `1273 
f G "max_spiRead" 19 23 "void(*int8 pBuf,int16 nBytes)" `1271 
V L "pin" 19 24 "*int8" `1275 
V L "pOut" 19 24 "*int8" `1276 
V L "nBytes" 19 24 "int16" `1277 
f G "max_spiTransfer" 19 24 "void(*int8 pin,*int8 pOut,int16 nBytes)" `1274 
V L "regAddress" 19 26 "int8" `1279 
V L "writeData" 19 26 "int8" `1280 
f G "max_writeRegister1" 19 26 "void(int8 regAddress,int8 writeData)" `1278 
V L "regAddress" 19 27 "int8" `1282 
V L "writeData" 19 27 "int8" `1283 
f G "max_writeRegister2" 19 27 "void(int8 regAddress,int8 writeData)" `1281 
V L "regAddress" 19 29 "int8" `1285 
f G "max_readRegister1" 19 29 "int8(int8 regAddress)" `1284 
V L "regAddress" 19 30 "int8" `1287 
f G "max_readRegister2" 19 30 "int8(int8 regAddress)" `1286 
f G "max_readTemperature1" 19 32 "int16()" `1288 
f G "max_readTemperature2" 19 33 "int16()" `1289 
V L "inputData" 19 35 "int16" `1291 
V L "referentResistance" 19 35 "int16" `1292 
f G "max_convertTemperature" 19 35 "float(int16 inputData,int16 referentResistance)" `1290 
f G "max31865_init" 19 36 "void()" `1293  "-------------------- Begin Max31865 --------------------*"
C L "max31865_init" 19 20 1 "FUNCTION"
V L "pBuf" 19 40 "*int8" `1269 
V L "nBytes" 19 40 "int16" `1296 
F G "max_spiWrite" 19 40 "void(*int8 pBuf,int16 nBytes)" `1268 
V L "ptr" 19 41 "*int8" `1294 
C L "max_spiRead" 19 20 1 "FUNCTION"
V L "pBuf" 19 47 "*int8" `1272 
V L "nBytes" 19 47 "int16" `1297 
F G "max_spiRead" 19 47 "void(*int8 pBuf,int16 nBytes)" `1271 
V L "ptr" 19 48 "*int8" `1295 
V L "pin" 19 53 "*int8" `1275 
V L "pOut" 19 53 "*int8" `1276 
V L "nBytes" 19 53 "int16" `1299 
F G "max_spiTransfer" 19 53 "void(*int8 pin,*int8 pOut,int16 nBytes)" `1274 
V L "in" 19 54 "*int8" `1296 
V L "out" 19 55 "*int8" `1297 
C L "max_writeRegister1" 19 20 1 "FUNCTION"
V L "regAddress" 19 61 "int8" `1279 
V L "writeData" 19 61 "int8" `1300 
F G "max_writeRegister1" 19 61 "void(int8 regAddress,int8 writeData)" `1278 
V L "tmp" 19 62 "int8[2]" `1298 
C L "max_writeRegister2" 19 20 1 "FUNCTION"
V L "regAddress" 19 72 "int8" `1282 
V L "writeData" 19 72 "int8" `1301 
F G "max_writeRegister2" 19 72 "void(int8 regAddress,int8 writeData)" `1281 
V L "tmp" 19 73 "int8[2]" `1299 
C L "max_readRegister1" 19 20 1 "FUNCTION"
V L "regAddress" 19 83 "int8" `1301 
F G "max_readRegister1" 19 83 "int8(int8 regAddress)" `1284 
V L "tmp" 19 84 "int8" `1300 
C L "max_readRegister2" 19 20 1 "FUNCTION"
V L "regAddress" 19 93 "int8" `1302 
F G "max_readRegister2" 19 93 "int8(int8 regAddress)" `1286 
V L "tmp" 19 94 "int8" `1301 
C L "max_readTemperature1" 19 20 1 "FUNCTION"
F G "max_readTemperature1" 19 103 "int16()" `1288 
V L "returnValue" 19 104 "int16" `1302 
V L "buff" 19 105 "int8[2]" `1303 
C L "max_readTemperature2" 19 20 1 "FUNCTION"
F G "max_readTemperature2" 19 115 "int16()" `1289 
V L "returnValue" 19 116 "int16" `1304 
V L "buff" 19 117 "int8[2]" `1305 
C L "max_convertTemperature" 19 20 1 "FUNCTION"
V L "inputData" 19 127 "int16" `1291 
V L "referentResistance" 19 127 "int16" `1308 
F G "max_convertTemperature" 19 127 "float(int16 inputData,int16 referentResistance)" `1290 
V L "floatValue" 19 128 "float" `1306  "float coefficient;"
C L "max_convertTemperature" 19 20 5 "FUNCTION"
V L "resistance" 19 135 "float" `1307 
C L "max_convertTemperature" 19 20 1 "FUNCTION"
C L "max31865_init" 19 20 1 "FUNCTION"
F G "max31865_init" 19 142 "void()" `1293 
F G "Get_Data" 17 7 "void()" `1308 
C L "Get_Data" 17 10 2 "FUNCTION"
C L "Get_Data" 17 10 12 "FUNCTION"
F G "Process_Data" 17 38 "void()" `1311  "static unsigned int16 index_time_hour, index_time_day;"
C L "Process_Data" 17 10 1 "FUNCTION"
C L "Process_Data" 17 10 4 "FUNCTION"
C L "Process_Data" 17 10 1 "FUNCTION"
C L "Process_Data" 17 10 1 "FUNCTION"
C L "Process_Data" 17 10 1 "FUNCTION"
C L "Process_Data" 17 10 14 "FUNCTION"
C L "global_init" 17 10 1 "FUNCTION"
C L "global_init" 9 76 1 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
F G "global_init" 0 20 "void()" `1312 
C L "global_init" 0 17 1 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
C L "global_init" 0 17 3 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
C L "global_init" 0 17 2 "FUNCTION"
C L "global_init" 0 17 1 "FUNCTION"
F G "MAIN" 0 91 "void()" `1313  "delay_ms(1000);"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
